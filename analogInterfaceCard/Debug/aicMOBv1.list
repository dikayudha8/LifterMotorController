
C:\Users\Andika\Documents\GitHub\LifterMotorController\analogInterfaceCard\Debug\aicMOBv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002b6c  08002b6c  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  08002b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020044  2**0
                  CONTENTS
  7 .bss          000005e4  20000044  20000044  00020044  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000628  20000628  00020044  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eae3  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021b8  00000000  00000000  0002eb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c58  00000000  00000000  00030d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b20  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005037  00000000  00000000  00032488  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d6c  00000000  00000000  000374bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b22b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003440  00000000  00000000  0003b2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b54 	.word	0x08002b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	08002b54 	.word	0x08002b54

080001c8 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	460b      	mov	r3, r1
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80001d6:	7afb      	ldrb	r3, [r7, #11]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	331b      	adds	r3, #27
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	4413      	add	r3, r2
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	7a1b      	ldrb	r3, [r3, #8]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d10b      	bne.n	800020e <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80001f6:	7afb      	ldrb	r3, [r7, #11]
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	331b      	adds	r3, #27
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	4413      	add	r3, r2
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	0d5b      	lsrs	r3, r3, #21
 8000204:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	e00a      	b.n	8000224 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800020e:	7afb      	ldrb	r3, [r7, #11]
 8000210:	68fa      	ldr	r2, [r7, #12]
 8000212:	331b      	adds	r3, #27
 8000214:	011b      	lsls	r3, r3, #4
 8000216:	4413      	add	r3, r2
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	08db      	lsrs	r3, r3, #3
 800021c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000224:	7afb      	ldrb	r3, [r7, #11]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	331b      	adds	r3, #27
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	4413      	add	r3, r2
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	f003 0302 	and.w	r3, r3, #2
 8000236:	b2da      	uxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800023c:	7afb      	ldrb	r3, [r7, #11]
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	331b      	adds	r3, #27
 8000242:	011b      	lsls	r3, r3, #4
 8000244:	4413      	add	r3, r2
 8000246:	3304      	adds	r3, #4
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	f003 030f 	and.w	r3, r3, #15
 8000250:	b2da      	uxtb	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000256:	7afb      	ldrb	r3, [r7, #11]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	331b      	adds	r3, #27
 800025c:	011b      	lsls	r3, r3, #4
 800025e:	4413      	add	r3, r2
 8000260:	3304      	adds	r3, #4
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2da      	uxtb	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800026c:	7afb      	ldrb	r3, [r7, #11]
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	011b      	lsls	r3, r3, #4
 8000272:	4413      	add	r3, r2
 8000274:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	b2da      	uxtb	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000280:	7afb      	ldrb	r3, [r7, #11]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	4413      	add	r3, r2
 8000288:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	0a1b      	lsrs	r3, r3, #8
 8000290:	b2da      	uxtb	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000296:	7afb      	ldrb	r3, [r7, #11]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	011b      	lsls	r3, r3, #4
 800029c:	4413      	add	r3, r2
 800029e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	0c1b      	lsrs	r3, r3, #16
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80002ac:	7afb      	ldrb	r3, [r7, #11]
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	011b      	lsls	r3, r3, #4
 80002b2:	4413      	add	r3, r2
 80002b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	0e1b      	lsrs	r3, r3, #24
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80002c2:	7afb      	ldrb	r3, [r7, #11]
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	4413      	add	r3, r2
 80002ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80002d6:	7afb      	ldrb	r3, [r7, #11]
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	011b      	lsls	r3, r3, #4
 80002dc:	4413      	add	r3, r2
 80002de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80002ec:	7afb      	ldrb	r3, [r7, #11]
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	011b      	lsls	r3, r3, #4
 80002f2:	4413      	add	r3, r2
 80002f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	0c1b      	lsrs	r3, r3, #16
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000302:	7afb      	ldrb	r3, [r7, #11]
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	011b      	lsls	r3, r3, #4
 8000308:	4413      	add	r3, r2
 800030a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	0e1b      	lsrs	r3, r3, #24
 8000312:	b2da      	uxtb	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000318:	7afb      	ldrb	r3, [r7, #11]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d106      	bne.n	800032c <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	f043 0220 	orr.w	r2, r3, #32
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 800032a:	e005      	b.n	8000338 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	f043 0220 	orr.w	r2, r3, #32
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	611a      	str	r2, [r3, #16]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000354:	4013      	ands	r3, r2
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a43      	ldr	r2, [pc, #268]	; (8000484 <DMA_DeInit+0x140>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 800037a:	4a43      	ldr	r2, [pc, #268]	; (8000488 <DMA_DeInit+0x144>)
 800037c:	4b42      	ldr	r3, [pc, #264]	; (8000488 <DMA_DeInit+0x144>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	f043 030f 	orr.w	r3, r3, #15
 8000384:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000386:	e077      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a40      	ldr	r2, [pc, #256]	; (800048c <DMA_DeInit+0x148>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000390:	4a3d      	ldr	r2, [pc, #244]	; (8000488 <DMA_DeInit+0x144>)
 8000392:	4b3d      	ldr	r3, [pc, #244]	; (8000488 <DMA_DeInit+0x144>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800039a:	6053      	str	r3, [r2, #4]
}
 800039c:	e06c      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a3b      	ldr	r2, [pc, #236]	; (8000490 <DMA_DeInit+0x14c>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 80003a6:	4a38      	ldr	r2, [pc, #224]	; (8000488 <DMA_DeInit+0x144>)
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <DMA_DeInit+0x144>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80003b0:	6053      	str	r3, [r2, #4]
}
 80003b2:	e061      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a37      	ldr	r2, [pc, #220]	; (8000494 <DMA_DeInit+0x150>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 80003bc:	4a32      	ldr	r2, [pc, #200]	; (8000488 <DMA_DeInit+0x144>)
 80003be:	4b32      	ldr	r3, [pc, #200]	; (8000488 <DMA_DeInit+0x144>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80003c6:	6053      	str	r3, [r2, #4]
}
 80003c8:	e056      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a32      	ldr	r2, [pc, #200]	; (8000498 <DMA_DeInit+0x154>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 80003d2:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <DMA_DeInit+0x144>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <DMA_DeInit+0x144>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80003dc:	6053      	str	r3, [r2, #4]
}
 80003de:	e04b      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a2e      	ldr	r2, [pc, #184]	; (800049c <DMA_DeInit+0x158>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 80003e8:	4a27      	ldr	r2, [pc, #156]	; (8000488 <DMA_DeInit+0x144>)
 80003ea:	4b27      	ldr	r3, [pc, #156]	; (8000488 <DMA_DeInit+0x144>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f2:	6053      	str	r3, [r2, #4]
}
 80003f4:	e040      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a29      	ldr	r2, [pc, #164]	; (80004a0 <DMA_DeInit+0x15c>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 80003fe:	4a22      	ldr	r2, [pc, #136]	; (8000488 <DMA_DeInit+0x144>)
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <DMA_DeInit+0x144>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000408:	6053      	str	r3, [r2, #4]
}
 800040a:	e035      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a25      	ldr	r2, [pc, #148]	; (80004a4 <DMA_DeInit+0x160>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 8000414:	4a24      	ldr	r2, [pc, #144]	; (80004a8 <DMA_DeInit+0x164>)
 8000416:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <DMA_DeInit+0x164>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f043 030f 	orr.w	r3, r3, #15
 800041e:	6053      	str	r3, [r2, #4]
}
 8000420:	e02a      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a21      	ldr	r2, [pc, #132]	; (80004ac <DMA_DeInit+0x168>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 800042a:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <DMA_DeInit+0x164>)
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <DMA_DeInit+0x164>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000434:	6053      	str	r3, [r2, #4]
}
 8000436:	e01f      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <DMA_DeInit+0x16c>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000440:	4a19      	ldr	r2, [pc, #100]	; (80004a8 <DMA_DeInit+0x164>)
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <DMA_DeInit+0x164>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800044a:	6053      	str	r3, [r2, #4]
}
 800044c:	e014      	b.n	8000478 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <DMA_DeInit+0x170>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <DMA_DeInit+0x164>)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <DMA_DeInit+0x164>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000460:	6053      	str	r3, [r2, #4]
}
 8000462:	e009      	b.n	8000478 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <DMA_DeInit+0x174>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d105      	bne.n	8000478 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <DMA_DeInit+0x164>)
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <DMA_DeInit+0x164>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000476:	6053      	str	r3, [r2, #4]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40020008 	.word	0x40020008
 8000488:	40020000 	.word	0x40020000
 800048c:	4002001c 	.word	0x4002001c
 8000490:	40020030 	.word	0x40020030
 8000494:	40020044 	.word	0x40020044
 8000498:	40020058 	.word	0x40020058
 800049c:	4002006c 	.word	0x4002006c
 80004a0:	40020080 	.word	0x40020080
 80004a4:	40020408 	.word	0x40020408
 80004a8:	40020400 	.word	0x40020400
 80004ac:	4002041c 	.word	0x4002041c
 80004b0:	40020430 	.word	0x40020430
 80004b4:	40020444 	.word	0x40020444
 80004b8:	40020458 	.word	0x40020458

080004bc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004da:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004ea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004f6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000502:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000508:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4313      	orrs	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	899b      	ldrh	r3, [r3, #12]
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d006      	beq.n	800055c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f043 0201 	orr.w	r2, r3, #1
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  }
}
 800055a:	e006      	b.n	800056a <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000564:	4013      	ands	r3, r2
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8000582:	887a      	ldrh	r2, [r7, #2]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	605a      	str	r2, [r3, #4]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <DMA_GetCurrDataCounter>:
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	b29b      	uxth	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d006      	beq.n	80005d0 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	431a      	orrs	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 80005ce:	e006      	b.n	80005de <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <DMA_GetFlagStatus+0x4c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e002      	b.n	8000614 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <DMA_GetFlagStatus+0x50>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4013      	ands	r3, r2
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800061e:	2301      	movs	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e001      	b.n	8000628 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40020400 	.word	0x40020400
 800063c:	40020000 	.word	0x40020000

08000640 <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000652:	4a06      	ldr	r2, [pc, #24]	; (800066c <DMA_ClearFlag+0x2c>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000658:	e002      	b.n	8000660 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <DMA_ClearFlag+0x30>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6053      	str	r3, [r2, #4]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40020400 	.word	0x40020400
 8000670:	40020000 	.word	0x40020000

08000674 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000674:	b480      	push	{r7}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e07e      	b.n	8000792 <GPIO_Init+0x11e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000694:	2201      	movs	r2, #1
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	4013      	ands	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d16d      	bne.n	800078c <GPIO_Init+0x118>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d003      	beq.n	80006c0 <GPIO_Init+0x4c>
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d134      	bne.n	800072a <GPIO_Init+0xb6>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	2103      	movs	r1, #3
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	401a      	ands	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	4619      	mov	r1, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	431a      	orrs	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	889b      	ldrh	r3, [r3, #4]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	2301      	movs	r3, #1
 80006fc:	408b      	lsls	r3, r1
 80006fe:	b29b      	uxth	r3, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	b29b      	uxth	r3, r3
 8000704:	4013      	ands	r3, r2
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	b29a      	uxth	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	799b      	ldrb	r3, [r3, #6]
 8000716:	4619      	mov	r1, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	b29b      	uxth	r3, r3
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	b29b      	uxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	401a      	ands	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	601a      	str	r2, [r3, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	b29b      	uxth	r3, r3
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	2203      	movs	r2, #3
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	68ba      	ldr	r2, [r7, #8]
 800076e:	4013      	ands	r3, r2
 8000770:	60bb      	str	r3, [r7, #8]
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	79db      	ldrb	r3, [r3, #7]
 8000776:	461a      	mov	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4313      	orrs	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
      GPIOx->PUPDR = tmpreg;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	f67f af7d 	bls.w	8000694 <GPIO_Init+0x20>
    }
  }
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	807b      	strh	r3, [r7, #2]
 80007b2:	4613      	mov	r3, r2
 80007b4:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80007be:	787a      	ldrb	r2, [r7, #1]
 80007c0:	887b      	ldrh	r3, [r7, #2]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80007ce:	887b      	ldrh	r3, [r7, #2]
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	887b      	ldrh	r3, [r7, #2]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b29b      	uxth	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3208      	adds	r2, #8
 80007e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	210f      	movs	r1, #15
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	ea02 0103 	and.w	r1, r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f100 0208 	add.w	r2, r0, #8
 8000800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b29b      	uxth	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3208      	adds	r2, #8
 8000810:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4313      	orrs	r3, r2
 8000818:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	b29b      	uxth	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3208      	adds	r2, #8
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <NVIC_PriorityGroupConfig+0x24>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60d3      	str	r3, [r2, #12]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000860:	b480      	push	{r7}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	230f      	movs	r3, #15
 8000872:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	78db      	ldrb	r3, [r3, #3]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d03a      	beq.n	80008f2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <NVIC_Init+0xc0>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	43db      	mvns	r3, r3
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f1c3 0304 	rsb	r3, r3, #4
 8000890:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa22 f303 	lsr.w	r3, r2, r3
 800089a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	461a      	mov	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4013      	ands	r3, r2
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <NVIC_Init+0xc4>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	6979      	ldr	r1, [r7, #20]
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	4413      	add	r3, r2
 80008cc:	460a      	mov	r2, r1
 80008ce:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <NVIC_Init+0xc4>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	095b      	lsrs	r3, r3, #5
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	f003 031f 	and.w	r3, r3, #31
 80008e6:	2101      	movs	r1, #1
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80008f0:	e00f      	b.n	8000912 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008f2:	490c      	ldr	r1, [pc, #48]	; (8000924 <NVIC_Init+0xc4>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f003 031f 	and.w	r3, r3, #31
 8000906:	2201      	movs	r2, #1
 8000908:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800090a:	f100 0320 	add.w	r3, r0, #32
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000912:	bf00      	nop
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	e000e100 	.word	0xe000e100

08000928 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000928:	b480      	push	{r7}
 800092a:	b08b      	sub	sp, #44	; 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000950:	4b8d      	ldr	r3, [pc, #564]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 030c 	and.w	r3, r3, #12
 8000958:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d007      	beq.n	8000970 <RCC_GetClocksFreq+0x48>
 8000960:	2b08      	cmp	r3, #8
 8000962:	d009      	beq.n	8000978 <RCC_GetClocksFreq+0x50>
 8000964:	2b00      	cmp	r3, #0
 8000966:	d130      	bne.n	80009ca <RCC_GetClocksFreq+0xa2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a88      	ldr	r2, [pc, #544]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 800096c:	601a      	str	r2, [r3, #0]
      break;
 800096e:	e030      	b.n	80009d2 <RCC_GetClocksFreq+0xaa>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a86      	ldr	r2, [pc, #536]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 8000974:	601a      	str	r2, [r3, #0]
      break;
 8000976:	e02c      	b.n	80009d2 <RCC_GetClocksFreq+0xaa>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000978:	4b83      	ldr	r3, [pc, #524]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000980:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000982:	4b81      	ldr	r3, [pc, #516]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800098a:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	0c9b      	lsrs	r3, r3, #18
 8000990:	3302      	adds	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d105      	bne.n	80009a6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	4a7c      	ldr	r2, [pc, #496]	; (8000b90 <RCC_GetClocksFreq+0x268>)
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
 80009a4:	e00d      	b.n	80009c2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80009a6:	4b78      	ldr	r3, [pc, #480]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80009b2:	4a76      	ldr	r2, [pc, #472]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c6:	601a      	str	r2, [r3, #0]
      break;
 80009c8:	e003      	b.n	80009d2 <RCC_GetClocksFreq+0xaa>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a6f      	ldr	r2, [pc, #444]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 80009ce:	601a      	str	r2, [r3, #0]
      break;
 80009d0:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009d2:	4b6d      	ldr	r3, [pc, #436]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009da:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	091b      	lsrs	r3, r3, #4
 80009e0:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80009e2:	4a6c      	ldr	r2, [pc, #432]	; (8000b94 <RCC_GetClocksFreq+0x26c>)
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	40da      	lsrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009fa:	4b63      	ldr	r3, [pc, #396]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a02:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000a0a:	4a62      	ldr	r2, [pc, #392]	; (8000b94 <RCC_GetClocksFreq+0x26c>)
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	40da      	lsrs	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a22:	4b59      	ldr	r3, [pc, #356]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000a2a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	0adb      	lsrs	r3, r3, #11
 8000a30:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000a32:	4a58      	ldr	r2, [pc, #352]	; (8000b94 <RCC_GetClocksFreq+0x26c>)
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	40da      	lsrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000a4a:	4b4f      	ldr	r3, [pc, #316]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000a52:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	091b      	lsrs	r3, r3, #4
 8000a58:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp & 0x0F];
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <RCC_GetClocksFreq+0x270>)
 8000a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	613b      	str	r3, [r7, #16]
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <RCC_GetClocksFreq+0x160>
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <RCC_GetClocksFreq+0x160>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	e003      	b.n	8000a90 <RCC_GetClocksFreq+0x168>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000a90:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a94:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000a98:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	0a5b      	lsrs	r3, r3, #9
 8000a9e:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp & 0x0F];
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	4a3c      	ldr	r2, [pc, #240]	; (8000b98 <RCC_GetClocksFreq+0x270>)
 8000aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	613b      	str	r3, [r7, #16]
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d009      	beq.n	8000ace <RCC_GetClocksFreq+0x1a6>
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <RCC_GetClocksFreq+0x1a6>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	e003      	b.n	8000ad6 <RCC_GetClocksFreq+0x1ae>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	2b10      	cmp	r3, #16
 8000ae0:	d003      	beq.n	8000aea <RCC_GetClocksFreq+0x1c2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	e003      	b.n	8000af2 <RCC_GetClocksFreq+0x1ca>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	2b20      	cmp	r3, #32
 8000afc:	d003      	beq.n	8000b06 <RCC_GetClocksFreq+0x1de>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 8000b02:	61da      	str	r2, [r3, #28]
 8000b04:	e003      	b.n	8000b0e <RCC_GetClocksFreq+0x1e6>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b16:	2b40      	cmp	r3, #64	; 0x40
 8000b18:	d003      	beq.n	8000b22 <RCC_GetClocksFreq+0x1fa>
  {
    /* I2C3 Clock is HSI Osc. */
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <RCC_GetClocksFreq+0x264>)
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	e003      	b.n	8000b2a <RCC_GetClocksFreq+0x202>
  }
  else
  {
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	621a      	str	r2, [r3, #32]
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b36:	d10d      	bne.n	8000b54 <RCC_GetClocksFreq+0x22c>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d108      	bne.n	8000b54 <RCC_GetClocksFreq+0x22c>
  && (apb2presc == ahbpresc)) 
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d104      	bne.n	8000b54 <RCC_GetClocksFreq+0x22c>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	005a      	lsls	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
 8000b52:	e003      	b.n	8000b5c <RCC_GetClocksFreq+0x234>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <RCC_GetClocksFreq+0x260>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b68:	d118      	bne.n	8000b9c <RCC_GetClocksFreq+0x274>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d113      	bne.n	8000b9c <RCC_GetClocksFreq+0x274>
  && (apb2presc == ahbpresc)) 
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d10f      	bne.n	8000b9c <RCC_GetClocksFreq+0x274>
  {
    /* HRTIM1 Clock is 2 * pllclk */
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	005a      	lsls	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
 8000b84:	e00e      	b.n	8000ba4 <RCC_GetClocksFreq+0x27c>
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	007a1200 	.word	0x007a1200
 8000b90:	003d0900 	.word	0x003d0900
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000010 	.word	0x20000010
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000ba4:	4b91      	ldr	r3, [pc, #580]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb0:	d10d      	bne.n	8000bce <RCC_GetClocksFreq+0x2a6>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d108      	bne.n	8000bce <RCC_GetClocksFreq+0x2a6>
  && (apb2presc == ahbpresc))
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d104      	bne.n	8000bce <RCC_GetClocksFreq+0x2a6>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	005a      	lsls	r2, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bcc:	e003      	b.n	8000bd6 <RCC_GetClocksFreq+0x2ae>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000bd6:	4b85      	ldr	r3, [pc, #532]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be2:	d10d      	bne.n	8000c00 <RCC_GetClocksFreq+0x2d8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d108      	bne.n	8000c00 <RCC_GetClocksFreq+0x2d8>
  && (apb2presc == ahbpresc))
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d104      	bne.n	8000c00 <RCC_GetClocksFreq+0x2d8>
  {
    /* TIM15 Clock is 2 * pllclk */
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	005a      	lsls	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bfe:	e003      	b.n	8000c08 <RCC_GetClocksFreq+0x2e0>
  }
  else
  {
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c08:	4b78      	ldr	r3, [pc, #480]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c14:	d10d      	bne.n	8000c32 <RCC_GetClocksFreq+0x30a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d108      	bne.n	8000c32 <RCC_GetClocksFreq+0x30a>
  && (apb2presc == ahbpresc))
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d104      	bne.n	8000c32 <RCC_GetClocksFreq+0x30a>
  {
    /* TIM16 Clock is 2 * pllclk */
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	005a      	lsls	r2, r3, #1
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	651a      	str	r2, [r3, #80]	; 0x50
 8000c30:	e003      	b.n	8000c3a <RCC_GetClocksFreq+0x312>
  }
  else
  {
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	651a      	str	r2, [r3, #80]	; 0x50
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c3a:	4b6c      	ldr	r3, [pc, #432]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c46:	d10d      	bne.n	8000c64 <RCC_GetClocksFreq+0x33c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d108      	bne.n	8000c64 <RCC_GetClocksFreq+0x33c>
  && (apb2presc == ahbpresc))
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d104      	bne.n	8000c64 <RCC_GetClocksFreq+0x33c>
  {
    /* TIM17 Clock is 2 * pllclk */
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	005a      	lsls	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	655a      	str	r2, [r3, #84]	; 0x54
 8000c62:	e003      	b.n	8000c6c <RCC_GetClocksFreq+0x344>
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c6c:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c78:	d10d      	bne.n	8000c96 <RCC_GetClocksFreq+0x36e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d108      	bne.n	8000c96 <RCC_GetClocksFreq+0x36e>
  && (apb2presc == ahbpresc))
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d104      	bne.n	8000c96 <RCC_GetClocksFreq+0x36e>
  {
    /* TIM20 Clock is 2 * pllclk */
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	005a      	lsls	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	659a      	str	r2, [r3, #88]	; 0x58
 8000c94:	e003      	b.n	8000c9e <RCC_GetClocksFreq+0x376>
  }
  else
  {
    /* TIM20 Clock is APB2 clock. */
    RCC_Clocks->TIM20CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	659a      	str	r2, [r3, #88]	; 0x58
  }
    
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000c9e:	4b53      	ldr	r3, [pc, #332]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d104      	bne.n	8000cb4 <RCC_GetClocksFreq+0x38c>
  {
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F301x8) || defined(STM32F302x8)
    /* USART1 Clock is PCLK1 instead of PCLK2 (limitation described in the 
       STM32F302/01/34 x4/x6/x8 respective erratasheets) */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cb2:	e01e      	b.n	8000cf2 <RCC_GetClocksFreq+0x3ca>
#else
    /* USART Clock is PCLK2 */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d104      	bne.n	8000cca <RCC_GetClocksFreq+0x3a2>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc8:	e013      	b.n	8000cf2 <RCC_GetClocksFreq+0x3ca>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d104      	bne.n	8000ce0 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cde:	e008      	b.n	8000cf2 <RCC_GetClocksFreq+0x3ca>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d102      	bne.n	8000cf2 <RCC_GetClocksFreq+0x3ca>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a40      	ldr	r2, [pc, #256]	; (8000df0 <RCC_GetClocksFreq+0x4c8>)
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d104      	bne.n	8000d08 <RCC_GetClocksFreq+0x3e0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d06:	e021      	b.n	8000d4c <RCC_GetClocksFreq+0x424>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d14:	d104      	bne.n	8000d20 <RCC_GetClocksFreq+0x3f8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d1e:	e015      	b.n	8000d4c <RCC_GetClocksFreq+0x424>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d2c:	d104      	bne.n	8000d38 <RCC_GetClocksFreq+0x410>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d34:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d36:	e009      	b.n	8000d4c <RCC_GetClocksFreq+0x424>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d44:	d102      	bne.n	8000d4c <RCC_GetClocksFreq+0x424>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <RCC_GetClocksFreq+0x4c8>)
 8000d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d104      	bne.n	8000d62 <RCC_GetClocksFreq+0x43a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d60:	e021      	b.n	8000da6 <RCC_GetClocksFreq+0x47e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000d6e:	d104      	bne.n	8000d7a <RCC_GetClocksFreq+0x452>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
 8000d78:	e015      	b.n	8000da6 <RCC_GetClocksFreq+0x47e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000d86:	d104      	bne.n	8000d92 <RCC_GetClocksFreq+0x46a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d90:	e009      	b.n	8000da6 <RCC_GetClocksFreq+0x47e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000d9e:	d102      	bne.n	8000da6 <RCC_GetClocksFreq+0x47e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <RCC_GetClocksFreq+0x4c8>)
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <RCC_GetClocksFreq+0x494>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	645a      	str	r2, [r3, #68]	; 0x44
 8000dba:	e025      	b.n	8000e08 <RCC_GetClocksFreq+0x4e0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000dc8:	d104      	bne.n	8000dd4 <RCC_GetClocksFreq+0x4ac>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8000dd2:	e019      	b.n	8000e08 <RCC_GetClocksFreq+0x4e0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <RCC_GetClocksFreq+0x4c4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000de0:	d108      	bne.n	8000df4 <RCC_GetClocksFreq+0x4cc>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
 8000dea:	e00d      	b.n	8000e08 <RCC_GetClocksFreq+0x4e0>
 8000dec:	40021000 	.word	0x40021000
 8000df0:	007a1200 	.word	0x007a1200
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <RCC_GetClocksFreq+0x548>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e00:	d102      	bne.n	8000e08 <RCC_GetClocksFreq+0x4e0>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <RCC_GetClocksFreq+0x54c>)
 8000e06:	645a      	str	r2, [r3, #68]	; 0x44
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <RCC_GetClocksFreq+0x548>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d104      	bne.n	8000e1e <RCC_GetClocksFreq+0x4f6>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	649a      	str	r2, [r3, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000e1c:	e021      	b.n	8000e62 <RCC_GetClocksFreq+0x53a>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <RCC_GetClocksFreq+0x548>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e2a:	d104      	bne.n	8000e36 <RCC_GetClocksFreq+0x50e>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000e34:	e015      	b.n	8000e62 <RCC_GetClocksFreq+0x53a>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <RCC_GetClocksFreq+0x548>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e42:	d104      	bne.n	8000e4e <RCC_GetClocksFreq+0x526>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e4a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000e4c:	e009      	b.n	8000e62 <RCC_GetClocksFreq+0x53a>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <RCC_GetClocksFreq+0x548>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000e5a:	d102      	bne.n	8000e62 <RCC_GetClocksFreq+0x53a>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <RCC_GetClocksFreq+0x54c>)
 8000e60:	649a      	str	r2, [r3, #72]	; 0x48
}
 8000e62:	bf00      	nop
 8000e64:	372c      	adds	r7, #44	; 0x2c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	007a1200 	.word	0x007a1200

08000e78 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000e8a:	490a      	ldr	r1, [pc, #40]	; (8000eb4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000e96:	e006      	b.n	8000ea6 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <RCC_AHBPeriphClockCmd+0x3c>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	614b      	str	r3, [r1, #20]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000eca:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000ed6:	e006      	b.n	8000ee6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <RCC_APB2PeriphClockCmd+0x3c>)
 8000edc:	699a      	ldr	r2, [r3, #24]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	618b      	str	r3, [r1, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f0a:	490a      	ldr	r1, [pc, #40]	; (8000f34 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f0e:	69da      	ldr	r2, [r3, #28]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f16:	e006      	b.n	8000f26 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f1c:	69da      	ldr	r2, [r3, #28]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4013      	ands	r3, r2
 8000f24:	61cb      	str	r3, [r1, #28]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f4a:	490a      	ldr	r1, [pc, #40]	; (8000f74 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000f56:	e006      	b.n	8000f66 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <RCC_APB2PeriphResetCmd+0x3c>)
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4013      	ands	r3, r2
 8000f64:	60cb      	str	r3, [r1, #12]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f8a:	490a      	ldr	r1, [pc, #40]	; (8000fb4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000f96:	e006      	b.n	8000fa6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	610b      	str	r3, [r1, #16]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	885b      	ldrh	r3, [r3, #2]
 8000fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fce:	d136      	bne.n	800103e <SPI_Init+0x86>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000fdc:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	885b      	ldrh	r3, [r3, #2]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	88d9      	ldrh	r1, [r3, #6]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	891b      	ldrh	r3, [r3, #8]
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	8958      	ldrh	r0, [r3, #10]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	899b      	ldrh	r3, [r3, #12]
 8000ffe:	4303      	orrs	r3, r0
 8001000:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	89db      	ldrh	r3, [r3, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8001006:	4303      	orrs	r3, r0
 8001008:	b29b      	uxth	r3, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 800100a:	430b      	orrs	r3, r1
 800100c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 800100e:	4313      	orrs	r3, r2
 8001010:	b29a      	uxth	r2, r3
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	4313      	orrs	r3, r2
 8001016:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	89fa      	ldrh	r2, [r7, #14]
 800101c:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	889b      	ldrh	r3, [r3, #4]
 8001022:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800102a:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	889a      	ldrh	r2, [r3, #4]
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	4313      	orrs	r3, r2
 8001034:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	89fa      	ldrh	r2, [r7, #14]
 800103a:	809a      	strh	r2, [r3, #4]
 800103c:	e035      	b.n	80010aa <SPI_Init+0xf2>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	889b      	ldrh	r3, [r3, #4]
 8001042:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800104a:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	889a      	ldrh	r2, [r3, #4]
 8001050:	89fb      	ldrh	r3, [r7, #14]
 8001052:	4313      	orrs	r3, r2
 8001054:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001068:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	885b      	ldrh	r3, [r3, #2]
 8001072:	4313      	orrs	r3, r2
 8001074:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	88d9      	ldrh	r1, [r3, #6]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	891b      	ldrh	r3, [r3, #8]
 800107e:	430b      	orrs	r3, r1
 8001080:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	8958      	ldrh	r0, [r3, #10]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	899b      	ldrh	r3, [r3, #12]
 800108a:	4303      	orrs	r3, r0
 800108c:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	89db      	ldrh	r3, [r3, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8001092:	4303      	orrs	r3, r0
 8001094:	b29b      	uxth	r3, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 8001096:	430b      	orrs	r3, r1
 8001098:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 800109a:	4313      	orrs	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	81fb      	strh	r3, [r7, #14]

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	89fa      	ldrh	r2, [r7, #14]
 80010a8:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8b9b      	ldrh	r3, [r3, #28]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	8a1a      	ldrh	r2, [r3, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	821a      	strh	r2, [r3, #16]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80010f0:	e007      	b.n	8001102 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	801a      	strh	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <SPI_I2S_SendData16>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	887a      	ldrh	r2, [r7, #2]
 800111e:	819a      	strh	r2, [r3, #12]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SPI_I2S_ReceiveData16>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2,  3 or 4 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{  
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  return SPIx->DR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	899b      	ldrh	r3, [r3, #12]
 8001138:	b29b      	uxth	r3, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	891b      	ldrh	r3, [r3, #8]
 800115a:	b29a      	uxth	r2, r3
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4013      	ands	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e001      	b.n	8001170 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16,17 or 20 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a4e      	ldr	r2, [pc, #312]	; (80012c4 <TIM_DeInit+0x144>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d10a      	bne.n	80011a6 <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001190:	2101      	movs	r1, #1
 8001192:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001196:	f7ff fecf 	bl	8000f38 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800119a:	2100      	movs	r1, #0
 800119c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011a0:	f7ff feca 	bl	8000f38 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 80011a4:	e08a      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM2) 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ac:	d108      	bne.n	80011c0 <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fee1 	bl	8000f78 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80011b6:	2100      	movs	r1, #0
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fedd 	bl	8000f78 <RCC_APB1PeriphResetCmd>
}
 80011be:	e07d      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <TIM_DeInit+0x148>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d108      	bne.n	80011da <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80011c8:	2101      	movs	r1, #1
 80011ca:	2002      	movs	r0, #2
 80011cc:	f7ff fed4 	bl	8000f78 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fed0 	bl	8000f78 <RCC_APB1PeriphResetCmd>
}
 80011d8:	e070      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM4)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <TIM_DeInit+0x14c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d108      	bne.n	80011f4 <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80011e2:	2101      	movs	r1, #1
 80011e4:	2004      	movs	r0, #4
 80011e6:	f7ff fec7 	bl	8000f78 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80011ea:	2100      	movs	r1, #0
 80011ec:	2004      	movs	r0, #4
 80011ee:	f7ff fec3 	bl	8000f78 <RCC_APB1PeriphResetCmd>
}
 80011f2:	e063      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM6)  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a36      	ldr	r2, [pc, #216]	; (80012d0 <TIM_DeInit+0x150>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d108      	bne.n	800120e <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80011fc:	2101      	movs	r1, #1
 80011fe:	2010      	movs	r0, #16
 8001200:	f7ff feba 	bl	8000f78 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001204:	2100      	movs	r1, #0
 8001206:	2010      	movs	r0, #16
 8001208:	f7ff feb6 	bl	8000f78 <RCC_APB1PeriphResetCmd>
}
 800120c:	e056      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM7)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <TIM_DeInit+0x154>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d108      	bne.n	8001228 <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001216:	2101      	movs	r1, #1
 8001218:	2020      	movs	r0, #32
 800121a:	f7ff fead 	bl	8000f78 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800121e:	2100      	movs	r1, #0
 8001220:	2020      	movs	r0, #32
 8001222:	f7ff fea9 	bl	8000f78 <RCC_APB1PeriphResetCmd>
}
 8001226:	e049      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM8)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <TIM_DeInit+0x158>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d10a      	bne.n	8001246 <TIM_DeInit+0xc6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001230:	2101      	movs	r1, #1
 8001232:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001236:	f7ff fe7f 	bl	8000f38 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800123a:	2100      	movs	r1, #0
 800123c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001240:	f7ff fe7a 	bl	8000f38 <RCC_APB2PeriphResetCmd>
}
 8001244:	e03a      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM15)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a24      	ldr	r2, [pc, #144]	; (80012dc <TIM_DeInit+0x15c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10a      	bne.n	8001264 <TIM_DeInit+0xe4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800124e:	2101      	movs	r1, #1
 8001250:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001254:	f7ff fe70 	bl	8000f38 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 8001258:	2100      	movs	r1, #0
 800125a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800125e:	f7ff fe6b 	bl	8000f38 <RCC_APB2PeriphResetCmd>
}
 8001262:	e02b      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM16) 
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <TIM_DeInit+0x160>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d10a      	bne.n	8001282 <TIM_DeInit+0x102>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 800126c:	2101      	movs	r1, #1
 800126e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001272:	f7ff fe61 	bl	8000f38 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8001276:	2100      	movs	r1, #0
 8001278:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800127c:	f7ff fe5c 	bl	8000f38 <RCC_APB2PeriphResetCmd>
}
 8001280:	e01c      	b.n	80012bc <TIM_DeInit+0x13c>
  else if (TIMx == TIM17) 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <TIM_DeInit+0x164>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10a      	bne.n	80012a0 <TIM_DeInit+0x120>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800128a:	2101      	movs	r1, #1
 800128c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001290:	f7ff fe52 	bl	8000f38 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8001294:	2100      	movs	r1, #0
 8001296:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800129a:	f7ff fe4d 	bl	8000f38 <RCC_APB2PeriphResetCmd>
}
 800129e:	e00d      	b.n	80012bc <TIM_DeInit+0x13c>
    if (TIMx == TIM20) 
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <TIM_DeInit+0x168>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d109      	bne.n	80012bc <TIM_DeInit+0x13c>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
 80012a8:	2101      	movs	r1, #1
 80012aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012ae:	f7ff fe43 	bl	8000f38 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
 80012b2:	2100      	movs	r1, #0
 80012b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012b8:	f7ff fe3e 	bl	8000f38 <RCC_APB2PeriphResetCmd>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40000800 	.word	0x40000800
 80012d0:	40001000 	.word	0x40001000
 80012d4:	40001400 	.word	0x40001400
 80012d8:	40013400 	.word	0x40013400
 80012dc:	40014000 	.word	0x40014000
 80012e0:	40014400 	.word	0x40014400
 80012e4:	40014800 	.word	0x40014800
 80012e8:	40015000 	.word	0x40015000

080012ec <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <TIM_TimeBaseInit+0xd8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <TIM_TimeBaseInit+0x44>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <TIM_TimeBaseInit+0xdc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00f      	beq.n	8001330 <TIM_TimeBaseInit+0x44>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001316:	d00b      	beq.n	8001330 <TIM_TimeBaseInit+0x44>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <TIM_TimeBaseInit+0xe0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM3) || (TIMx == TIM4) || (TIMx == TIM20)) 
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <TIM_TimeBaseInit+0xe4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d003      	beq.n	8001330 <TIM_TimeBaseInit+0x44>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <TIM_TimeBaseInit+0xe8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d108      	bne.n	8001342 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001336:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	885a      	ldrh	r2, [r3, #2]
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	4313      	orrs	r3, r2
 8001340:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <TIM_TimeBaseInit+0xec>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00c      	beq.n	8001364 <TIM_TimeBaseInit+0x78>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <TIM_TimeBaseInit+0xf0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d008      	beq.n	8001364 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001358:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	891a      	ldrh	r2, [r3, #8]
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	4313      	orrs	r3, r2
 8001362:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	89fa      	ldrh	r2, [r7, #14]
 8001368:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <TIM_TimeBaseInit+0xd8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <TIM_TimeBaseInit+0xbe>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <TIM_TimeBaseInit+0xdc>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00f      	beq.n	80013aa <TIM_TimeBaseInit+0xbe>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <TIM_TimeBaseInit+0xf4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00b      	beq.n	80013aa <TIM_TimeBaseInit+0xbe>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <TIM_TimeBaseInit+0xf8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <TIM_TimeBaseInit+0xbe>
      (TIMx == TIM16) || (TIMx == TIM17)|| (TIMx == TIM20))  
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <TIM_TimeBaseInit+0xfc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d003      	beq.n	80013aa <TIM_TimeBaseInit+0xbe>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <TIM_TimeBaseInit+0xe8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d103      	bne.n	80013b2 <TIM_TimeBaseInit+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	895a      	ldrh	r2, [r3, #10]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	615a      	str	r2, [r3, #20]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40012c00 	.word	0x40012c00
 80013c8:	40013400 	.word	0x40013400
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40000800 	.word	0x40000800
 80013d4:	40015000 	.word	0x40015000
 80013d8:	40001000 	.word	0x40001000
 80013dc:	40001400 	.word	0x40001400
 80013e0:	40014000 	.word	0x40014000
 80013e4:	40014400 	.word	0x40014400
 80013e8:	40014800 	.word	0x40014800

080013ec <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001446:	e007      	b.n	8001458 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	801a      	strh	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001486:	e007      	b.n	8001498 <TIM_ITConfig+0x34>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	43d2      	mvns	r2, r2
 8001490:	b292      	uxth	r2, r2
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	817b      	strh	r3, [r7, #10]
 80014da:	460b      	mov	r3, r1
 80014dc:	813b      	strh	r3, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	f023 0307 	bic.w	r3, r3, #7
 8001506:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001508:	8afa      	ldrh	r2, [r7, #22]
 800150a:	897b      	ldrh	r3, [r7, #10]
 800150c:	4313      	orrs	r3, r2
 800150e:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8001510:	8abb      	ldrh	r3, [r7, #20]
 8001512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800151c:	8abb      	ldrh	r3, [r7, #20]
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8001528:	8a7b      	ldrh	r3, [r7, #18]
 800152a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800152e:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	b29a      	uxth	r2, r3
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	4313      	orrs	r3, r2
 800153a:	b29a      	uxth	r2, r3
 800153c:	8a7b      	ldrh	r3, [r7, #18]
 800153e:	4313      	orrs	r3, r2
 8001540:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001542:	8afa      	ldrh	r2, [r7, #22]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001548:	8aba      	ldrh	r2, [r7, #20]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800154e:	8a7a      	ldrh	r2, [r7, #18]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	621a      	str	r2, [r3, #32]
}
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09c      	sub	sp, #112	; 0x70
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800156e:	2300      	movs	r3, #0
 8001570:	66bb      	str	r3, [r7, #104]	; 0x68
 8001572:	2300      	movs	r3, #0
 8001574:	667b      	str	r3, [r7, #100]	; 0x64
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0201 	bic.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	667b      	str	r3, [r7, #100]	; 0x64
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800158a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001596:	4313      	orrs	r3, r2
 8001598:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800159e:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	667b      	str	r3, [r7, #100]	; 0x64
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80015a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015a8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015ac:	f023 030c 	bic.w	r3, r3, #12
 80015b0:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015c0:	4313      	orrs	r3, r2
 80015c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015c4:	4313      	orrs	r3, r2
 80015c6:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015cc:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	667b      	str	r3, [r7, #100]	; 0x64
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80015d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015da:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015e2:	4313      	orrs	r3, r2
 80015e4:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015ea:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f999 	bl	8000928 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <USART_Init+0x168>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d102      	bne.n	8001604 <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80015fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001600:	66bb      	str	r3, [r7, #104]	; 0x68
 8001602:	e016      	b.n	8001632 <USART_Init+0xd2>
  }
  else if (USARTx == USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <USART_Init+0x16c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d102      	bne.n	8001612 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800160c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001610:	e00f      	b.n	8001632 <USART_Init+0xd2>
  }
  else if (USARTx == USART3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a2e      	ldr	r2, [pc, #184]	; (80016d0 <USART_Init+0x170>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d102      	bne.n	8001620 <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 800161a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800161c:	66bb      	str	r3, [r7, #104]	; 0x68
 800161e:	e008      	b.n	8001632 <USART_Init+0xd2>
  }
  else if (USARTx == UART4)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <USART_Init+0x174>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d102      	bne.n	800162e <USART_Init+0xce>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 8001628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162a:	66bb      	str	r3, [r7, #104]	; 0x68
 800162c:	e001      	b.n	8001632 <USART_Init+0xd2>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 800162e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001630:	66bb      	str	r3, [r7, #104]	; 0x68
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d011      	beq.n	8001662 <USART_Init+0x102>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800163e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 800164c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	fbb3 f1f2 	udiv	r1, r3, r2
 8001658:	fb02 f201 	mul.w	r2, r2, r1
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	667b      	str	r3, [r7, #100]	; 0x64
 8001660:	e00e      	b.n	8001680 <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001674:	fbb3 f1f2 	udiv	r1, r3, r2
 8001678:	fb02 f201 	mul.w	r2, r2, r1
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	667b      	str	r3, [r7, #100]	; 0x64
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	085a      	lsrs	r2, r3, #1
 8001686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001688:	429a      	cmp	r2, r3
 800168a:	d802      	bhi.n	8001692 <USART_Init+0x132>
  {
    divider++;
 800168c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800168e:	3301      	adds	r3, #1
 8001690:	66fb      	str	r3, [r7, #108]	; 0x6c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <USART_Init+0x156>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800169e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80016a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016aa:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80016ae:	4013      	ands	r3, r2
 80016b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016b2:	4313      	orrs	r3, r2
 80016b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 80016b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	819a      	strh	r2, [r3, #12]
}
 80016be:	bf00      	nop
 80016c0:	3770      	adds	r7, #112	; 0x70
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40004800 	.word	0x40004800
 80016d4:	40004c00 	.word	0x40004c00

080016d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80016f6:	e005      	b.n	8001704 <USART_Cmd+0x2c>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 0201 	bic.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	4613      	mov	r3, r2
 8001740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	609a      	str	r2, [r3, #8]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
  }
}
 8001754:	e006      	b.n	8001764 <USART_DMACmd+0x30>
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	b29b      	uxth	r3, r3
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80017a2:	2201      	movs	r2, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d103      	bne.n	80017ba <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e005      	b.n	80017c6 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d102      	bne.n	80017c6 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	3308      	adds	r3, #8
 80017c4:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017d8:	e006      	b.n	80017e8 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	6811      	ldr	r1, [r2, #0]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	43d2      	mvns	r2, r2
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3724      	adds	r7, #36	; 0x24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e001      	b.n	8001818 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <USB_LP_CAN_RX0_IRQHandler>:
}



void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  CAN_Receive(CAN1, CAN_FIFO0, &canMessageBuffer.CanRxMsgBuffer[canMessageBuffer.head]);
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <USB_LP_CAN_RX0_IRQHandler+0x48>)
 800182e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <USB_LP_CAN_RX0_IRQHandler+0x48>)
 800183c:	4413      	add	r3, r2
 800183e:	461a      	mov	r2, r3
 8001840:	2100      	movs	r1, #0
 8001842:	480c      	ldr	r0, [pc, #48]	; (8001874 <USB_LP_CAN_RX0_IRQHandler+0x4c>)
 8001844:	f7fe fcc0 	bl	80001c8 <CAN_Receive>

  canMessageBuffer.head = (canMessageBuffer.head + 1) % CAN_BUFFER_SIZE;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <USB_LP_CAN_RX0_IRQHandler+0x48>)
 800184a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <USB_LP_CAN_RX0_IRQHandler+0x50>)
 8001852:	fb83 2301 	smull	r2, r3, r3, r1
 8001856:	109a      	asrs	r2, r3, #2
 8001858:	17cb      	asrs	r3, r1, #31
 800185a:	1ad2      	subs	r2, r2, r3
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	1aca      	subs	r2, r1, r3
 8001866:	4b02      	ldr	r3, [pc, #8]	; (8001870 <USB_LP_CAN_RX0_IRQHandler+0x48>)
 8001868:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000078 	.word	0x20000078
 8001874:	40006400 	.word	0x40006400
 8001878:	66666667 	.word	0x66666667

0800187c <gpioConfiguration>:
#include <stdio.h>



void gpioConfiguration(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	digitalInit(GPIOA, GPIO_Pin_4,  OUTPUT, &PWR_CTRL);
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <gpioConfiguration+0xe4>)
 8001882:	2200      	movs	r2, #0
 8001884:	2110      	movs	r1, #16
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f000 f889 	bl	80019a0 <digitalInit>
	digitalLo(PWR_CTRL);
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <gpioConfiguration+0xe4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a33      	ldr	r2, [pc, #204]	; (8001960 <gpioConfiguration+0xe4>)
 8001894:	8892      	ldrh	r2, [r2, #4]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28

	digitalInit(GPIOA, GPIO_Pin_8,  OUTPUT, &POT1_SYNC);
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <gpioConfiguration+0xe8>)
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f000 f87c 	bl	80019a0 <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_9,  OUTPUT, &POT2_SYNC);
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <gpioConfiguration+0xec>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f000 f874 	bl	80019a0 <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_10,  OUTPUT, &POT3_SYNC);
 80018b8:	4b2c      	ldr	r3, [pc, #176]	; (800196c <gpioConfiguration+0xf0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f000 f86c 	bl	80019a0 <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_11,  OUTPUT, &POT4_SYNC);
 80018c8:	4b29      	ldr	r3, [pc, #164]	; (8001970 <gpioConfiguration+0xf4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f000 f864 	bl	80019a0 <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_12,  OUTPUT, &POT5_SYNC);
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <gpioConfiguration+0xf8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f000 f85c 	bl	80019a0 <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_0,  OUTPUT, &POT6_SYNC);
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <gpioConfiguration+0xfc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	2101      	movs	r1, #1
 80018ee:	4823      	ldr	r0, [pc, #140]	; (800197c <gpioConfiguration+0x100>)
 80018f0:	f000 f856 	bl	80019a0 <digitalInit>

	digitalInit(GPIOB, GPIO_Pin_1,  INPUT, &POT1_RDY);
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <gpioConfiguration+0x104>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	2102      	movs	r1, #2
 80018fa:	4820      	ldr	r0, [pc, #128]	; (800197c <gpioConfiguration+0x100>)
 80018fc:	f000 f850 	bl	80019a0 <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_2,  INPUT, &POT2_RDY);
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <gpioConfiguration+0x108>)
 8001902:	2201      	movs	r2, #1
 8001904:	2104      	movs	r1, #4
 8001906:	481d      	ldr	r0, [pc, #116]	; (800197c <gpioConfiguration+0x100>)
 8001908:	f000 f84a 	bl	80019a0 <digitalInit>
	digitalInit(GPIOC, GPIO_Pin_13,  INPUT, &POT3_RDY);
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <gpioConfiguration+0x10c>)
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001914:	481d      	ldr	r0, [pc, #116]	; (800198c <gpioConfiguration+0x110>)
 8001916:	f000 f843 	bl	80019a0 <digitalInit>

	digitalInit(GPIOC, GPIO_Pin_14,  OUTPUT, &POT4_INDEP);
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <gpioConfiguration+0x114>)
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <gpioConfiguration+0x110>)
 8001924:	f000 f83c 	bl	80019a0 <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_10,  OUTPUT, &POT5_INDEP);
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <gpioConfiguration+0x118>)
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001930:	4812      	ldr	r0, [pc, #72]	; (800197c <gpioConfiguration+0x100>)
 8001932:	f000 f835 	bl	80019a0 <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_11,  OUTPUT, &POT6_INDEP);
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <gpioConfiguration+0x11c>)
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193e:	480f      	ldr	r0, [pc, #60]	; (800197c <gpioConfiguration+0x100>)
 8001940:	f000 f82e 	bl	80019a0 <digitalInit>

	digitalInit(GPIOB, GPIO_Pin_12,  OUTPUT, &SPI2_RESET);
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <gpioConfiguration+0x120>)
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <gpioConfiguration+0x100>)
 800194e:	f000 f827 	bl	80019a0 <digitalInit>

	digitalLo(PWR_CTRL);
 8001952:	4b03      	ldr	r3, [pc, #12]	; (8001960 <gpioConfiguration+0xe4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a02      	ldr	r2, [pc, #8]	; (8001960 <gpioConfiguration+0xe4>)
 8001958:	8892      	ldrh	r2, [r2, #4]
 800195a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000017c 	.word	0x2000017c
 8001964:	200001c0 	.word	0x200001c0
 8001968:	200001d0 	.word	0x200001d0
 800196c:	200001c8 	.word	0x200001c8
 8001970:	20000164 	.word	0x20000164
 8001974:	200001d8 	.word	0x200001d8
 8001978:	20000184 	.word	0x20000184
 800197c:	48000400 	.word	0x48000400
 8001980:	2000019c 	.word	0x2000019c
 8001984:	2000016c 	.word	0x2000016c
 8001988:	200001a4 	.word	0x200001a4
 800198c:	48000800 	.word	0x48000800
 8001990:	20000194 	.word	0x20000194
 8001994:	2000018c 	.word	0x2000018c
 8001998:	20000174 	.word	0x20000174
 800199c:	200001b8 	.word	0x200001b8

080019a0 <digitalInit>:

void digitalInit(GPIO_TypeDef* port, const uint16_t pin, int IO, digitalPin *p)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	460b      	mov	r3, r1
 80019ae:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = pin;
 80019b0:	897b      	ldrh	r3, [r7, #10]
 80019b2:	613b      	str	r3, [r7, #16]

	if(IO == OUTPUT)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d107      	bne.n	80019ca <digitalInit+0x2a>
	{
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80019ba:	2301      	movs	r3, #1
 80019bc:	753b      	strb	r3, [r7, #20]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019be:	2303      	movs	r3, #3
 80019c0:	757b      	strb	r3, [r7, #21]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75bb      	strb	r3, [r7, #22]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
	}

	if(IO == INPUT)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <digitalInit+0x40>
	{
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80019d0:	2300      	movs	r3, #0
 80019d2:	753b      	strb	r3, [r7, #20]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019d4:	2303      	movs	r3, #3
 80019d6:	757b      	strb	r3, [r7, #21]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019d8:	2300      	movs	r3, #0
 80019da:	75bb      	strb	r3, [r7, #22]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	75fb      	strb	r3, [r7, #23]
	}

	if(IO == OPENDRAIN)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d107      	bne.n	80019f6 <digitalInit+0x56>
	{
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80019e6:	2301      	movs	r3, #1
 80019e8:	753b      	strb	r3, [r7, #20]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019ea:	2303      	movs	r3, #3
 80019ec:	757b      	strb	r3, [r7, #21]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80019ee:	2301      	movs	r3, #1
 80019f0:	75bb      	strb	r3, [r7, #22]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]
	}

	GPIO_Init(port, &GPIO_InitStructure); //port actually is gpioB.
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7fe fe39 	bl	8000674 <GPIO_Init>

	//p = (digitalPin *)calloc(1, sizeof(digitalPin)); //Allocate a block of memory of 1xsize of digital pin , intiliaze all its bits to zero.
	p->port = port; //just pass the address of the port to user defined port.
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	601a      	str	r2, [r3, #0]
	p->pin = pin;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	897a      	ldrh	r2, [r7, #10]
 8001a0c:	809a      	strh	r2, [r3, #4]

	//return p;
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HMICommInit>:
#include "HMIComm.h"
#include <string.h>

void HMICommInit(){
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
	USART2_Config();
 8001a1a:	f000 fc35 	bl	8002288 <USART2_Config>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HMIReceived>:

void HMIReceived(HMICommObj *obj){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	serialPort_t *tempSerial = &serialPort2;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HMIReceived+0x38>)
 8001a2e:	60fb      	str	r3, [r7, #12]
	memcpy(obj->serialIO->rxBuf, tempSerial->rxBuf, sizeof(char)/sizeof(*tempSerial->rxBuf));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
	serialWrite(tempSerial, obj->serialIO->rxBuf[0]);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fd55 	bl	80024fc <serialWrite>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001fc 	.word	0x200001fc

08001a60 <InitServerLifter>:
#include "ServerLifter.h"
#include <string.h>

void InitServerLifter(ServerLifter *server){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	memset(server, 0, sizeof(ServerLifter)/sizeof(*server));
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 f869 	bl	8002b44 <memset>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <Init>:

void Init(){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001a80:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001a84:	f7fe fed8 	bl	8000838 <NVIC_PriorityGroupConfig>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a8e:	f7ff f9f3 	bl	8000e78 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001a92:	2101      	movs	r1, #1
 8001a94:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a98:	f7ff f9ee 	bl	8000e78 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001aa2:	f7ff f9e9 	bl	8000e78 <RCC_AHBPeriphClockCmd>

	SystemCoreClockUpdate();
 8001aa6:	f000 ff0f 	bl	80028c8 <SystemCoreClockUpdate>

	gpioConfiguration();
 8001aaa:	f7ff fee7 	bl	800187c <gpioConfiguration>

	SPI_Config();
 8001aae:	f000 fdb5 	bl	800261c <SPI_Config>

	timerInit();
 8001ab2:	f000 ffe7 	bl	8002a84 <timerInit>

	digiPot_init();
 8001ab6:	f000 f817 	bl	8001ae8 <digiPot_init>

	encoderInit();
 8001aba:	f000 fb8b 	bl	80021d4 <encoderInit>

	controlInit();
 8001abe:	f000 faeb 	bl	8002098 <controlInit>

	InitServerLifter(&serverLifter);
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <Init+0x54>)
 8001ac4:	f7ff ffcc 	bl	8001a60 <InitServerLifter>

	HMICommInit();
 8001ac8:	f7ff ffa5 	bl	8001a16 <HMICommInit>
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000150 	.word	0x20000150

08001ad4 <UpdateMainRoutine>:

void UpdateMainRoutine(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	while(1){
		HMIReceived(serverLifter.hmi);
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <UpdateMainRoutine+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ffa1 	bl	8001a24 <HMIReceived>
 8001ae2:	e7f9      	b.n	8001ad8 <UpdateMainRoutine+0x4>
 8001ae4:	20000150 	.word	0x20000150

08001ae8 <digiPot_init>:
	digiPot_write(TILLERPOT, digipotCmd.potVal5);
	digiPot_write(DIGIPOT6, digipotCmd.potVal6);
}

void digiPot_init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	digipotCmd.potVal1=512;
 8001aee:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <digiPot_init+0x250>)
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	801a      	strh	r2, [r3, #0]
	digipotCmd.potVal2=512;
 8001af6:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <digiPot_init+0x250>)
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	805a      	strh	r2, [r3, #2]
	digipotCmd.potVal3=512;
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <digiPot_init+0x250>)
 8001b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b04:	809a      	strh	r2, [r3, #4]
	digipotCmd.potVal4=124;
 8001b06:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <digiPot_init+0x250>)
 8001b08:	227c      	movs	r2, #124	; 0x7c
 8001b0a:	80da      	strh	r2, [r3, #6]
	digipotCmd.potVal5=42;
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <digiPot_init+0x250>)
 8001b0e:	222a      	movs	r2, #42	; 0x2a
 8001b10:	811a      	strh	r2, [r3, #8]
	digipotCmd.potVal6=32;
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <digiPot_init+0x250>)
 8001b14:	2220      	movs	r2, #32
 8001b16:	815a      	strh	r2, [r3, #10]

	//Un-select all the potentiometers
	digitalHi(POT1_SYNC);
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <digiPot_init+0x254>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a87      	ldr	r2, [pc, #540]	; (8001d3c <digiPot_init+0x254>)
 8001b1e:	8892      	ldrh	r2, [r2, #4]
 8001b20:	619a      	str	r2, [r3, #24]
	digitalHi(POT2_SYNC);
 8001b22:	4b87      	ldr	r3, [pc, #540]	; (8001d40 <digiPot_init+0x258>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a86      	ldr	r2, [pc, #536]	; (8001d40 <digiPot_init+0x258>)
 8001b28:	8892      	ldrh	r2, [r2, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
	digitalHi(POT3_SYNC);
 8001b2c:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <digiPot_init+0x25c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a84      	ldr	r2, [pc, #528]	; (8001d44 <digiPot_init+0x25c>)
 8001b32:	8892      	ldrh	r2, [r2, #4]
 8001b34:	619a      	str	r2, [r3, #24]
	digitalHi(POT4_SYNC);
 8001b36:	4b84      	ldr	r3, [pc, #528]	; (8001d48 <digiPot_init+0x260>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a83      	ldr	r2, [pc, #524]	; (8001d48 <digiPot_init+0x260>)
 8001b3c:	8892      	ldrh	r2, [r2, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
	digitalHi(POT5_SYNC);
 8001b40:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <digiPot_init+0x264>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a81      	ldr	r2, [pc, #516]	; (8001d4c <digiPot_init+0x264>)
 8001b46:	8892      	ldrh	r2, [r2, #4]
 8001b48:	619a      	str	r2, [r3, #24]
	digitalHi(POT6_SYNC);
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <digiPot_init+0x268>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a80      	ldr	r2, [pc, #512]	; (8001d50 <digiPot_init+0x268>)
 8001b50:	8892      	ldrh	r2, [r2, #4]
 8001b52:	619a      	str	r2, [r3, #24]

	//Set the mode of the potentiometers 4-6 to potentiometer mode
	digitalLo(POT4_INDEP);
 8001b54:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <digiPot_init+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <digiPot_init+0x26c>)
 8001b5a:	8892      	ldrh	r2, [r2, #4]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
	digitalLo(POT5_INDEP);
 8001b5e:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <digiPot_init+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7d      	ldr	r2, [pc, #500]	; (8001d58 <digiPot_init+0x270>)
 8001b64:	8892      	ldrh	r2, [r2, #4]
 8001b66:	851a      	strh	r2, [r3, #40]	; 0x28
	digitalLo(POT6_INDEP);
 8001b68:	4b7c      	ldr	r3, [pc, #496]	; (8001d5c <digiPot_init+0x274>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7b      	ldr	r2, [pc, #492]	; (8001d5c <digiPot_init+0x274>)
 8001b6e:	8892      	ldrh	r2, [r2, #4]
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28

	//Switch on the logic power of the potentiometers
	digitalHi(PWR_CTRL);
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <digiPot_init+0x278>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <digiPot_init+0x278>)
 8001b78:	8892      	ldrh	r2, [r2, #4]
 8001b7a:	619a      	str	r2, [r3, #24]

	int i=0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
	//Reset the potentiometers
	for(i=0; i<10000; i++);
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e002      	b.n	8001b8c <digiPot_init+0xa4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b92:	4293      	cmp	r3, r2
 8001b94:	ddf7      	ble.n	8001b86 <digiPot_init+0x9e>
	digitalLo(SPI2_RESET);
 8001b96:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <digiPot_init+0x27c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a72      	ldr	r2, [pc, #456]	; (8001d64 <digiPot_init+0x27c>)
 8001b9c:	8892      	ldrh	r2, [r2, #4]
 8001b9e:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	e002      	b.n	8001bac <digiPot_init+0xc4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	ddf7      	ble.n	8001ba6 <digiPot_init+0xbe>
	digitalHi(SPI2_RESET);
 8001bb6:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <digiPot_init+0x27c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6a      	ldr	r2, [pc, #424]	; (8001d64 <digiPot_init+0x27c>)
 8001bbc:	8892      	ldrh	r2, [r2, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	e002      	b.n	8001bcc <digiPot_init+0xe4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	ddf7      	ble.n	8001bc6 <digiPot_init+0xde>

	//Initialize potentiometer 1
	if(digitalGet(POT1_RDY)==0x01)
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <digiPot_init+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	8a1b      	ldrh	r3, [r3, #16]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <digiPot_init+0x280>)
 8001be0:	889b      	ldrh	r3, [r3, #4]
 8001be2:	4013      	ands	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d054      	beq.n	8001c94 <digiPot_init+0x1ac>
	{
		digitalLo(POT1_SYNC);
 8001bea:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <digiPot_init+0x254>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a53      	ldr	r2, [pc, #332]	; (8001d3c <digiPot_init+0x254>)
 8001bf0:	8892      	ldrh	r2, [r2, #4]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	e002      	b.n	8001c00 <digiPot_init+0x118>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c06:	4293      	cmp	r3, r2
 8001c08:	ddf7      	ble.n	8001bfa <digiPot_init+0x112>
		spi_rw_16(SPI2, 0x2000);  //Normal mode of operation
 8001c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c0e:	4857      	ldr	r0, [pc, #348]	; (8001d6c <digiPot_init+0x284>)
 8001c10:	f000 fdc2 	bl	8002798 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	e002      	b.n	8001c20 <digiPot_init+0x138>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c26:	4293      	cmp	r3, r2
 8001c28:	ddf7      	ble.n	8001c1a <digiPot_init+0x132>
		digitalHi(POT1_SYNC);
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <digiPot_init+0x254>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a43      	ldr	r2, [pc, #268]	; (8001d3c <digiPot_init+0x254>)
 8001c30:	8892      	ldrh	r2, [r2, #4]
 8001c32:	619a      	str	r2, [r3, #24]
		for(i=0; i<10000; i++);
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	e002      	b.n	8001c40 <digiPot_init+0x158>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c46:	4293      	cmp	r3, r2
 8001c48:	ddf7      	ble.n	8001c3a <digiPot_init+0x152>
		digitalLo(POT1_SYNC);
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <digiPot_init+0x254>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a3b      	ldr	r2, [pc, #236]	; (8001d3c <digiPot_init+0x254>)
 8001c50:	8892      	ldrh	r2, [r2, #4]
 8001c52:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	e002      	b.n	8001c60 <digiPot_init+0x178>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c66:	4293      	cmp	r3, r2
 8001c68:	ddf7      	ble.n	8001c5a <digiPot_init+0x172>
		spi_rw_16(SPI2, 0x1803); //Enable digital control
 8001c6a:	f641 0103 	movw	r1, #6147	; 0x1803
 8001c6e:	483f      	ldr	r0, [pc, #252]	; (8001d6c <digiPot_init+0x284>)
 8001c70:	f000 fd92 	bl	8002798 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	e002      	b.n	8001c80 <digiPot_init+0x198>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c86:	4293      	cmp	r3, r2
 8001c88:	ddf7      	ble.n	8001c7a <digiPot_init+0x192>
		digitalHi(POT1_SYNC);
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <digiPot_init+0x254>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <digiPot_init+0x254>)
 8001c90:	8892      	ldrh	r2, [r2, #4]
 8001c92:	619a      	str	r2, [r3, #24]
	}
	//Initialize potentiometer 2
	if(digitalGet(POT2_RDY)==0x01)
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <digiPot_init+0x288>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	8a1b      	ldrh	r3, [r3, #16]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <digiPot_init+0x288>)
 8001c9e:	889b      	ldrh	r3, [r3, #4]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d072      	beq.n	8001d8e <digiPot_init+0x2a6>
	{
		digitalLo(POT2_SYNC);
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <digiPot_init+0x258>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <digiPot_init+0x258>)
 8001cae:	8892      	ldrh	r2, [r2, #4]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e002      	b.n	8001cbe <digiPot_init+0x1d6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	ddf7      	ble.n	8001cb8 <digiPot_init+0x1d0>
		spi_rw_16(SPI2, 0x2000);  //Normal mode of operation
 8001cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ccc:	4827      	ldr	r0, [pc, #156]	; (8001d6c <digiPot_init+0x284>)
 8001cce:	f000 fd63 	bl	8002798 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	e002      	b.n	8001cde <digiPot_init+0x1f6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	ddf7      	ble.n	8001cd8 <digiPot_init+0x1f0>
		digitalHi(POT2_SYNC);
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <digiPot_init+0x258>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <digiPot_init+0x258>)
 8001cee:	8892      	ldrh	r2, [r2, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
		for(i=0; i<10000; i++);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e002      	b.n	8001cfe <digiPot_init+0x216>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d04:	4293      	cmp	r3, r2
 8001d06:	ddf7      	ble.n	8001cf8 <digiPot_init+0x210>
		digitalLo(POT2_SYNC);
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <digiPot_init+0x258>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <digiPot_init+0x258>)
 8001d0e:	8892      	ldrh	r2, [r2, #4]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	e002      	b.n	8001d1e <digiPot_init+0x236>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d24:	4293      	cmp	r3, r2
 8001d26:	ddf7      	ble.n	8001d18 <digiPot_init+0x230>
		spi_rw_16(SPI2, 0x1803); //Enable digital control
 8001d28:	f641 0103 	movw	r1, #6147	; 0x1803
 8001d2c:	480f      	ldr	r0, [pc, #60]	; (8001d6c <digiPot_init+0x284>)
 8001d2e:	f000 fd33 	bl	8002798 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	e020      	b.n	8001d7a <digiPot_init+0x292>
 8001d38:	200001ac 	.word	0x200001ac
 8001d3c:	200001c0 	.word	0x200001c0
 8001d40:	200001d0 	.word	0x200001d0
 8001d44:	200001c8 	.word	0x200001c8
 8001d48:	20000164 	.word	0x20000164
 8001d4c:	200001d8 	.word	0x200001d8
 8001d50:	20000184 	.word	0x20000184
 8001d54:	20000194 	.word	0x20000194
 8001d58:	2000018c 	.word	0x2000018c
 8001d5c:	20000174 	.word	0x20000174
 8001d60:	2000017c 	.word	0x2000017c
 8001d64:	200001b8 	.word	0x200001b8
 8001d68:	2000019c 	.word	0x2000019c
 8001d6c:	40003800 	.word	0x40003800
 8001d70:	2000016c 	.word	0x2000016c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3301      	adds	r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d80:	4293      	cmp	r3, r2
 8001d82:	ddf7      	ble.n	8001d74 <digiPot_init+0x28c>
		digitalHi(POT2_SYNC);
 8001d84:	4b9a      	ldr	r3, [pc, #616]	; (8001ff0 <digiPot_init+0x508>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a99      	ldr	r2, [pc, #612]	; (8001ff0 <digiPot_init+0x508>)
 8001d8a:	8892      	ldrh	r2, [r2, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
	}

	//Initialize potentiometer 3
	if(digitalGet(POT3_RDY)==0x01)
 8001d8e:	4b99      	ldr	r3, [pc, #612]	; (8001ff4 <digiPot_init+0x50c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	8a1b      	ldrh	r3, [r3, #16]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b97      	ldr	r3, [pc, #604]	; (8001ff4 <digiPot_init+0x50c>)
 8001d98:	889b      	ldrh	r3, [r3, #4]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d054      	beq.n	8001e4c <digiPot_init+0x364>
	{
		digitalLo(POT3_SYNC);
 8001da2:	4b95      	ldr	r3, [pc, #596]	; (8001ff8 <digiPot_init+0x510>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a94      	ldr	r2, [pc, #592]	; (8001ff8 <digiPot_init+0x510>)
 8001da8:	8892      	ldrh	r2, [r2, #4]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	e002      	b.n	8001db8 <digiPot_init+0x2d0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3301      	adds	r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	ddf7      	ble.n	8001db2 <digiPot_init+0x2ca>
		spi_rw_16(SPI2, 0x2000);  //Normal mode of operation
 8001dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc6:	488d      	ldr	r0, [pc, #564]	; (8001ffc <digiPot_init+0x514>)
 8001dc8:	f000 fce6 	bl	8002798 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e002      	b.n	8001dd8 <digiPot_init+0x2f0>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dde:	4293      	cmp	r3, r2
 8001de0:	ddf7      	ble.n	8001dd2 <digiPot_init+0x2ea>
		digitalHi(POT3_SYNC);
 8001de2:	4b85      	ldr	r3, [pc, #532]	; (8001ff8 <digiPot_init+0x510>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a84      	ldr	r2, [pc, #528]	; (8001ff8 <digiPot_init+0x510>)
 8001de8:	8892      	ldrh	r2, [r2, #4]
 8001dea:	619a      	str	r2, [r3, #24]
		for(i=0; i<10000; i++);
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	e002      	b.n	8001df8 <digiPot_init+0x310>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3301      	adds	r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	ddf7      	ble.n	8001df2 <digiPot_init+0x30a>
		digitalLo(POT3_SYNC);
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <digiPot_init+0x510>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7c      	ldr	r2, [pc, #496]	; (8001ff8 <digiPot_init+0x510>)
 8001e08:	8892      	ldrh	r2, [r2, #4]
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	e002      	b.n	8001e18 <digiPot_init+0x330>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3301      	adds	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	ddf7      	ble.n	8001e12 <digiPot_init+0x32a>
		spi_rw_16(SPI2, 0x1803); //Enable digital control
 8001e22:	f641 0103 	movw	r1, #6147	; 0x1803
 8001e26:	4875      	ldr	r0, [pc, #468]	; (8001ffc <digiPot_init+0x514>)
 8001e28:	f000 fcb6 	bl	8002798 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	e002      	b.n	8001e38 <digiPot_init+0x350>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3301      	adds	r3, #1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	ddf7      	ble.n	8001e32 <digiPot_init+0x34a>
		digitalHi(POT3_SYNC);
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <digiPot_init+0x510>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <digiPot_init+0x510>)
 8001e48:	8892      	ldrh	r2, [r2, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
	}

	//Initialize potentiometer 4
	digitalLo(POT4_SYNC);
 8001e4c:	4b6c      	ldr	r3, [pc, #432]	; (8002000 <digiPot_init+0x518>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a6b      	ldr	r2, [pc, #428]	; (8002000 <digiPot_init+0x518>)
 8001e52:	8892      	ldrh	r2, [r2, #4]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	e002      	b.n	8001e62 <digiPot_init+0x37a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	ddf7      	ble.n	8001e5c <digiPot_init+0x374>
	spi_rw_16(SPI2, 0xC800);  //Normal mode of operation
 8001e6c:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001e70:	4862      	ldr	r0, [pc, #392]	; (8001ffc <digiPot_init+0x514>)
 8001e72:	f000 fc91 	bl	8002798 <spi_rw_16>
	for(i=0; i<10000; i++);
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	e002      	b.n	8001e82 <digiPot_init+0x39a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	ddf7      	ble.n	8001e7c <digiPot_init+0x394>
	digitalHi(POT4_SYNC);
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <digiPot_init+0x518>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5b      	ldr	r2, [pc, #364]	; (8002000 <digiPot_init+0x518>)
 8001e92:	8892      	ldrh	r2, [r2, #4]
 8001e94:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e002      	b.n	8001ea2 <digiPot_init+0x3ba>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	ddf7      	ble.n	8001e9c <digiPot_init+0x3b4>
	digitalLo(POT4_SYNC);
 8001eac:	4b54      	ldr	r3, [pc, #336]	; (8002000 <digiPot_init+0x518>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a53      	ldr	r2, [pc, #332]	; (8002000 <digiPot_init+0x518>)
 8001eb2:	8892      	ldrh	r2, [r2, #4]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	e002      	b.n	8001ec2 <digiPot_init+0x3da>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	ddf7      	ble.n	8001ebc <digiPot_init+0x3d4>
	spi_rw_16(SPI2, 0xD003); //Enable digital control
 8001ecc:	f24d 0103 	movw	r1, #53251	; 0xd003
 8001ed0:	484a      	ldr	r0, [pc, #296]	; (8001ffc <digiPot_init+0x514>)
 8001ed2:	f000 fc61 	bl	8002798 <spi_rw_16>
	for(i=0; i<10000; i++);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	e002      	b.n	8001ee2 <digiPot_init+0x3fa>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	ddf7      	ble.n	8001edc <digiPot_init+0x3f4>
	digitalHi(POT4_SYNC);
 8001eec:	4b44      	ldr	r3, [pc, #272]	; (8002000 <digiPot_init+0x518>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a43      	ldr	r2, [pc, #268]	; (8002000 <digiPot_init+0x518>)
 8001ef2:	8892      	ldrh	r2, [r2, #4]
 8001ef4:	619a      	str	r2, [r3, #24]

	//Initialize potentiometer 5
	digitalLo(POT5_SYNC);
 8001ef6:	4b43      	ldr	r3, [pc, #268]	; (8002004 <digiPot_init+0x51c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a42      	ldr	r2, [pc, #264]	; (8002004 <digiPot_init+0x51c>)
 8001efc:	8892      	ldrh	r2, [r2, #4]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	e002      	b.n	8001f0c <digiPot_init+0x424>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f12:	4293      	cmp	r3, r2
 8001f14:	ddf7      	ble.n	8001f06 <digiPot_init+0x41e>
	spi_rw_16(SPI2, 0xC800);  //Normal mode of operation
 8001f16:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001f1a:	4838      	ldr	r0, [pc, #224]	; (8001ffc <digiPot_init+0x514>)
 8001f1c:	f000 fc3c 	bl	8002798 <spi_rw_16>
	for(i=0; i<10000; i++);
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	e002      	b.n	8001f2c <digiPot_init+0x444>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f32:	4293      	cmp	r3, r2
 8001f34:	ddf7      	ble.n	8001f26 <digiPot_init+0x43e>
	digitalHi(POT5_SYNC);
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <digiPot_init+0x51c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <digiPot_init+0x51c>)
 8001f3c:	8892      	ldrh	r2, [r2, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e002      	b.n	8001f4c <digiPot_init+0x464>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f52:	4293      	cmp	r3, r2
 8001f54:	ddf7      	ble.n	8001f46 <digiPot_init+0x45e>
	digitalLo(POT5_SYNC);
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <digiPot_init+0x51c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <digiPot_init+0x51c>)
 8001f5c:	8892      	ldrh	r2, [r2, #4]
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	e002      	b.n	8001f6c <digiPot_init+0x484>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f72:	4293      	cmp	r3, r2
 8001f74:	ddf7      	ble.n	8001f66 <digiPot_init+0x47e>
	spi_rw_16(SPI2, 0xD003); //Enable digital control
 8001f76:	f24d 0103 	movw	r1, #53251	; 0xd003
 8001f7a:	4820      	ldr	r0, [pc, #128]	; (8001ffc <digiPot_init+0x514>)
 8001f7c:	f000 fc0c 	bl	8002798 <spi_rw_16>
	for(i=0; i<10000; i++);
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	e002      	b.n	8001f8c <digiPot_init+0x4a4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f92:	4293      	cmp	r3, r2
 8001f94:	ddf7      	ble.n	8001f86 <digiPot_init+0x49e>
	digitalHi(POT5_SYNC);
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <digiPot_init+0x51c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <digiPot_init+0x51c>)
 8001f9c:	8892      	ldrh	r2, [r2, #4]
 8001f9e:	619a      	str	r2, [r3, #24]

	//Initialize potentiometer 6
	digitalLo(POT6_SYNC);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <digiPot_init+0x520>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <digiPot_init+0x520>)
 8001fa6:	8892      	ldrh	r2, [r2, #4]
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e002      	b.n	8001fb6 <digiPot_init+0x4ce>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	ddf7      	ble.n	8001fb0 <digiPot_init+0x4c8>
	spi_rw_16(SPI2, 0xC800);  //Normal mode of operation
 8001fc0:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <digiPot_init+0x514>)
 8001fc6:	f000 fbe7 	bl	8002798 <spi_rw_16>
	for(i=0; i<10000; i++);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	e002      	b.n	8001fd6 <digiPot_init+0x4ee>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	ddf7      	ble.n	8001fd0 <digiPot_init+0x4e8>
	digitalHi(POT6_SYNC);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <digiPot_init+0x520>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <digiPot_init+0x520>)
 8001fe6:	8892      	ldrh	r2, [r2, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	e010      	b.n	8002012 <digiPot_init+0x52a>
 8001ff0:	200001d0 	.word	0x200001d0
 8001ff4:	200001a4 	.word	0x200001a4
 8001ff8:	200001c8 	.word	0x200001c8
 8001ffc:	40003800 	.word	0x40003800
 8002000:	20000164 	.word	0x20000164
 8002004:	200001d8 	.word	0x200001d8
 8002008:	20000184 	.word	0x20000184
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3301      	adds	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f242 720f 	movw	r2, #9999	; 0x270f
 8002018:	4293      	cmp	r3, r2
 800201a:	ddf7      	ble.n	800200c <digiPot_init+0x524>
	digitalLo(POT6_SYNC);
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <digiPot_init+0x588>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <digiPot_init+0x588>)
 8002022:	8892      	ldrh	r2, [r2, #4]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	e002      	b.n	8002032 <digiPot_init+0x54a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f242 720f 	movw	r2, #9999	; 0x270f
 8002038:	4293      	cmp	r3, r2
 800203a:	ddf7      	ble.n	800202c <digiPot_init+0x544>
	spi_rw_16(SPI2, 0xD003); //Enable digital control
 800203c:	f24d 0103 	movw	r1, #53251	; 0xd003
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <digiPot_init+0x58c>)
 8002042:	f000 fba9 	bl	8002798 <spi_rw_16>
	for(i=0; i<10000; i++);
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	e002      	b.n	8002052 <digiPot_init+0x56a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3301      	adds	r3, #1
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f242 720f 	movw	r2, #9999	; 0x270f
 8002058:	4293      	cmp	r3, r2
 800205a:	ddf7      	ble.n	800204c <digiPot_init+0x564>
	digitalHi(POT6_SYNC);
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <digiPot_init+0x588>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <digiPot_init+0x588>)
 8002062:	8892      	ldrh	r2, [r2, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000184 	.word	0x20000184
 8002074:	40003800 	.word	0x40003800

08002078 <TIM6_DAC_IRQHandler>:
motor_t driveMotor;
void motorEncoderProcess(motor_t *motor);


void TIM6_DAC_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 800207c:	2101      	movs	r1, #1
 800207e:	4804      	ldr	r0, [pc, #16]	; (8002090 <TIM6_DAC_IRQHandler+0x18>)
 8002080:	f7ff fa10 	bl	80014a4 <TIM_ClearITPendingBit>

	motorEncoderProcess(&driveMotor);
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <TIM6_DAC_IRQHandler+0x1c>)
 8002086:	f000 f84b 	bl	8002120 <motorEncoderProcess>
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40001000 	.word	0x40001000
 8002094:	200001e0 	.word	0x200001e0

08002098 <controlInit>:

void controlInit(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	uint16_t prescalerValue;

	//1kHz timer for current integration

	TIM_DeInit(TIM6);
 800209e:	481d      	ldr	r0, [pc, #116]	; (8002114 <controlInit+0x7c>)
 80020a0:	f7ff f86e 	bl	8001180 <TIM_DeInit>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80020a4:	2101      	movs	r1, #1
 80020a6:	2010      	movs	r0, #16
 80020a8:	f7fe ff26 	bl	8000ef8 <RCC_APB1PeriphClockCmd>

	prescalerValue = (SystemCoreClock/1000000) - 1;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <controlInit+0x80>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <controlInit+0x84>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	82fb      	strh	r3, [r7, #22]

	TIM_TimeBaseStructure.TIM_Period = 20000; //50Hz
 80020be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80020c2:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80020c4:	8afb      	ldrh	r3, [r7, #22]
 80020c6:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80020cc:	2300      	movs	r3, #0
 80020ce:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	81fb      	strh	r3, [r7, #14]

	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	480e      	ldr	r0, [pc, #56]	; (8002114 <controlInit+0x7c>)
 80020da:	f7ff f907 	bl	80012ec <TIM_TimeBaseInit>

	NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80020de:	2336      	movs	r3, #54	; 0x36
 80020e0:	743b      	strb	r3, [r7, #16]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 7;
 80020e2:	2307      	movs	r3, #7
 80020e4:	747b      	strb	r3, [r7, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	74bb      	strb	r3, [r7, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	74fb      	strb	r3, [r7, #19]
	NVIC_Init(&NVIC_InitStructure);
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fbb4 	bl	8000860 <NVIC_Init>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2101      	movs	r1, #1
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <controlInit+0x7c>)
 80020fe:	f7ff f9b1 	bl	8001464 <TIM_ITConfig>

	TIM_Cmd(TIM6, ENABLE);
 8002102:	2101      	movs	r1, #1
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <controlInit+0x7c>)
 8002106:	f7ff f98d 	bl	8001424 <TIM_Cmd>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40001000 	.word	0x40001000
 8002118:	20000030 	.word	0x20000030
 800211c:	431bde83 	.word	0x431bde83

08002120 <motorEncoderProcess>:

void motorEncoderProcess(motor_t *motor)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	motor->motorEncoder.currEncoderCount = motor->motorEncoder.encoderTimer -> CNT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	b21a      	sxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	815a      	strh	r2, [r3, #10]

	motor->motorEncoder.deltaEncoderCount = motor->motorEncoder.currEncoderCount - motor->motorEncoder.prevEncoderCount;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002142:	b29b      	uxth	r3, r3
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	b29b      	uxth	r3, r3
 8002148:	b21a      	sxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	819a      	strh	r2, [r3, #12]

	motor->motorEncoder.prevEncoderCount = motor->motorEncoder.currEncoderCount;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	811a      	strh	r2, [r3, #8]

	motor->motorEncoder.accumEncoderCounts += motor->motorEncoder.deltaEncoderCount;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]

	motor->motorCurrentSpeed += 0.1f * ( ( ( (motor->motorEncoder.deltaEncoderCount / 2.0f) * CONTROL_LOOP_FREQ)  / motor->motorCountsPerRev * 60.0f) - motor->motorCurrentSpeed) ;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800217c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002180:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002184:	eddf 6a10 	vldr	s13, [pc, #64]	; 80021c8 <motorEncoderProcess+0xa8>
 8002188:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002192:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002196:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80021cc <motorEncoderProcess+0xac>
 800219a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021a8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80021d0 <motorEncoderProcess+0xb0>
 80021ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	edc3 7a00 	vstr	s15, [r3]

}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	42480000 	.word	0x42480000
 80021cc:	42700000 	.word	0x42700000
 80021d0:	3dcccccd 	.word	0x3dcccccd

080021d4 <encoderInit>:

void encoderInit(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	driveMotor.motorCurrentSpeed = 0;
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <encoderInit+0x88>)
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
	driveMotor.motorCountsPerRev = 1660; //Determined empherically
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <encoderInit+0x88>)
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <encoderInit+0x8c>)
 80021e6:	605a      	str	r2, [r3, #4]
	driveMotor.motorEncoder.encoderTimer = TIM2;
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <encoderInit+0x88>)
 80021ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ee:	615a      	str	r2, [r3, #20]

	TIM_DeInit(TIM2);
 80021f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021f4:	f7fe ffc4 	bl	8001180 <TIM_DeInit>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80021f8:	2101      	movs	r1, #1
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7fe fe7c 	bl	8000ef8 <RCC_APB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8002200:	2303      	movs	r3, #3
 8002202:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002204:	2302      	movs	r3, #2
 8002206:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002208:	2301      	movs	r3, #1
 800220a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800220c:	463b      	mov	r3, r7
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002214:	f7fe fa2e 	bl	8000674 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0 , GPIO_AF_1);
 8002218:	2201      	movs	r2, #1
 800221a:	2100      	movs	r1, #0
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f7fe fac1 	bl	80007a6 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1 , GPIO_AF_1);
 8002224:	2201      	movs	r2, #1
 8002226:	2101      	movs	r1, #1
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f7fe fabb 	bl	80007a6 <GPIO_PinAFConfig>

	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI1, TIM_ICPolarity_Rising,  TIM_ICPolarity_Rising);
 8002230:	2300      	movs	r3, #0
 8002232:	2200      	movs	r2, #0
 8002234:	2101      	movs	r1, #1
 8002236:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800223a:	f7ff f945 	bl	80014c8 <TIM_EncoderInterfaceConfig>

	TIM_SetAutoreload(TIM2, 0xFFFF);
 800223e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002246:	f7ff f8df 	bl	8001408 <TIM_SetAutoreload>

	TIM_Cmd(TIM2, ENABLE);
 800224a:	2101      	movs	r1, #1
 800224c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002250:	f7ff f8e8 	bl	8001424 <TIM_Cmd>

}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200001e0 	.word	0x200001e0
 8002260:	44cf8000 	.word	0x44cf8000

08002264 <main>:

/* Includes */
#include "ServerLifter.h"

int main(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	Init();
 8002268:	f7ff fc08 	bl	8001a7c <Init>
	UpdateMainRoutine();
 800226c:	f7ff fc32 	bl	8001ad4 <UpdateMainRoutine>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}

08002276 <HardFault_Handler>:



void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
	for(;;);
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <WWDG_IRQHandler>:

}

void WWDG_IRQHandler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	for(;;);
 8002280:	e7fe      	b.n	8002280 <WWDG_IRQHandler+0x4>

08002282 <UsageFault_Handler>:

}

void UsageFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
	for(;;);
 8002286:	e7fe      	b.n	8002286 <UsageFault_Handler+0x4>

08002288 <USART2_Config>:
serialPort_t serialPort2;

unsigned int cs32A, cs32B;

void USART2_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b096      	sub	sp, #88	; 0x58
 800228c:	af00      	add	r7, sp, #0
	DMA_InitTypeDef DMA_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	serialPort_t *s;

	s = &serialPort2;
 800228e:	4b73      	ldr	r3, [pc, #460]	; (800245c <USART2_Config+0x1d4>)
 8002290:	657b      	str	r3, [r7, #84]	; 0x54

	s->rxBufSize = s->txBufSize=512;
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002298:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	s->txHead = s->txTail = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ac:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 80022b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022b2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	s->rxHead = s->rxTail= 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ba:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
 80022be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022c0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
	s->txDmaRunning = 0;
 80022c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	/* Peripheral Clock Enable -------------------------------------------------*/
	/* Enable GPIO clock */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	/* Enable USART clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80022cc:	2101      	movs	r1, #1
 80022ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022d2:	f7fe fe11 	bl	8000ef8 <RCC_APB1PeriphClockCmd>

	/* Enable the DMA clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 80022d6:	2101      	movs	r1, #1
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe fdcd 	bl	8000e78 <RCC_AHBPeriphClockCmd>

	/* USARTx GPIO configuration -----------------------------------------------*/
	/* Connect USART pins to AF7 */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7); //TX
 80022de:	2207      	movs	r2, #7
 80022e0:	2102      	movs	r1, #2
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e6:	f7fe fa5e 	bl	80007a6 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_7); //RX
 80022ea:	2207      	movs	r2, #7
 80022ec:	210f      	movs	r1, #15
 80022ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f2:	f7fe fa58 	bl	80007a6 <GPIO_PinAFConfig>

	/* Configure USART Tx and Rx as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80022f6:	2302      	movs	r3, #2
 80022f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80022fc:	2303      	movs	r3, #3
 80022fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800230e:	2304      	movs	r3, #4
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002312:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f7fe f9aa 	bl	8000674 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8002320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002326:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800232a:	4619      	mov	r1, r3
 800232c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002330:	f7fe f9a0 	bl	8000674 <GPIO_Init>

	/* USARTx configuration ----------------------------------------------------*/
	USART_InitStructure.USART_BaudRate = 115200;
 8002334:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800233a:	2300      	movs	r3, #0
 800233c:	643b      	str	r3, [r7, #64]	; 0x40
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800233e:	2300      	movs	r3, #0
 8002340:	647b      	str	r3, [r7, #68]	; 0x44
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8002342:	2300      	movs	r3, #0
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002346:	2300      	movs	r3, #0
 8002348:	653b      	str	r3, [r7, #80]	; 0x50
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800234a:	230c      	movs	r3, #12
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
	USART_Init(USART2, &USART_InitStructure);
 800234e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002352:	4619      	mov	r1, r3
 8002354:	4842      	ldr	r0, [pc, #264]	; (8002460 <USART2_Config+0x1d8>)
 8002356:	f7ff f903 	bl	8001560 <USART_Init>

	//	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);


	//	/* Configure DMA controller to manage USART TX request ----------*/
	DMA_DeInit(DMA1_Channel7);
 800235a:	4842      	ldr	r0, [pc, #264]	; (8002464 <USART2_Config+0x1dc>)
 800235c:	f7fd fff2 	bl	8000344 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART2 + 0x28;//0x04 ;
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <USART2_Config+0x1e0>)
 8002362:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8002364:	2310      	movs	r3, #16
 8002366:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_BufferSize = 512;
 8002368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236c:	82bb      	strh	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8002382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_M2M = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA1_Channel7, &DMA_InitStructure);
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	4619      	mov	r1, r3
 8002392:	4834      	ldr	r0, [pc, #208]	; (8002464 <USART2_Config+0x1dc>)
 8002394:	f7fe f892 	bl	80004bc <DMA_Init>
	DMA_SetCurrDataCounter(DMA1_Channel7, 0);
 8002398:	2100      	movs	r1, #0
 800239a:	4832      	ldr	r0, [pc, #200]	; (8002464 <USART2_Config+0x1dc>)
 800239c:	f7fe f8eb 	bl	8000576 <DMA_SetCurrDataCounter>
	DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2102      	movs	r1, #2
 80023a4:	482f      	ldr	r0, [pc, #188]	; (8002464 <USART2_Config+0x1dc>)
 80023a6:	f7fe f902 	bl	80005ae <DMA_ITConfig>
	DMA_ClearFlag(DMA1_FLAG_TC4|DMA1_FLAG_HT4|DMA1_FLAG_TE4);
 80023aa:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80023ae:	f7fe f947 	bl	8000640 <DMA_ClearFlag>
	DMA_Cmd(DMA1_Channel7, DISABLE);
 80023b2:	2100      	movs	r1, #0
 80023b4:	482b      	ldr	r0, [pc, #172]	; (8002464 <USART2_Config+0x1dc>)
 80023b6:	f7fe f8c1 	bl	800053c <DMA_Cmd>
	USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);
 80023ba:	2201      	movs	r2, #1
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	4828      	ldr	r0, [pc, #160]	; (8002460 <USART2_Config+0x1d8>)
 80023c0:	f7ff f9b8 	bl	8001734 <USART_DMACmd>


	/* Configure DMA controller to manage USART RX request ----------*/
	DMA_DeInit(DMA1_Channel6);
 80023c4:	4829      	ldr	r0, [pc, #164]	; (800246c <USART2_Config+0x1e4>)
 80023c6:	f7fd ffbd 	bl	8000344 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART2 + 0x24; //0x04 ;
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <USART2_Config+0x1e8>)
 80023cc:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)s->rxBuf;
 80023ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80023d4:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_BufferSize = DMA_RX_BUFFER;
 80023da:	2301      	movs	r3, #1
 80023dc:	82bb      	strh	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80023ee:	2320      	movs	r3, #32
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80023f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_M2M = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA1_Channel6, &DMA_InitStructure);
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	4619      	mov	r1, r3
 8002402:	481a      	ldr	r0, [pc, #104]	; (800246c <USART2_Config+0x1e4>)
 8002404:	f7fe f85a 	bl	80004bc <DMA_Init>
	DMA_ClearFlag(DMA1_FLAG_TC6|DMA1_FLAG_HT6|DMA1_FLAG_TE6);
 8002408:	f44f 0060 	mov.w	r0, #14680064	; 0xe00000
 800240c:	f7fe f918 	bl	8000640 <DMA_ClearFlag>
	DMA_Cmd(DMA1_Channel6, ENABLE);
 8002410:	2101      	movs	r1, #1
 8002412:	4816      	ldr	r0, [pc, #88]	; (800246c <USART2_Config+0x1e4>)
 8002414:	f7fe f892 	bl	800053c <DMA_Cmd>
	USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);
 8002418:	2201      	movs	r2, #1
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	4810      	ldr	r0, [pc, #64]	; (8002460 <USART2_Config+0x1d8>)
 800241e:	f7ff f989 	bl	8001734 <USART_DMACmd>
	s->rxPos = DMA_GetCurrDataCounter(DMA1_Channel6);
 8002422:	4812      	ldr	r0, [pc, #72]	; (800246c <USART2_Config+0x1e4>)
 8002424:	f7fe f8b6 	bl	8000594 <DMA_GetCurrDataCounter>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 9;
	//	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	//	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	//	NVIC_Init(&NVIC_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 8002432:	2311      	movs	r3, #17
 8002434:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 9;
 8002436:	2309      	movs	r3, #9
 8002438:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fa0b 	bl	8000860 <NVIC_Init>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 800244a:	2101      	movs	r1, #1
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <USART2_Config+0x1d8>)
 800244e:	f7ff f943 	bl	80016d8 <USART_Cmd>


}
 8002452:	bf00      	nop
 8002454:	3758      	adds	r7, #88	; 0x58
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200001fc 	.word	0x200001fc
 8002460:	40004400 	.word	0x40004400
 8002464:	40020080 	.word	0x40020080
 8002468:	40004428 	.word	0x40004428
 800246c:	4002006c 	.word	0x4002006c
 8002470:	40004424 	.word	0x40004424

08002474 <serialStartTxDMA>:

void serialStartTxDMA(serialPort_t *s)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	if (!s->txDmaRunning) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d133      	bne.n	80024ee <serialStartTxDMA+0x7a>
		DMA1_Channel7->CMAR = (uint32_t)&s->txBuf[s->txTail];
 8002486:	491c      	ldr	r1, [pc, #112]	; (80024f8 <serialStartTxDMA+0x84>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
		if (s->txHead > s->txTail) {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d90f      	bls.n	80024c4 <serialStartTxDMA+0x50>
			DMA1_Channel7->CNDTR = s->txHead - s->txTail;
 80024a4:	4914      	ldr	r1, [pc, #80]	; (80024f8 <serialStartTxDMA+0x84>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	604b      	str	r3, [r1, #4]
			s->txTail = s->txHead;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80024c2:	e00c      	b.n	80024de <serialStartTxDMA+0x6a>
		}
		else {
			DMA1_Channel7->CNDTR = s->txBufSize - s->txTail;
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <serialStartTxDMA+0x84>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	604b      	str	r3, [r1, #4]
			s->txTail = 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		}

		s->txDmaRunning = 1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
		DMA_Cmd(DMA1_Channel7, ENABLE);
 80024e6:	2101      	movs	r1, #1
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <serialStartTxDMA+0x84>)
 80024ea:	f7fe f827 	bl	800053c <DMA_Cmd>
	}
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40020080 	.word	0x40020080

080024fc <serialWrite>:

void serialWrite(serialPort_t *s, unsigned char ch)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
	s->txBuf[s->txHead] = ch;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	78f9      	ldrb	r1, [r7, #3]
 8002512:	54d1      	strb	r1, [r2, r3]
	s->txHead = (s->txHead + 1) % s->txBufSize;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800251a:	3301      	adds	r3, #1
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002522:	fbb3 f1f2 	udiv	r1, r3, r2
 8002526:	fb02 f201 	mul.w	r2, r2, r1
 800252a:	1a9a      	subs	r2, r3, r2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	serialStartTxDMA(s);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff9e 	bl	8002474 <serialStartTxDMA>
	//USART_ITConfig(USART2, USART_IT_TXE, ENABLE);

}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <USART2_IRQHandler>:


}

void USART2_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
	serialPort_t *s = &serialPort2;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <USART2_IRQHandler+0x70>)
 8002548:	607b      	str	r3, [r7, #4]

	if (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == 1)
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	4819      	ldr	r0, [pc, #100]	; (80025b4 <USART2_IRQHandler+0x74>)
 800254e:	f7ff f951 	bl	80017f4 <USART_GetFlagStatus>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d126      	bne.n	80025a6 <USART2_IRQHandler+0x66>
	{
		if (s->txTail != s->txHead)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002564:	429a      	cmp	r2, r3
 8002566:	d019      	beq.n	800259c <USART2_IRQHandler+0x5c>
		{
			USART_SendData(USART2, s->txBuf[s->txTail]);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	480f      	ldr	r0, [pc, #60]	; (80025b4 <USART2_IRQHandler+0x74>)
 8002578:	f7ff f8ca 	bl	8001710 <USART_SendData>
			s->txTail = (s->txTail + 1) % s->txBufSize;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002582:	3301      	adds	r3, #1
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800258a:	fbb3 f1f2 	udiv	r1, r3, r2
 800258e:	fb02 f201 	mul.w	r2, r2, r1
 8002592:	1a9a      	subs	r2, r3, r2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		{
			USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
		}

	}
}
 800259a:	e004      	b.n	80025a6 <USART2_IRQHandler+0x66>
			USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 800259c:	2200      	movs	r2, #0
 800259e:	4906      	ldr	r1, [pc, #24]	; (80025b8 <USART2_IRQHandler+0x78>)
 80025a0:	4804      	ldr	r0, [pc, #16]	; (80025b4 <USART2_IRQHandler+0x74>)
 80025a2:	f7ff f8e5 	bl	8001770 <USART_ITConfig>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200001fc 	.word	0x200001fc
 80025b4:	40004400 	.word	0x40004400
 80025b8:	00070107 	.word	0x00070107

080025bc <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
	serialPort_t *s = &serialPort2;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <DMA1_Channel7_IRQHandler+0x58>)
 80025c4:	607b      	str	r3, [r7, #4]

	if(DMA_GetFlagStatus(DMA1_FLAG_TC7) == 1)
 80025c6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80025ca:	f7fe f80f 	bl	80005ec <DMA_GetFlagStatus>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10b      	bne.n	80025ec <DMA1_Channel7_IRQHandler+0x30>
	{
		DMA_ClearFlag(DMA1_FLAG_TC7|DMA1_FLAG_HT7|DMA1_FLAG_TE7);
 80025d4:	f04f 6060 	mov.w	r0, #234881024	; 0xe000000
 80025d8:	f7fe f832 	bl	8000640 <DMA_ClearFlag>
		DMA_Cmd(DMA1_Channel7, DISABLE);
 80025dc:	2100      	movs	r1, #0
 80025de:	480e      	ldr	r0, [pc, #56]	; (8002618 <DMA1_Channel7_IRQHandler+0x5c>)
 80025e0:	f7fd ffac 	bl	800053c <DMA_Cmd>
		s->txDmaRunning = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	}

	DMA_ClearFlag(DMA1_FLAG_GL7);
 80025ec:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80025f0:	f7fe f826 	bl	8000640 <DMA_ClearFlag>

		if (s->txHead != s->txTail)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002600:	429a      	cmp	r2, r3
 8002602:	d002      	beq.n	800260a <DMA1_Channel7_IRQHandler+0x4e>
			serialStartTxDMA(s);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff35 	bl	8002474 <serialStartTxDMA>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200001fc 	.word	0x200001fc
 8002618:	40020080 	.word	0x40020080

0800261c <SPI_Config>:
#include "spi.h"
#include "stm32f30x.h"

void SPI_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef   SPI_InitStructure;

    /* Configure SPI3 pins: SCK and MOSI */
	GPIO_InitStructure.GPIO_Pin = SPI3_SCK_PIN | SPI3_MOSI_PIN;
 8002622:	2328      	movs	r3, #40	; 0x28
 8002624:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002626:	2303      	movs	r3, #3
 8002628:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800262a:	2302      	movs	r3, #2
 800262c:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800262e:	2300      	movs	r3, #0
 8002630:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8002632:	2302      	movs	r3, #2
 8002634:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI3_PORT, &GPIO_InitStructure);
 8002636:	f107 0318 	add.w	r3, r7, #24
 800263a:	4619      	mov	r1, r3
 800263c:	4853      	ldr	r0, [pc, #332]	; (800278c <SPI_Config+0x170>)
 800263e:	f7fe f819 	bl	8000674 <GPIO_Init>

	/* Configure MISO as Input Floating */
	GPIO_InitStructure.GPIO_Pin = SPI3_MISO_PIN;
 8002642:	2310      	movs	r3, #16
 8002644:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002646:	2303      	movs	r3, #3
 8002648:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800264a:	2302      	movs	r3, #2
 800264c:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800264e:	2301      	movs	r3, #1
 8002650:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8002652:	2301      	movs	r3, #1
 8002654:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI3_PORT, &GPIO_InitStructure);
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	4619      	mov	r1, r3
 800265c:	484b      	ldr	r0, [pc, #300]	; (800278c <SPI_Config+0x170>)
 800265e:	f7fe f809 	bl	8000674 <GPIO_Init>

	/* Configure SPI3 pins: CS or NSS */
	GPIO_InitStructure.GPIO_Pin = SPI3_NSS_PIN;
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002668:	2303      	movs	r3, #3
 800266a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800266c:	2301      	movs	r3, #1
 800266e:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002670:	2300      	movs	r3, #0
 8002672:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	77fb      	strb	r3, [r7, #31]

    GPIO_PinAFConfig(SPI3_PORT, SPI_SPI3_SCK_SOURCE, GPIO_AF_6);
 8002678:	2206      	movs	r2, #6
 800267a:	2103      	movs	r1, #3
 800267c:	4843      	ldr	r0, [pc, #268]	; (800278c <SPI_Config+0x170>)
 800267e:	f7fe f892 	bl	80007a6 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI3_PORT, SPI_SPI3_MISO_SOURCE, GPIO_AF_6);
 8002682:	2206      	movs	r2, #6
 8002684:	2104      	movs	r1, #4
 8002686:	4841      	ldr	r0, [pc, #260]	; (800278c <SPI_Config+0x170>)
 8002688:	f7fe f88d 	bl	80007a6 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI3_PORT, SPI_SPI3_MOSI_SOURCE, GPIO_AF_6);
 800268c:	2206      	movs	r2, #6
 800268e:	2105      	movs	r1, #5
 8002690:	483e      	ldr	r0, [pc, #248]	; (800278c <SPI_Config+0x170>)
 8002692:	f7fe f888 	bl	80007a6 <GPIO_PinAFConfig>

    /* Enable SPI3 clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002696:	2101      	movs	r1, #1
 8002698:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800269c:	f7fe fc2c 	bl	8000ef8 <RCC_APB1PeriphClockCmd>

    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80026a0:	2300      	movs	r3, #0
 80026a2:	80bb      	strh	r3, [r7, #4]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80026a4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80026a8:	80fb      	strh	r3, [r7, #6]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 80026aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80026ae:	813b      	strh	r3, [r7, #8]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80026b0:	2300      	movs	r3, #0
 80026b2:	817b      	strh	r3, [r7, #10]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80026b4:	2301      	movs	r3, #1
 80026b6:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80026b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026bc:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80026be:	2310      	movs	r3, #16
 80026c0:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80026c2:	2300      	movs	r3, #0
 80026c4:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 80026c6:	2307      	movs	r3, #7
 80026c8:	82bb      	strh	r3, [r7, #20]
    SPI_Init(SPI3, &SPI_InitStructure);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4830      	ldr	r0, [pc, #192]	; (8002790 <SPI_Config+0x174>)
 80026d0:	f7fe fc72 	bl	8000fb8 <SPI_Init>
    /* Enable SPI3 */
    SPI_Cmd(SPI3, ENABLE);
 80026d4:	2101      	movs	r1, #1
 80026d6:	482e      	ldr	r0, [pc, #184]	; (8002790 <SPI_Config+0x174>)
 80026d8:	f7fe fcf9 	bl	80010ce <SPI_Cmd>




	/* Configure SPI2 pins: SCK and MOSI */
	GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN | SPI2_MOSI_PIN;
 80026dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80026e2:	2303      	movs	r3, #3
 80026e4:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80026e6:	2302      	movs	r3, #2
 80026e8:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80026ea:	2300      	movs	r3, #0
 80026ec:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 80026ee:	2302      	movs	r3, #2
 80026f0:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI2_PORT, &GPIO_InitStructure);
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	4619      	mov	r1, r3
 80026f8:	4824      	ldr	r0, [pc, #144]	; (800278c <SPI_Config+0x170>)
 80026fa:	f7fd ffbb 	bl	8000674 <GPIO_Init>

	/* Configure MISO as Input Floating */
	GPIO_InitStructure.GPIO_Pin = SPI2_MISO_PIN;
 80026fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002702:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002704:	2303      	movs	r3, #3
 8002706:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002708:	2302      	movs	r3, #2
 800270a:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800270c:	2301      	movs	r3, #1
 800270e:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI2_PORT, &GPIO_InitStructure);
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4619      	mov	r1, r3
 800271a:	481c      	ldr	r0, [pc, #112]	; (800278c <SPI_Config+0x170>)
 800271c:	f7fd ffaa 	bl	8000674 <GPIO_Init>


    // Connect SPI pins to Alternate Function
    GPIO_PinAFConfig(SPI2_PORT, SPI_SPI2_SCK_SOURCE, GPIO_AF_5);
 8002720:	2205      	movs	r2, #5
 8002722:	210d      	movs	r1, #13
 8002724:	4819      	ldr	r0, [pc, #100]	; (800278c <SPI_Config+0x170>)
 8002726:	f7fe f83e 	bl	80007a6 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI2_PORT, SPI_SPI2_MISO_SOURCE, GPIO_AF_5);
 800272a:	2205      	movs	r2, #5
 800272c:	210e      	movs	r1, #14
 800272e:	4817      	ldr	r0, [pc, #92]	; (800278c <SPI_Config+0x170>)
 8002730:	f7fe f839 	bl	80007a6 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI2_PORT, SPI_SPI2_MOSI_SOURCE, GPIO_AF_5);
 8002734:	2205      	movs	r2, #5
 8002736:	210f      	movs	r1, #15
 8002738:	4814      	ldr	r0, [pc, #80]	; (800278c <SPI_Config+0x170>)
 800273a:	f7fe f834 	bl	80007a6 <GPIO_PinAFConfig>

	/* Enable SPI3 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800273e:	2101      	movs	r1, #1
 8002740:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002744:	f7fe fbd8 	bl	8000ef8 <RCC_APB1PeriphClockCmd>

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002748:	2300      	movs	r3, #0
 800274a:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800274c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002750:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8002752:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002756:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002758:	2300      	movs	r3, #0
 800275a:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800275c:	2301      	movs	r3, #1
 800275e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002764:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8002766:	2310      	movs	r3, #16
 8002768:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800276a:	2300      	movs	r3, #0
 800276c:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800276e:	2307      	movs	r3, #7
 8002770:	82bb      	strh	r3, [r7, #20]
	SPI_Init(SPI2, &SPI_InitStructure);
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	; (8002794 <SPI_Config+0x178>)
 8002778:	f7fe fc1e 	bl	8000fb8 <SPI_Init>

	/* Enable SPI2 */
	SPI_Cmd(SPI2, ENABLE);
 800277c:	2101      	movs	r1, #1
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <SPI_Config+0x178>)
 8002780:	f7fe fca5 	bl	80010ce <SPI_Cmd>
}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	48000400 	.word	0x48000400
 8002790:	40003c00 	.word	0x40003c00
 8002794:	40003800 	.word	0x40003800

08002798 <spi_rw_16>:
//	SPI_Cmd(SPI3, ENABLE);
//}


uint16_t spi_rw_16(SPI_TypeDef* SPIx, uint16_t out)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
   while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 80027a4:	bf00      	nop
 80027a6:	2102      	movs	r1, #2
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7fe fccc 	bl	8001146 <SPI_I2S_GetFlagStatus>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f8      	beq.n	80027a6 <spi_rw_16+0xe>

    /* Send byte through the SPI peripheral */
    SPI_I2S_SendData16(SPIx , out);
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fca8 	bl	800110e <SPI_I2S_SendData16>

    /* Wait to receive a byte */
   while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
 80027be:	bf00      	nop
 80027c0:	2101      	movs	r1, #1
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fcbf 	bl	8001146 <SPI_I2S_GetFlagStatus>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f8      	beq.n	80027c0 <spi_rw_16+0x28>

    /* Return the byte read from the SPI bus */
    return SPI_I2S_ReceiveData16(SPIx);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fcac 	bl	800112c <SPI_I2S_ReceiveData16>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002818 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027e6:	e003      	b.n	80027f0 <LoopCopyDataInit>

080027e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027ee:	3104      	adds	r1, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027f0:	480b      	ldr	r0, [pc, #44]	; (8002820 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027f8:	d3f6      	bcc.n	80027e8 <CopyDataInit>
	ldr	r2, =_sbss
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027fc:	e002      	b.n	8002804 <LoopFillZerobss>

080027fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002800:	f842 3b04 	str.w	r3, [r2], #4

08002804 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <LoopForever+0x16>)
	cmp	r2, r3
 8002806:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002808:	d3f9      	bcc.n	80027fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800280a:	f000 f813 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280e:	f000 f975 	bl	8002afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002812:	f7ff fd27 	bl	8002264 <main>

08002816 <LoopForever>:

LoopForever:
    b LoopForever
 8002816:	e7fe      	b.n	8002816 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002818:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 800281c:	08002b74 	.word	0x08002b74
	ldr	r0, =_sdata
 8002820:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002824:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8002828:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 800282c:	20000628 	.word	0x20000628

08002830 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC1_IRQHandler>
	...

08002834 <SystemInit>:
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002838:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <SystemInit+0x84>)
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <SystemInit+0x84>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <SystemInit+0x88>)
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <SystemInit+0x88>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR &= 0xF87FC00C;
 8002854:	4919      	ldr	r1, [pc, #100]	; (80028bc <SystemInit+0x88>)
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <SystemInit+0x88>)
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <SystemInit+0x8c>)
 800285c:	4013      	ands	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <SystemInit+0x88>)
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <SystemInit+0x88>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800286a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002870:	4a12      	ldr	r2, [pc, #72]	; (80028bc <SystemInit+0x88>)
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <SystemInit+0x88>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
	RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800287c:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <SystemInit+0x88>)
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <SystemInit+0x88>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002886:	6053      	str	r3, [r2, #4]

	/* Reset PREDIV1[3:0] bits */
	RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002888:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <SystemInit+0x88>)
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <SystemInit+0x88>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f023 030f 	bic.w	r3, r3, #15
 8002892:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Reset USARTSW[1:0], I2CSW and TIMs bits */
	RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002894:	4909      	ldr	r1, [pc, #36]	; (80028bc <SystemInit+0x88>)
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <SystemInit+0x88>)
 8002898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <SystemInit+0x90>)
 800289c:	4013      	ands	r3, r2
 800289e:	630b      	str	r3, [r1, #48]	; 0x30

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <SystemInit+0x88>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]

	/* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
	SetSysClock();
 80028a6:	f000 f87b 	bl	80029a0 <SetSysClock>

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028aa:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <SystemInit+0x84>)
 80028ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028b0:	609a      	str	r2, [r3, #8]
#endif  
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	f87fc00c 	.word	0xf87fc00c
 80028c4:	ff00fccc 	.word	0xff00fccc

080028c8 <SystemCoreClockUpdate>:
 *
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate (void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
	uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	2300      	movs	r3, #0
 80028dc:	603b      	str	r3, [r7, #0]

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <SystemCoreClockUpdate+0xc4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	60fb      	str	r3, [r7, #12]

	switch (tmp)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d007      	beq.n	80028fe <SystemCoreClockUpdate+0x36>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d009      	beq.n	8002906 <SystemCoreClockUpdate+0x3e>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d12f      	bne.n	8002956 <SystemCoreClockUpdate+0x8e>
	{
	case 0x00:  /* HSI used as system clock */
		SystemCoreClock = HSI_VALUE;
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <SystemCoreClockUpdate+0xcc>)
 80028fa:	601a      	str	r2, [r3, #0]
		break;
 80028fc:	e02f      	b.n	800295e <SystemCoreClockUpdate+0x96>
	case 0x04:  /* HSE used as system clock */
		SystemCoreClock = HSE_VALUE;
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 8002900:	4a24      	ldr	r2, [pc, #144]	; (8002994 <SystemCoreClockUpdate+0xcc>)
 8002902:	601a      	str	r2, [r3, #0]
		break;
 8002904:	e02b      	b.n	800295e <SystemCoreClockUpdate+0x96>
	case 0x08:  /* PLL used as system clock */
		/* Get PLL clock source and multiplication factor ----------------------*/
		pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <SystemCoreClockUpdate+0xc4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800290e:	60bb      	str	r3, [r7, #8]
		pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <SystemCoreClockUpdate+0xc4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	607b      	str	r3, [r7, #4]
		pllmull = ( pllmull >> 18) + 2;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	3302      	adds	r3, #2
 8002920:	60bb      	str	r3, [r7, #8]

		if (pllsource == 0x00)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <SystemCoreClockUpdate+0x6e>
		{
			/* HSI oscillator clock divided by 2 selected as PLL clock entry */
			SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <SystemCoreClockUpdate+0xd0>)
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	4a17      	ldr	r2, [pc, #92]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 8002932:	6013      	str	r3, [r2, #0]
		{
			prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
			/* HSE oscillator clock selected as PREDIV1 clock entry */
			SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
		}
		break;
 8002934:	e013      	b.n	800295e <SystemCoreClockUpdate+0x96>
			prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <SystemCoreClockUpdate+0xc4>)
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3301      	adds	r3, #1
 8002940:	603b      	str	r3, [r7, #0]
			SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 8002942:	4a14      	ldr	r2, [pc, #80]	; (8002994 <SystemCoreClockUpdate+0xcc>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 8002952:	6013      	str	r3, [r2, #0]
		break;
 8002954:	e003      	b.n	800295e <SystemCoreClockUpdate+0x96>
	default: /* HSI used as system clock */
		SystemCoreClock = HSI_VALUE;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <SystemCoreClockUpdate+0xcc>)
 800295a:	601a      	str	r2, [r3, #0]
		break;
 800295c:	bf00      	nop
	}
	/* Compute HCLK clock frequency ----------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <SystemCoreClockUpdate+0xc4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <SystemCoreClockUpdate+0xd4>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	60fb      	str	r3, [r7, #12]
	/* HCLK clock frequency */
	SystemCoreClock >>= tmp;
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <SystemCoreClockUpdate+0xc8>)
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	20000030 	.word	0x20000030
 8002994:	007a1200 	.word	0x007a1200
 8002998:	003d0900 	.word	0x003d0900
 800299c:	20000034 	.word	0x20000034

080029a0 <SetSysClock>:
 *         is reset to the default reset state (done in SystemInit() function).
 * @param  None
 * @retval None
 */
static void SetSysClock(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
	/*            PLL (clocked by HSE) used as System clock source                */
	/******************************************************************************/

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80029ae:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <SetSysClock+0xdc>)
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <SetSysClock+0xdc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <SetSysClock+0xdc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <SetSysClock+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029d6:	d1f0      	bne.n	80029ba <SetSysClock+0x1a>

	if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <SetSysClock+0xdc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <SetSysClock+0x4a>
	{
		HSEStatus = (uint32_t)0x01;
 80029e4:	2301      	movs	r3, #1
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	e001      	b.n	80029ee <SetSysClock+0x4e>
	}
	else
	{
		HSEStatus = (uint32_t)0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t)0x01)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d13c      	bne.n	8002a6e <SetSysClock+0xce>
	{
		/* Enable Prefetch Buffer and set Flash Latency */
		FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <SetSysClock+0xe0>)
 80029f6:	2212      	movs	r2, #18
 80029f8:	601a      	str	r2, [r3, #0]

		/* HCLK = SYSCLK / 1 */
		RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <SetSysClock+0xdc>)
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <SetSysClock+0xdc>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	6053      	str	r3, [r2, #4]

		/* PCLK2 = HCLK / 1 */
		RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002a02:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <SetSysClock+0xdc>)
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <SetSysClock+0xdc>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	6053      	str	r3, [r2, #4]

		/* PCLK1 = HCLK / 2 */
		RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <SetSysClock+0xdc>)
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <SetSysClock+0xdc>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a14:	6053      	str	r3, [r2, #4]

		/* PLL configuration */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <SetSysClock+0xdc>)
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <SetSysClock+0xdc>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002a20:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL3);
 8002a22:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <SetSysClock+0xdc>)
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <SetSysClock+0xdc>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002a2c:	6053      	str	r3, [r2, #4]

		/* Enable PLL */
		RCC->CR |= RCC_CR_PLLON;
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <SetSysClock+0xdc>)
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <SetSysClock+0xdc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a38:	6013      	str	r3, [r2, #0]

		/* Wait till PLL is ready */
		while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002a3a:	bf00      	nop
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <SetSysClock+0xdc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f9      	beq.n	8002a3c <SetSysClock+0x9c>
		{
		}

		/* Select PLL as system clock source */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002a48:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <SetSysClock+0xdc>)
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <SetSysClock+0xdc>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002a54:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <SetSysClock+0xdc>)
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <SetSysClock+0xdc>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	6053      	str	r3, [r2, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002a60:	bf00      	nop
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <SetSysClock+0xdc>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d1f9      	bne.n	8002a62 <SetSysClock+0xc2>
		}
	}
	else
	{
	}
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40022000 	.word	0x40022000

08002a84 <timerInit>:

	return (hiBits << 16) | timerVal;
}

// Use TIMER_TIM to create a us system clock
void timerInit(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	uint16_t prescalerValue;

	TIM_DeInit(TIMER_TIM);
 8002a8a:	4818      	ldr	r0, [pc, #96]	; (8002aec <timerInit+0x68>)
 8002a8c:	f7fe fb78 	bl	8001180 <TIM_DeInit>

	TIMER_EN;
 8002a90:	2101      	movs	r1, #1
 8002a92:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a96:	f7fe fa0f 	bl	8000eb8 <RCC_APB2PeriphClockCmd>

	prescalerValue = (SystemCoreClock/1000000) - 1;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <timerInit+0x6c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <timerInit+0x70>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	0c9b      	lsrs	r3, r3, #18
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	/* (CoreClock /2 ) / prescalerValue = 1MHz (us) */
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8002aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab0:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002aba:	2300      	movs	r3, #0
 8002abc:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseInit(TIMER_TIM, &TIM_TimeBaseStructure);
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4809      	ldr	r0, [pc, #36]	; (8002aec <timerInit+0x68>)
 8002ac8:	f7fe fc10 	bl	80012ec <TIM_TimeBaseInit>

	// reset
	timerData.hiBits = 0;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <timerInit+0x74>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
	TIM_SetCounter(TIMER_TIM, 0);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <timerInit+0x68>)
 8002ad6:	f7fe fc89 	bl	80013ec <TIM_SetCounter>

	// go...
	TIM_Cmd(TIMER_TIM, ENABLE);
 8002ada:	2101      	movs	r1, #1
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <timerInit+0x68>)
 8002ade:	f7fe fca1 	bl	8001424 <TIM_Cmd>
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40014400 	.word	0x40014400
 8002af0:	20000030 	.word	0x20000030
 8002af4:	431bde83 	.word	0x431bde83
 8002af8:	20000620 	.word	0x20000620

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	4e0d      	ldr	r6, [pc, #52]	; (8002b34 <__libc_init_array+0x38>)
 8002b00:	4c0d      	ldr	r4, [pc, #52]	; (8002b38 <__libc_init_array+0x3c>)
 8002b02:	1ba4      	subs	r4, r4, r6
 8002b04:	10a4      	asrs	r4, r4, #2
 8002b06:	2500      	movs	r5, #0
 8002b08:	42a5      	cmp	r5, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	4e0b      	ldr	r6, [pc, #44]	; (8002b3c <__libc_init_array+0x40>)
 8002b0e:	4c0c      	ldr	r4, [pc, #48]	; (8002b40 <__libc_init_array+0x44>)
 8002b10:	f000 f820 	bl	8002b54 <_init>
 8002b14:	1ba4      	subs	r4, r4, r6
 8002b16:	10a4      	asrs	r4, r4, #2
 8002b18:	2500      	movs	r5, #0
 8002b1a:	42a5      	cmp	r5, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b24:	4798      	blx	r3
 8002b26:	3501      	adds	r5, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b2e:	4798      	blx	r3
 8002b30:	3501      	adds	r5, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08002b6c 	.word	0x08002b6c
 8002b38:	08002b6c 	.word	0x08002b6c
 8002b3c:	08002b6c 	.word	0x08002b6c
 8002b40:	08002b70 	.word	0x08002b70

08002b44 <memset>:
 8002b44:	4402      	add	r2, r0
 8002b46:	4603      	mov	r3, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr
