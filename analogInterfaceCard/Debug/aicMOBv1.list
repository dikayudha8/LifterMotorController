
C:\Users\Andika\Desktop\serverLifter\LifterMotorController\analogInterfaceCard\Debug\aicMOBv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020044  2**0
                  CONTENTS
  7 .bss          000005ec  20000044  20000044  00020044  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000630  20000630  00020044  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ad37  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e4e  00000000  00000000  0002adab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cd0  00000000  00000000  0002cc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b88  00000000  00000000  0002d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004a5f  00000000  00000000  0002e458  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d35  00000000  00000000  00032eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00036bec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003670  00000000  00000000  00036c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800320c 	.word	0x0800320c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	0800320c 	.word	0x0800320c

080001c8 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	460b      	mov	r3, r1
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80001d6:	7afb      	ldrb	r3, [r7, #11]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	331b      	adds	r3, #27
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	4413      	add	r3, r2
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	7a1b      	ldrb	r3, [r3, #8]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d109      	bne.n	800020a <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80001f6:	7afb      	ldrb	r3, [r7, #11]
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	331b      	adds	r3, #27
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	4413      	add	r3, r2
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	0d5a      	lsrs	r2, r3, #21
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	e008      	b.n	800021c <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800020a:	7afb      	ldrb	r3, [r7, #11]
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	331b      	adds	r3, #27
 8000210:	011b      	lsls	r3, r3, #4
 8000212:	4413      	add	r3, r2
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	08da      	lsrs	r2, r3, #3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800021c:	7afb      	ldrb	r3, [r7, #11]
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	331b      	adds	r3, #27
 8000222:	011b      	lsls	r3, r3, #4
 8000224:	4413      	add	r3, r2
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	f003 0302 	and.w	r3, r3, #2
 800022e:	b2da      	uxtb	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000234:	7afb      	ldrb	r3, [r7, #11]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	331b      	adds	r3, #27
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	4413      	add	r3, r2
 800023e:	3304      	adds	r3, #4
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	f003 030f 	and.w	r3, r3, #15
 8000248:	b2da      	uxtb	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800024e:	7afb      	ldrb	r3, [r7, #11]
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	331b      	adds	r3, #27
 8000254:	011b      	lsls	r3, r3, #4
 8000256:	4413      	add	r3, r2
 8000258:	3304      	adds	r3, #4
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	0a1b      	lsrs	r3, r3, #8
 800025e:	b2da      	uxtb	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000264:	7afb      	ldrb	r3, [r7, #11]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	011b      	lsls	r3, r3, #4
 800026a:	4413      	add	r3, r2
 800026c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000278:	7afb      	ldrb	r3, [r7, #11]
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	011b      	lsls	r3, r3, #4
 800027e:	4413      	add	r3, r2
 8000280:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	0a1b      	lsrs	r3, r3, #8
 8000288:	b2da      	uxtb	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800028e:	7afb      	ldrb	r3, [r7, #11]
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	0c1b      	lsrs	r3, r3, #16
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80002a4:	7afb      	ldrb	r3, [r7, #11]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	4413      	add	r3, r2
 80002ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	0e1b      	lsrs	r3, r3, #24
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80002ba:	7afb      	ldrb	r3, [r7, #11]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	011b      	lsls	r3, r3, #4
 80002c0:	4413      	add	r3, r2
 80002c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80002ce:	7afb      	ldrb	r3, [r7, #11]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	4413      	add	r3, r2
 80002d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	0a1b      	lsrs	r3, r3, #8
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80002e4:	7afb      	ldrb	r3, [r7, #11]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	4413      	add	r3, r2
 80002ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	0c1b      	lsrs	r3, r3, #16
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80002fa:	7afb      	ldrb	r3, [r7, #11]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	011b      	lsls	r3, r3, #4
 8000300:	4413      	add	r3, r2
 8000302:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	0e1b      	lsrs	r3, r3, #24
 800030a:	b2da      	uxtb	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000310:	7afb      	ldrb	r3, [r7, #11]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d106      	bne.n	8000324 <CAN_Receive+0x15c>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	f043 0220 	orr.w	r2, r3, #32
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000322:	e005      	b.n	8000330 <CAN_Receive+0x168>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	f043 0220 	orr.w	r2, r3, #32
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	611a      	str	r2, [r3, #16]
  }
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800034c:	4013      	ands	r3, r2
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	6013      	str	r3, [r2, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a43      	ldr	r2, [pc, #268]	; (800047c <DMA_DeInit+0x140>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000372:	4a43      	ldr	r2, [pc, #268]	; (8000480 <DMA_DeInit+0x144>)
 8000374:	4b42      	ldr	r3, [pc, #264]	; (8000480 <DMA_DeInit+0x144>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	f043 030f 	orr.w	r3, r3, #15
 800037c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800037e:	e077      	b.n	8000470 <DMA_DeInit+0x134>
  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a40      	ldr	r2, [pc, #256]	; (8000484 <DMA_DeInit+0x148>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000388:	4a3d      	ldr	r2, [pc, #244]	; (8000480 <DMA_DeInit+0x144>)
 800038a:	4b3d      	ldr	r3, [pc, #244]	; (8000480 <DMA_DeInit+0x144>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000392:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000394:	e06c      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a3b      	ldr	r2, [pc, #236]	; (8000488 <DMA_DeInit+0x14c>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 800039e:	4a38      	ldr	r2, [pc, #224]	; (8000480 <DMA_DeInit+0x144>)
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <DMA_DeInit+0x144>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80003a8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003aa:	e061      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a37      	ldr	r2, [pc, #220]	; (800048c <DMA_DeInit+0x150>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <DMA_DeInit+0x144>)
 80003b6:	4b32      	ldr	r3, [pc, #200]	; (8000480 <DMA_DeInit+0x144>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80003be:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003c0:	e056      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a32      	ldr	r2, [pc, #200]	; (8000490 <DMA_DeInit+0x154>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <DMA_DeInit+0x9c>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 80003ca:	4a2d      	ldr	r2, [pc, #180]	; (8000480 <DMA_DeInit+0x144>)
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <DMA_DeInit+0x144>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80003d4:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003d6:	e04b      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a2e      	ldr	r2, [pc, #184]	; (8000494 <DMA_DeInit+0x158>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <DMA_DeInit+0xb2>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 80003e0:	4a27      	ldr	r2, [pc, #156]	; (8000480 <DMA_DeInit+0x144>)
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <DMA_DeInit+0x144>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003ea:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 80003ec:	e040      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a29      	ldr	r2, [pc, #164]	; (8000498 <DMA_DeInit+0x15c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <DMA_DeInit+0x144>)
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <DMA_DeInit+0x144>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000400:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000402:	e035      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a25      	ldr	r2, [pc, #148]	; (800049c <DMA_DeInit+0x160>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 800040c:	4a24      	ldr	r2, [pc, #144]	; (80004a0 <DMA_DeInit+0x164>)
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <DMA_DeInit+0x164>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f043 030f 	orr.w	r3, r3, #15
 8000416:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000418:	e02a      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <DMA_DeInit+0x168>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 8000422:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <DMA_DeInit+0x164>)
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <DMA_DeInit+0x164>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800042c:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800042e:	e01f      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <DMA_DeInit+0x16c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8000438:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <DMA_DeInit+0x164>)
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <DMA_DeInit+0x164>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000442:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8000444:	e014      	b.n	8000470 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a18      	ldr	r2, [pc, #96]	; (80004ac <DMA_DeInit+0x170>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <DMA_DeInit+0x120>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <DMA_DeInit+0x164>)
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <DMA_DeInit+0x164>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000458:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 800045a:	e009      	b.n	8000470 <DMA_DeInit+0x134>
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <DMA_DeInit+0x174>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d105      	bne.n	8000470 <DMA_DeInit+0x134>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <DMA_DeInit+0x164>)
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <DMA_DeInit+0x164>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800046e:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40020008 	.word	0x40020008
 8000480:	40020000 	.word	0x40020000
 8000484:	4002001c 	.word	0x4002001c
 8000488:	40020030 	.word	0x40020030
 800048c:	40020044 	.word	0x40020044
 8000490:	40020058 	.word	0x40020058
 8000494:	4002006c 	.word	0x4002006c
 8000498:	40020080 	.word	0x40020080
 800049c:	40020408 	.word	0x40020408
 80004a0:	40020400 	.word	0x40020400
 80004a4:	4002041c 	.word	0x4002041c
 80004a8:	40020430 	.word	0x40020430
 80004ac:	40020444 	.word	0x40020444
 80004b0:	40020458 	.word	0x40020458

080004b4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004d2:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004e2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000500:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	4313      	orrs	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	899b      	ldrh	r3, [r3, #12]
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d006      	beq.n	8000554 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f043 0201 	orr.w	r2, r3, #1
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  }
}
 8000552:	e006      	b.n	8000562 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800055c:	4013      	ands	r3, r2
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  }
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 800057c:	887a      	ldrh	r2, [r7, #2]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	605a      	str	r2, [r3, #4]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <DMA_GetCurrDataCounter>:
  *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	b29b      	uxth	r3, r3
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d006      	beq.n	80005ce <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 80005cc:	e006      	b.n	80005dc <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	43db      	mvns	r3, r3
 80005d6:	401a      	ands	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	601a      	str	r2, [r3, #0]
  }
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <DMA_GetFlagStatus>:
  *    DMAy_FLAG_TEx). 
  *      
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <DMA_GetFlagStatus+0x4c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e002      	b.n	8000610 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <DMA_GetFlagStatus+0x50>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4013      	ands	r3, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800061a:	2301      	movs	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e001      	b.n	8000624 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40020400 	.word	0x40020400
 8000638:	40020000 	.word	0x40020000

0800063c <DMA_ClearFlag>:
  *    Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
  *
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <DMA_ClearFlag+0x2c>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000654:	e002      	b.n	800065c <DMA_ClearFlag+0x20>
    DMA2->IFCR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <DMA_ClearFlag+0x30>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6053      	str	r3, [r2, #4]
  }
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40020400 	.word	0x40020400
 800066c:	40020000 	.word	0x40020000

08000670 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e080      	b.n	8000792 <GPIO_Init+0x122>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000690:	2201      	movs	r2, #1
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d16f      	bne.n	800078c <GPIO_Init+0x11c>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d003      	beq.n	80006bc <GPIO_Init+0x4c>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d136      	bne.n	800072a <GPIO_Init+0xba>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	2103      	movs	r1, #3
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	401a      	ands	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	4619      	mov	r1, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa01 f303 	lsl.w	r3, r1, r3
 80006e4:	431a      	orrs	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	889b      	ldrh	r3, [r3, #4]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	4013      	ands	r3, r2
 8000702:	b29a      	uxth	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	889b      	ldrh	r3, [r3, #4]
 800070c:	b29b      	uxth	r3, r3
 800070e:	b21a      	sxth	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	799b      	ldrb	r3, [r3, #6]
 8000714:	4619      	mov	r1, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	b29b      	uxth	r3, r3
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	b21b      	sxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b21b      	sxth	r3, r3
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	401a      	ands	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	601a      	str	r2, [r3, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	b29b      	uxth	r3, r3
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	2203      	movs	r2, #3
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	68ba      	ldr	r2, [r7, #8]
 800076e:	4013      	ands	r3, r2
 8000770:	60bb      	str	r3, [r7, #8]
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	79db      	ldrb	r3, [r3, #7]
 8000776:	461a      	mov	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4313      	orrs	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
      GPIOx->PUPDR = tmpreg;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	f67f af7b 	bls.w	8000690 <GPIO_Init+0x20>
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
      GPIOx->PUPDR = tmpreg;
    }
  }
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
 80007b4:	4613      	mov	r3, r2
 80007b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80007c0:	787a      	ldrb	r2, [r7, #1]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	f003 0307 	and.w	r3, r3, #7
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	b29b      	uxth	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3208      	adds	r2, #8
 80007e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	210f      	movs	r1, #15
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	ea02 0103 	and.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f100 0208 	add.w	r2, r0, #8
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	b29b      	uxth	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3208      	adds	r2, #8
 8000812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3208      	adds	r2, #8
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <NVIC_PriorityGroupConfig+0x24>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60d3      	str	r3, [r2, #12]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	230f      	movs	r3, #15
 8000876:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	78db      	ldrb	r3, [r3, #3]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d03a      	beq.n	80008f6 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <NVIC_Init+0xc0>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	43db      	mvns	r3, r3
 8000886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	f1c3 0304 	rsb	r3, r3, #4
 8000894:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa22 f303 	lsr.w	r3, r2, r3
 800089e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	461a      	mov	r2, r3
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4013      	ands	r3, r2
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	011b      	lsls	r3, r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80008c4:	4a18      	ldr	r2, [pc, #96]	; (8000928 <NVIC_Init+0xc4>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	6979      	ldr	r1, [r7, #20]
 80008cc:	b2c9      	uxtb	r1, r1
 80008ce:	4413      	add	r3, r2
 80008d0:	460a      	mov	r2, r1
 80008d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <NVIC_Init+0xc4>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	095b      	lsrs	r3, r3, #5
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	f003 031f 	and.w	r3, r3, #31
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80008f4:	e00f      	b.n	8000916 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008f6:	490c      	ldr	r1, [pc, #48]	; (8000928 <NVIC_Init+0xc4>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	095b      	lsrs	r3, r3, #5
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	2201      	movs	r2, #1
 800090c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800090e:	f100 0320 	add.w	r3, r0, #32
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000916:	bf00      	nop
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	e000e100 	.word	0xe000e100

0800092c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800092c:	b480      	push	{r7}
 800092e:	b08b      	sub	sp, #44	; 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000954:	4b8c      	ldr	r3, [pc, #560]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d007      	beq.n	8000974 <RCC_GetClocksFreq+0x48>
 8000964:	2b08      	cmp	r3, #8
 8000966:	d009      	beq.n	800097c <RCC_GetClocksFreq+0x50>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d130      	bne.n	80009ce <RCC_GetClocksFreq+0xa2>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a87      	ldr	r2, [pc, #540]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 8000970:	601a      	str	r2, [r3, #0]
      break;
 8000972:	e030      	b.n	80009d6 <RCC_GetClocksFreq+0xaa>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a85      	ldr	r2, [pc, #532]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 8000978:	601a      	str	r2, [r3, #0]
      break;
 800097a:	e02c      	b.n	80009d6 <RCC_GetClocksFreq+0xaa>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800097c:	4b82      	ldr	r3, [pc, #520]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000984:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000986:	4b80      	ldr	r3, [pc, #512]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800098e:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	0c9b      	lsrs	r3, r3, #18
 8000994:	3302      	adds	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <RCC_GetClocksFreq+0x7e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	4a7b      	ldr	r2, [pc, #492]	; (8000b90 <RCC_GetClocksFreq+0x264>)
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
 80009a8:	e00d      	b.n	80009c6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80009aa:	4b77      	ldr	r3, [pc, #476]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3301      	adds	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80009b6:	4a75      	ldr	r2, [pc, #468]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	fb02 f303 	mul.w	r3, r2, r3
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ca:	601a      	str	r2, [r3, #0]
      break;
 80009cc:	e003      	b.n	80009d6 <RCC_GetClocksFreq+0xaa>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a6e      	ldr	r2, [pc, #440]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 80009d2:	601a      	str	r2, [r3, #0]
      break;
 80009d4:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009d6:	4b6c      	ldr	r3, [pc, #432]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009de:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 80009e6:	4a6b      	ldr	r2, [pc, #428]	; (8000b94 <RCC_GetClocksFreq+0x268>)
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	40da      	lsrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009fe:	4b62      	ldr	r3, [pc, #392]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a06:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000a0e:	4a61      	ldr	r2, [pc, #388]	; (8000b94 <RCC_GetClocksFreq+0x268>)
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	40da      	lsrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a26:	4b58      	ldr	r3, [pc, #352]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000a2e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	0adb      	lsrs	r3, r3, #11
 8000a34:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000a36:	4a57      	ldr	r2, [pc, #348]	; (8000b94 <RCC_GetClocksFreq+0x268>)
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	60fb      	str	r3, [r7, #12]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	40da      	lsrs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000a4e:	4b4e      	ldr	r3, [pc, #312]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000a56:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp & 0x0F];
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <RCC_GetClocksFreq+0x26c>)
 8000a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	613b      	str	r3, [r7, #16]
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d009      	beq.n	8000a8c <RCC_GetClocksFreq+0x160>
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <RCC_GetClocksFreq+0x160>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	e003      	b.n	8000a94 <RCC_GetClocksFreq+0x168>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000a94:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000a9c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	0a5b      	lsrs	r3, r3, #9
 8000aa2:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp & 0x0F];
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	4a3b      	ldr	r2, [pc, #236]	; (8000b98 <RCC_GetClocksFreq+0x26c>)
 8000aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	613b      	str	r3, [r7, #16]
  if (((tmp & 0x10) != 0) && (presc != 0))
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d009      	beq.n	8000ad2 <RCC_GetClocksFreq+0x1a6>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <RCC_GetClocksFreq+0x1a6>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	e003      	b.n	8000ada <RCC_GetClocksFreq+0x1ae>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <RCC_GetClocksFreq+0x1c2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 8000aea:	619a      	str	r2, [r3, #24]
 8000aec:	e003      	b.n	8000af6 <RCC_GetClocksFreq+0x1ca>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <RCC_GetClocksFreq+0x1de>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	e003      	b.n	8000b12 <RCC_GetClocksFreq+0x1e6>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	61da      	str	r2, [r3, #28]
  }

  /* I2C3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C3SW) != RCC_CFGR3_I2C3SW)
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <RCC_GetClocksFreq+0x1fa>
  {
    /* I2C3 Clock is HSI Osc. */
    RCC_Clocks->I2C3CLK_Frequency = HSI_VALUE;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <RCC_GetClocksFreq+0x260>)
 8000b22:	621a      	str	r2, [r3, #32]
 8000b24:	e003      	b.n	8000b2e <RCC_GetClocksFreq+0x202>
  }
  else
  {
    /* I2C3 Clock is System Clock */
    RCC_Clocks->I2C3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	621a      	str	r2, [r3, #32]
  }
    
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00d      	beq.n	8000b56 <RCC_GetClocksFreq+0x22a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d108      	bne.n	8000b56 <RCC_GetClocksFreq+0x22a>
  && (apb2presc == ahbpresc)) 
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d104      	bne.n	8000b56 <RCC_GetClocksFreq+0x22a>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	005a      	lsls	r2, r3, #1
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
 8000b54:	e003      	b.n	8000b5e <RCC_GetClocksFreq+0x232>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_Clocks->TIM3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
#endif /* STM32F303xE */
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_HRTIM1SW) == RCC_CFGR3_HRTIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <RCC_GetClocksFreq+0x25c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d018      	beq.n	8000b9c <RCC_GetClocksFreq+0x270>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d113      	bne.n	8000b9c <RCC_GetClocksFreq+0x270>
  && (apb2presc == ahbpresc)) 
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d10f      	bne.n	8000b9c <RCC_GetClocksFreq+0x270>
  {
    /* HRTIM1 Clock is 2 * pllclk */
    RCC_Clocks->HRTIM1CLK_Frequency = pllclk * 2;
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	005a      	lsls	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
 8000b84:	e00e      	b.n	8000ba4 <RCC_GetClocksFreq+0x278>
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	007a1200 	.word	0x007a1200
 8000b90:	003d0900 	.word	0x003d0900
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000010 	.word	0x20000010
  }
  else
  {
    /* HRTIM1 Clock is APB2 clock. */
    RCC_Clocks->HRTIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000ba4:	4b8f      	ldr	r3, [pc, #572]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00d      	beq.n	8000bcc <RCC_GetClocksFreq+0x2a0>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d108      	bne.n	8000bcc <RCC_GetClocksFreq+0x2a0>
  && (apb2presc == ahbpresc))
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d104      	bne.n	8000bcc <RCC_GetClocksFreq+0x2a0>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	005a      	lsls	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bca:	e003      	b.n	8000bd4 <RCC_GetClocksFreq+0x2a8>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* TIM15CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM15SW) == RCC_CFGR3_TIM15SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000bd4:	4b83      	ldr	r3, [pc, #524]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00d      	beq.n	8000bfc <RCC_GetClocksFreq+0x2d0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d108      	bne.n	8000bfc <RCC_GetClocksFreq+0x2d0>
  && (apb2presc == ahbpresc))
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d104      	bne.n	8000bfc <RCC_GetClocksFreq+0x2d0>
  {
    /* TIM15 Clock is 2 * pllclk */
    RCC_Clocks->TIM15CLK_Frequency = pllclk * 2;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	005a      	lsls	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bfa:	e003      	b.n	8000c04 <RCC_GetClocksFreq+0x2d8>
  }
  else
  {
    /* TIM15 Clock is APB2 clock. */
    RCC_Clocks->TIM15CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	64da      	str	r2, [r3, #76]	; 0x4c
  }
    
    /* TIM16CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM16SW) == RCC_CFGR3_TIM16SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c04:	4b77      	ldr	r3, [pc, #476]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00d      	beq.n	8000c2c <RCC_GetClocksFreq+0x300>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d108      	bne.n	8000c2c <RCC_GetClocksFreq+0x300>
  && (apb2presc == ahbpresc))
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d104      	bne.n	8000c2c <RCC_GetClocksFreq+0x300>
  {
    /* TIM16 Clock is 2 * pllclk */
    RCC_Clocks->TIM16CLK_Frequency = pllclk * 2;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	005a      	lsls	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	651a      	str	r2, [r3, #80]	; 0x50
 8000c2a:	e003      	b.n	8000c34 <RCC_GetClocksFreq+0x308>
  }
  else
  {
    /* TIM16 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	651a      	str	r2, [r3, #80]	; 0x50
  }

    /* TIM17CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM17SW) == RCC_CFGR3_TIM17SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c34:	4b6b      	ldr	r3, [pc, #428]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00d      	beq.n	8000c5c <RCC_GetClocksFreq+0x330>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d108      	bne.n	8000c5c <RCC_GetClocksFreq+0x330>
  && (apb2presc == ahbpresc))
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d104      	bne.n	8000c5c <RCC_GetClocksFreq+0x330>
  {
    /* TIM17 Clock is 2 * pllclk */
    RCC_Clocks->TIM17CLK_Frequency = pllclk * 2;
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	005a      	lsls	r2, r3, #1
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	655a      	str	r2, [r3, #84]	; 0x54
 8000c5a:	e003      	b.n	8000c64 <RCC_GetClocksFreq+0x338>
  }
  else
  {
    /* TIM17 Clock is APB2 clock. */
    RCC_Clocks->TIM16CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  
  /* TIM20CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM20SW) == RCC_CFGR3_TIM20SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c64:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00d      	beq.n	8000c8c <RCC_GetClocksFreq+0x360>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d108      	bne.n	8000c8c <RCC_GetClocksFreq+0x360>
  && (apb2presc == ahbpresc))
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d104      	bne.n	8000c8c <RCC_GetClocksFreq+0x360>
  {
    /* TIM20 Clock is 2 * pllclk */
    RCC_Clocks->TIM20CLK_Frequency = pllclk * 2;
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	005a      	lsls	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	659a      	str	r2, [r3, #88]	; 0x58
 8000c8a:	e003      	b.n	8000c94 <RCC_GetClocksFreq+0x368>
  }
  else
  {
    /* TIM20 Clock is APB2 clock. */
    RCC_Clocks->TIM20CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	659a      	str	r2, [r3, #88]	; 0x58
  }
    
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000c94:	4b53      	ldr	r3, [pc, #332]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <RCC_GetClocksFreq+0x37e>
  {
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F301x8) || defined(STM32F302x8)
    /* USART1 Clock is PCLK1 instead of PCLK2 (limitation described in the 
       STM32F302/01/34 x4/x6/x8 respective erratasheets) */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca8:	e01e      	b.n	8000ce8 <RCC_GetClocksFreq+0x3bc>
#else
    /* USART Clock is PCLK2 */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
#endif  
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d104      	bne.n	8000cc0 <RCC_GetClocksFreq+0x394>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cbe:	e013      	b.n	8000ce8 <RCC_GetClocksFreq+0x3bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000cc0:	4b48      	ldr	r3, [pc, #288]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d104      	bne.n	8000cd6 <RCC_GetClocksFreq+0x3aa>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd4:	e008      	b.n	8000ce8 <RCC_GetClocksFreq+0x3bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000cd6:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d102      	bne.n	8000ce8 <RCC_GetClocksFreq+0x3bc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a40      	ldr	r2, [pc, #256]	; (8000de8 <RCC_GetClocksFreq+0x4bc>)
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <RCC_GetClocksFreq+0x3d2>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cfc:	e021      	b.n	8000d42 <RCC_GetClocksFreq+0x416>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000cfe:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0a:	d104      	bne.n	8000d16 <RCC_GetClocksFreq+0x3ea>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d14:	e015      	b.n	8000d42 <RCC_GetClocksFreq+0x416>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d22:	d104      	bne.n	8000d2e <RCC_GetClocksFreq+0x402>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d2c:	e009      	b.n	8000d42 <RCC_GetClocksFreq+0x416>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d3a:	d102      	bne.n	8000d42 <RCC_GetClocksFreq+0x416>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <RCC_GetClocksFreq+0x4bc>)
 8000d40:	63da      	str	r2, [r3, #60]	; 0x3c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d104      	bne.n	8000d58 <RCC_GetClocksFreq+0x42c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	641a      	str	r2, [r3, #64]	; 0x40
 8000d56:	e021      	b.n	8000d9c <RCC_GetClocksFreq+0x470>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000d64:	d104      	bne.n	8000d70 <RCC_GetClocksFreq+0x444>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6e:	e015      	b.n	8000d9c <RCC_GetClocksFreq+0x470>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000d7c:	d104      	bne.n	8000d88 <RCC_GetClocksFreq+0x45c>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
 8000d86:	e009      	b.n	8000d9c <RCC_GetClocksFreq+0x470>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000d94:	d102      	bne.n	8000d9c <RCC_GetClocksFreq+0x470>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <RCC_GetClocksFreq+0x4bc>)
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d104      	bne.n	8000db2 <RCC_GetClocksFreq+0x486>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	645a      	str	r2, [r3, #68]	; 0x44
 8000db0:	e026      	b.n	8000e00 <RCC_GetClocksFreq+0x4d4>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000dbe:	d104      	bne.n	8000dca <RCC_GetClocksFreq+0x49e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	645a      	str	r2, [r3, #68]	; 0x44
 8000dc8:	e01a      	b.n	8000e00 <RCC_GetClocksFreq+0x4d4>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <RCC_GetClocksFreq+0x4b8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000dd6:	d109      	bne.n	8000dec <RCC_GetClocksFreq+0x4c0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
 8000de0:	e00e      	b.n	8000e00 <RCC_GetClocksFreq+0x4d4>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	007a1200 	.word	0x007a1200
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <RCC_GetClocksFreq+0x53c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000df4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000df8:	d102      	bne.n	8000e00 <RCC_GetClocksFreq+0x4d4>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <RCC_GetClocksFreq+0x540>)
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <RCC_GetClocksFreq+0x53c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d104      	bne.n	8000e16 <RCC_GetClocksFreq+0x4ea>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	649a      	str	r2, [r3, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000e14:	e021      	b.n	8000e5a <RCC_GetClocksFreq+0x52e>
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <RCC_GetClocksFreq+0x53c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e22:	d104      	bne.n	8000e2e <RCC_GetClocksFreq+0x502>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	649a      	str	r2, [r3, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000e2c:	e015      	b.n	8000e5a <RCC_GetClocksFreq+0x52e>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <RCC_GetClocksFreq+0x53c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e3a:	d104      	bne.n	8000e46 <RCC_GetClocksFreq+0x51a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e42:	649a      	str	r2, [r3, #72]	; 0x48
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000e44:	e009      	b.n	8000e5a <RCC_GetClocksFreq+0x52e>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <RCC_GetClocksFreq+0x53c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000e52:	d102      	bne.n	8000e5a <RCC_GetClocksFreq+0x52e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <RCC_GetClocksFreq+0x540>)
 8000e58:	649a      	str	r2, [r3, #72]	; 0x48
  } 
}
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	007a1200 	.word	0x007a1200

08000e70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000e82:	490a      	ldr	r1, [pc, #40]	; (8000eac <RCC_AHBPeriphClockCmd+0x3c>)
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <RCC_AHBPeriphClockCmd+0x3c>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000e8e:	e006      	b.n	8000e9e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000e90:	4906      	ldr	r1, [pc, #24]	; (8000eac <RCC_AHBPeriphClockCmd+0x3c>)
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <RCC_AHBPeriphClockCmd+0x3c>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	614b      	str	r3, [r1, #20]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ec2:	490a      	ldr	r1, [pc, #40]	; (8000eec <RCC_APB2PeriphClockCmd+0x3c>)
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <RCC_APB2PeriphClockCmd+0x3c>)
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000ece:	e006      	b.n	8000ede <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ed0:	4906      	ldr	r1, [pc, #24]	; (8000eec <RCC_APB2PeriphClockCmd+0x3c>)
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <RCC_APB2PeriphClockCmd+0x3c>)
 8000ed4:	699a      	ldr	r2, [r3, #24]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	4013      	ands	r3, r2
 8000edc:	618b      	str	r3, [r1, #24]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f02:	490a      	ldr	r1, [pc, #40]	; (8000f2c <RCC_APB1PeriphClockCmd+0x3c>)
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <RCC_APB1PeriphClockCmd+0x3c>)
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f0e:	e006      	b.n	8000f1e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f10:	4906      	ldr	r1, [pc, #24]	; (8000f2c <RCC_APB1PeriphClockCmd+0x3c>)
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <RCC_APB1PeriphClockCmd+0x3c>)
 8000f14:	69da      	ldr	r2, [r3, #28]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61cb      	str	r3, [r1, #28]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000f42:	490a      	ldr	r1, [pc, #40]	; (8000f6c <RCC_APB2PeriphResetCmd+0x3c>)
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <RCC_APB2PeriphResetCmd+0x3c>)
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000f4e:	e006      	b.n	8000f5e <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <RCC_APB2PeriphResetCmd+0x3c>)
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <RCC_APB2PeriphResetCmd+0x3c>)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f82:	490a      	ldr	r1, [pc, #40]	; (8000fac <RCC_APB1PeriphResetCmd+0x3c>)
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <RCC_APB1PeriphResetCmd+0x3c>)
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000f8e:	e006      	b.n	8000f9e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f90:	4906      	ldr	r1, [pc, #24]	; (8000fac <RCC_APB1PeriphResetCmd+0x3c>)
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <RCC_APB1PeriphResetCmd+0x3c>)
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	610b      	str	r3, [r1, #16]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /* Configuring the SPI in master mode */
  if(SPI_InitStruct->SPI_Mode == SPI_Mode_Master)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	885b      	ldrh	r3, [r3, #2]
 8000fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fc6:	d136      	bne.n	8001036 <SPI_Init+0x86>
  {
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000fd4:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	885b      	ldrh	r3, [r3, #2]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	88d9      	ldrh	r1, [r3, #6]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	891b      	ldrh	r3, [r3, #8]
 8000fea:	430b      	orrs	r3, r1
 8000fec:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	8958      	ldrh	r0, [r3, #10]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	899b      	ldrh	r3, [r3, #12]
 8000ff6:	4303      	orrs	r3, r0
 8000ff8:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 8000ffe:	4303      	orrs	r3, r0
 8001000:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
 8001002:	430b      	orrs	r3, r1
 8001004:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) |
 8001006:	4313      	orrs	r3, r2
 8001008:	b29a      	uxth	r2, r3
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	4313      	orrs	r3, r2
 800100e:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) |
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));
    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	89fa      	ldrh	r2, [r7, #14]
 8001014:	801a      	strh	r2, [r3, #0]
    /*-------------------------Data Size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001022:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	889a      	ldrh	r2, [r3, #4]
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	4313      	orrs	r3, r2
 800102c:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	89fa      	ldrh	r2, [r7, #14]
 8001032:	809a      	strh	r2, [r3, #4]
 8001034:	e035      	b.n	80010a2 <SPI_Init+0xf2>
  /* Configuring the SPI in slave mode */
  else
  {
/*---------------------------- Data size Configuration -----------------------*/
    /* Get the SPIx CR2 value */
    tmpreg = SPIx->CR2;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	81fb      	strh	r3, [r7, #14]
    /* Clear DS[3:0] bits */
    tmpreg &= (uint16_t)~SPI_CR2_DS;
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001042:	81fb      	strh	r3, [r7, #14]
    /* Configure SPIx: Data Size */
    tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	889a      	ldrh	r2, [r3, #4]
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	4313      	orrs	r3, r2
 800104c:	81fb      	strh	r3, [r7, #14]
    /* Write to SPIx CR2 */
    SPIx->CR2 = tmpreg;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	89fa      	ldrh	r2, [r7, #14]
 8001052:	809a      	strh	r2, [r3, #4]
/*---------------------------- SPIx CR1 Configuration ------------------------*/
    /* Get the SPIx CR1 value */
    tmpreg = SPIx->CR1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	81fb      	strh	r3, [r7, #14]
    /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    tmpreg &= CR1_CLEAR_MASK;
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001060:	81fb      	strh	r3, [r7, #14]
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	885b      	ldrh	r3, [r3, #2]
 800106a:	4313      	orrs	r3, r2
 800106c:	b29a      	uxth	r2, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	88d9      	ldrh	r1, [r3, #6]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	891b      	ldrh	r3, [r3, #8]
 8001076:	430b      	orrs	r3, r1
 8001078:	b299      	uxth	r1, r3
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	8958      	ldrh	r0, [r3, #10]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	899b      	ldrh	r3, [r3, #12]
 8001082:	4303      	orrs	r3, r0
 8001084:	b298      	uxth	r0, r3
                         SPI_InitStruct->SPI_FirstBit)));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	89db      	ldrh	r3, [r3, #14]
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
 800108a:	4303      	orrs	r3, r0
 800108c:	b29b      	uxth	r3, r3
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
 800108e:	430b      	orrs	r3, r1
 8001090:	b29b      	uxth	r3, r3
    /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    /* Set LSBFirst bit according to SPI_FirstBit value */
    /* Set BR bits according to SPI_BaudRatePrescaler value */
    /* Set CPOL bit according to SPI_CPOL value */
    /* Set CPHA bit according to SPI_CPHA value */
    tmpreg |= (uint16_t)((uint16_t)(SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode) | 
 8001092:	4313      	orrs	r3, r2
 8001094:	b29a      	uxth	r2, r3
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	4313      	orrs	r3, r2
 800109a:	81fb      	strh	r3, [r7, #14]
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA) | 
                         (uint16_t)((uint16_t)(SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler) | 
                         SPI_InitStruct->SPI_FirstBit)));

    /* Write to SPIx CR1 */
    SPIx->CR1 = tmpreg;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	89fa      	ldrh	r2, [r7, #14]
 80010a0:	801a      	strh	r2, [r3, #0]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8b9b      	ldrh	r3, [r3, #28]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	8a1a      	ldrh	r2, [r3, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	821a      	strh	r2, [r3, #16]
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80010ea:	e007      	b.n	80010fc <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	801a      	strh	r2, [r3, #0]
  }
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SPI_I2S_SendData16>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	819a      	strh	r2, [r3, #12]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <SPI_I2S_ReceiveData16>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2,  3 or 4 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{  
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  return SPIx->DR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	899b      	ldrh	r3, [r3, #12]
 8001134:	b29b      	uxth	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	891b      	ldrh	r3, [r3, #8]
 8001158:	b29a      	uxth	r2, r3
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	4013      	ands	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e001      	b.n	800116e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16,17 or 20 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <TIM_DeInit+0x144>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d10a      	bne.n	80011a2 <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800118c:	2101      	movs	r1, #1
 800118e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001192:	f7ff fecd 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001196:	2100      	movs	r1, #0
 8001198:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800119c:	f7ff fec8 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 80011a0:	e08a      	b.n	80012b8 <TIM_DeInit+0x13c>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d108      	bne.n	80011bc <TIM_DeInit+0x40>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80011aa:	2101      	movs	r1, #1
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fedf 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80011b2:	2100      	movs	r1, #0
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fedb 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 80011ba:	e07d      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a41      	ldr	r2, [pc, #260]	; (80012c4 <TIM_DeInit+0x148>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d108      	bne.n	80011d6 <TIM_DeInit+0x5a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2002      	movs	r0, #2
 80011c8:	f7ff fed2 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff fece 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 80011d4:	e070      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <TIM_DeInit+0x14c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d108      	bne.n	80011f0 <TIM_DeInit+0x74>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80011de:	2101      	movs	r1, #1
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fec5 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2004      	movs	r0, #4
 80011ea:	f7ff fec1 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 80011ee:	e063      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }   
  else if (TIMx == TIM6)  
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a36      	ldr	r2, [pc, #216]	; (80012cc <TIM_DeInit+0x150>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d108      	bne.n	800120a <TIM_DeInit+0x8e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80011f8:	2101      	movs	r1, #1
 80011fa:	2010      	movs	r0, #16
 80011fc:	f7ff feb8 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001200:	2100      	movs	r1, #0
 8001202:	2010      	movs	r0, #16
 8001204:	f7ff feb4 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 8001208:	e056      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <TIM_DeInit+0x154>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d108      	bne.n	8001224 <TIM_DeInit+0xa8>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001212:	2101      	movs	r1, #1
 8001214:	2020      	movs	r0, #32
 8001216:	f7ff feab 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800121a:	2100      	movs	r1, #0
 800121c:	2020      	movs	r0, #32
 800121e:	f7ff fea7 	bl	8000f70 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 8001222:	e049      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a2b      	ldr	r2, [pc, #172]	; (80012d4 <TIM_DeInit+0x158>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d10a      	bne.n	8001242 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800122c:	2101      	movs	r1, #1
 800122e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001232:	f7ff fe7d 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001236:	2100      	movs	r1, #0
 8001238:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800123c:	f7ff fe78 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 8001240:	e03a      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }    
  else if (TIMx == TIM15)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <TIM_DeInit+0x15c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10a      	bne.n	8001260 <TIM_DeInit+0xe4>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800124a:	2101      	movs	r1, #1
 800124c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001250:	f7ff fe6e 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
 8001254:	2100      	movs	r1, #0
 8001256:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800125a:	f7ff fe69 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 800125e:	e02b      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM15)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);  
  }  
  else if (TIMx == TIM16) 
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <TIM_DeInit+0x160>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d10a      	bne.n	800127e <TIM_DeInit+0x102>
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001268:	2101      	movs	r1, #1
 800126a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800126e:	f7ff fe5f 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
 8001272:	2100      	movs	r1, #0
 8001274:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001278:	f7ff fe5a 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 800127c:	e01c      	b.n	80012b8 <TIM_DeInit+0x13c>
  else if (TIMx == TIM16) 
  {       
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);  
  } 
  else if (TIMx == TIM17) 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <TIM_DeInit+0x164>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10a      	bne.n	800129c <TIM_DeInit+0x120>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001286:	2101      	movs	r1, #1
 8001288:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800128c:	f7ff fe50 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
 8001290:	2100      	movs	r1, #0
 8001292:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001296:	f7ff fe4b 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
    }   
  }
}
 800129a:	e00d      	b.n	80012b8 <TIM_DeInit+0x13c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE); 
  }    
  else
  { 
    if (TIMx == TIM20) 
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <TIM_DeInit+0x168>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d109      	bne.n	80012b8 <TIM_DeInit+0x13c>
    {     
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, ENABLE);
 80012a4:	2101      	movs	r1, #1
 80012a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012aa:	f7ff fe41 	bl	8000f30 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM20, DISABLE); 
 80012ae:	2100      	movs	r1, #0
 80012b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012b4:	f7ff fe3c 	bl	8000f30 <RCC_APB2PeriphResetCmd>
    }   
  }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012c00 	.word	0x40012c00
 80012c4:	40000400 	.word	0x40000400
 80012c8:	40000800 	.word	0x40000800
 80012cc:	40001000 	.word	0x40001000
 80012d0:	40001400 	.word	0x40001400
 80012d4:	40013400 	.word	0x40013400
 80012d8:	40014000 	.word	0x40014000
 80012dc:	40014400 	.word	0x40014400
 80012e0:	40014800 	.word	0x40014800
 80012e4:	40015000 	.word	0x40015000

080012e8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <TIM_TimeBaseInit+0xd8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <TIM_TimeBaseInit+0x44>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <TIM_TimeBaseInit+0xdc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00f      	beq.n	800132c <TIM_TimeBaseInit+0x44>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001312:	d00b      	beq.n	800132c <TIM_TimeBaseInit+0x44>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a2c      	ldr	r2, [pc, #176]	; (80013c8 <TIM_TimeBaseInit+0xe0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM3) || (TIMx == TIM4) || (TIMx == TIM20)) 
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <TIM_TimeBaseInit+0xe4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d003      	beq.n	800132c <TIM_TimeBaseInit+0x44>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <TIM_TimeBaseInit+0xe8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d108      	bne.n	800133e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001332:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	885a      	ldrh	r2, [r3, #2]
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	4313      	orrs	r3, r2
 800133c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <TIM_TimeBaseInit+0xec>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00c      	beq.n	8001360 <TIM_TimeBaseInit+0x78>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <TIM_TimeBaseInit+0xf0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d008      	beq.n	8001360 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001354:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	891a      	ldrh	r2, [r3, #8]
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	4313      	orrs	r3, r2
 800135e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	89fa      	ldrh	r2, [r7, #14]
 8001364:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <TIM_TimeBaseInit+0xd8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <TIM_TimeBaseInit+0xbe>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <TIM_TimeBaseInit+0xdc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00f      	beq.n	80013a6 <TIM_TimeBaseInit+0xbe>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <TIM_TimeBaseInit+0xf4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00b      	beq.n	80013a6 <TIM_TimeBaseInit+0xbe>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <TIM_TimeBaseInit+0xf8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <TIM_TimeBaseInit+0xbe>
      (TIMx == TIM16) || (TIMx == TIM17)|| (TIMx == TIM20))  
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <TIM_TimeBaseInit+0xfc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d003      	beq.n	80013a6 <TIM_TimeBaseInit+0xbe>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <TIM_TimeBaseInit+0xe8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d103      	bne.n	80013ae <TIM_TimeBaseInit+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	895a      	ldrh	r2, [r3, #10]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	615a      	str	r2, [r3, #20]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40012c00 	.word	0x40012c00
 80013c4:	40013400 	.word	0x40013400
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40015000 	.word	0x40015000
 80013d4:	40001000 	.word	0x40001000
 80013d8:	40001400 	.word	0x40001400
 80013dc:	40014000 	.word	0x40014000
 80013e0:	40014400 	.word	0x40014400
 80013e4:	40014800 	.word	0x40014800

080013e8 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 6 ,7 ,8, 15, 16, 17 or 20 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001442:	e007      	b.n	8001454 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	801a      	strh	r2, [r3, #0]
  }
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <TIM_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001482:	e007      	b.n	8001494 <TIM_ITConfig+0x34>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	43d2      	mvns	r2, r2
 800148c:	b292      	uxth	r2, r2
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
  }
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	611a      	str	r2, [r3, #16]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	817b      	strh	r3, [r7, #10]
 80014d6:	460b      	mov	r3, r1
 80014d8:	813b      	strh	r3, [r7, #8]
 80014da:	4613      	mov	r3, r2
 80014dc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80014fc:	8afb      	ldrh	r3, [r7, #22]
 80014fe:	f023 0307 	bic.w	r3, r3, #7
 8001502:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001504:	8afa      	ldrh	r2, [r7, #22]
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	4313      	orrs	r3, r2
 800150a:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800150c:	8abb      	ldrh	r3, [r7, #20]
 800150e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001518:	8abb      	ldrh	r3, [r7, #20]
 800151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8001524:	8a7b      	ldrh	r3, [r7, #18]
 8001526:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800152a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	b29a      	uxth	r2, r3
 8001532:	893b      	ldrh	r3, [r7, #8]
 8001534:	4313      	orrs	r3, r2
 8001536:	b29a      	uxth	r2, r3
 8001538:	8a7b      	ldrh	r3, [r7, #18]
 800153a:	4313      	orrs	r3, r2
 800153c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800153e:	8afa      	ldrh	r2, [r7, #22]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001544:	8aba      	ldrh	r2, [r7, #20]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800154a:	8a7a      	ldrh	r2, [r7, #18]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	621a      	str	r2, [r3, #32]
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09c      	sub	sp, #112	; 0x70
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800156a:	2300      	movs	r3, #0
 800156c:	66bb      	str	r3, [r7, #104]	; 0x68
 800156e:	2300      	movs	r3, #0
 8001570:	667b      	str	r3, [r7, #100]	; 0x64
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 0201 	bic.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	667b      	str	r3, [r7, #100]	; 0x64
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001586:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158a:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001592:	4313      	orrs	r3, r2
 8001594:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800159a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	667b      	str	r3, [r7, #100]	; 0x64
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80015a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015a4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015a8:	f023 030c 	bic.w	r3, r3, #12
 80015ac:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015bc:	4313      	orrs	r3, r2
 80015be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015c0:	4313      	orrs	r3, r2
 80015c2:	667b      	str	r3, [r7, #100]	; 0x64
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015c8:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80015d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d6:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015de:	4313      	orrs	r3, r2
 80015e0:	667b      	str	r3, [r7, #100]	; 0x64
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015e6:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f99d 	bl	800092c <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <USART_Init+0x168>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d102      	bne.n	8001600 <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80015fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80015fe:	e016      	b.n	800162e <USART_Init+0xd2>
  }
  else if (USARTx == USART2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <USART_Init+0x16c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	66bb      	str	r3, [r7, #104]	; 0x68
 800160c:	e00f      	b.n	800162e <USART_Init+0xd2>
  }
  else if (USARTx == USART3)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <USART_Init+0x170>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d102      	bne.n	800161c <USART_Init+0xc0>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8001616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001618:	66bb      	str	r3, [r7, #104]	; 0x68
 800161a:	e008      	b.n	800162e <USART_Init+0xd2>
  }
  else if (USARTx == UART4)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a2c      	ldr	r2, [pc, #176]	; (80016d0 <USART_Init+0x174>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d102      	bne.n	800162a <USART_Init+0xce>
  {
    apbclock = RCC_ClocksStatus.UART4CLK_Frequency;
 8001624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001626:	66bb      	str	r3, [r7, #104]	; 0x68
 8001628:	e001      	b.n	800162e <USART_Init+0xd2>
  }
  else 
  {
    apbclock = RCC_ClocksStatus.UART5CLK_Frequency;
 800162a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800162c:	66bb      	str	r3, [r7, #104]	; 0x68
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d011      	beq.n	800165e <USART_Init+0x102>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800163a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800163c:	005a      	lsls	r2, r3, #1
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8001648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fbb3 f1f2 	udiv	r1, r3, r2
 8001654:	fb02 f201 	mul.w	r2, r2, r1
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	667b      	str	r3, [r7, #100]	; 0x64
 800165c:	e00e      	b.n	800167c <USART_Init+0x120>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001670:	fbb3 f1f2 	udiv	r1, r3, r2
 8001674:	fb02 f201 	mul.w	r2, r2, r1
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	667b      	str	r3, [r7, #100]	; 0x64
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	085a      	lsrs	r2, r3, #1
 8001682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001684:	429a      	cmp	r2, r3
 8001686:	d802      	bhi.n	800168e <USART_Init+0x132>
  {
    divider++;
 8001688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800168a:	3301      	adds	r3, #1
 800168c:	66fb      	str	r3, [r7, #108]	; 0x6c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <USART_Init+0x156>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80016a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80016a6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80016aa:	4013      	ands	r3, r2
 80016ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016ae:	4313      	orrs	r3, r2
 80016b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 80016b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	819a      	strh	r2, [r3, #12]
}
 80016ba:	bf00      	nop
 80016bc:	3770      	adds	r7, #112	; 0x70
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40004400 	.word	0x40004400
 80016cc:	40004800 	.word	0x40004800
 80016d0:	40004c00 	.word	0x40004c00

080016d4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80016f2:	e005      	b.n	8001700 <USART_Cmd+0x2c>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 0201 	bic.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	601a      	str	r2, [r3, #0]
  }
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *         This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <USART_DMACmd+0x22>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
  }
}
 8001750:	e006      	b.n	8001760 <USART_DMACmd+0x30>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
  }
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	121b      	asrs	r3, r3, #8
 8001792:	b2db      	uxtb	r3, r3
 8001794:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 800179c:	2201      	movs	r2, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d103      	bne.n	80017b4 <USART_ITConfig+0x48>
  {
    usartxbase += 0x04;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	3304      	adds	r3, #4
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e005      	b.n	80017c0 <USART_ITConfig+0x54>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d102      	bne.n	80017c0 <USART_ITConfig+0x54>
  {
    usartxbase += 0x08;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3308      	adds	r3, #8
 80017be:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <USART_ITConfig+0x68>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	6811      	ldr	r1, [r2, #0]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017d2:	e006      	b.n	80017e2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	6811      	ldr	r1, [r2, #0]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	43d2      	mvns	r2, r2
 80017de:	400a      	ands	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
  }
}
 80017e2:	bf00      	nop
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e001      	b.n	8001814 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <USB_LP_CAN_RX0_IRQHandler>:
}



void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  CAN_Receive(CAN1, CAN_FIFO0, &canMessageBuffer.CanRxMsgBuffer[canMessageBuffer.head]);
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <USB_LP_CAN_RX0_IRQHandler+0x48>)
 800182a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4a0d      	ldr	r2, [pc, #52]	; (800186c <USB_LP_CAN_RX0_IRQHandler+0x48>)
 8001838:	4413      	add	r3, r2
 800183a:	461a      	mov	r2, r3
 800183c:	2100      	movs	r1, #0
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <USB_LP_CAN_RX0_IRQHandler+0x4c>)
 8001840:	f7fe fcc2 	bl	80001c8 <CAN_Receive>

  canMessageBuffer.head = (canMessageBuffer.head + 1) % CAN_BUFFER_SIZE;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <USB_LP_CAN_RX0_IRQHandler+0x48>)
 8001846:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <USB_LP_CAN_RX0_IRQHandler+0x50>)
 800184e:	fb83 2301 	smull	r2, r3, r3, r1
 8001852:	109a      	asrs	r2, r3, #2
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	1ad2      	subs	r2, r2, r3
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1aca      	subs	r2, r1, r3
 8001862:	4b02      	ldr	r3, [pc, #8]	; (800186c <USB_LP_CAN_RX0_IRQHandler+0x48>)
 8001864:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8


}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000078 	.word	0x20000078
 8001870:	40006400 	.word	0x40006400
 8001874:	66666667 	.word	0x66666667

08001878 <gpioConfiguration>:
#include <stdio.h>



void gpioConfiguration(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	digitalInit(GPIOA, GPIO_Pin_4,  OUTPUT, &PWR_CTRL);
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <gpioConfiguration+0xe4>)
 800187e:	2200      	movs	r2, #0
 8001880:	2110      	movs	r1, #16
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f000 f889 	bl	800199c <digitalInit>
	digitalLo(PWR_CTRL);
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <gpioConfiguration+0xe4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a33      	ldr	r2, [pc, #204]	; (800195c <gpioConfiguration+0xe4>)
 8001890:	8892      	ldrh	r2, [r2, #4]
 8001892:	851a      	strh	r2, [r3, #40]	; 0x28

	digitalInit(GPIOA, GPIO_Pin_8,  OUTPUT, &POT1_SYNC);
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <gpioConfiguration+0xe8>)
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 f87c 	bl	800199c <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_9,  OUTPUT, &POT2_SYNC);
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <gpioConfiguration+0xec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f000 f874 	bl	800199c <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_10,  OUTPUT, &POT3_SYNC);
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <gpioConfiguration+0xf0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f000 f86c 	bl	800199c <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_11,  OUTPUT, &POT4_SYNC);
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <gpioConfiguration+0xf4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f000 f864 	bl	800199c <digitalInit>
	digitalInit(GPIOA, GPIO_Pin_12,  OUTPUT, &POT5_SYNC);
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <gpioConfiguration+0xf8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f000 f85c 	bl	800199c <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_0,  OUTPUT, &POT6_SYNC);
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <gpioConfiguration+0xfc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	2101      	movs	r1, #1
 80018ea:	4823      	ldr	r0, [pc, #140]	; (8001978 <gpioConfiguration+0x100>)
 80018ec:	f000 f856 	bl	800199c <digitalInit>

	digitalInit(GPIOB, GPIO_Pin_1,  INPUT, &POT1_RDY);
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <gpioConfiguration+0x104>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	2102      	movs	r1, #2
 80018f6:	4820      	ldr	r0, [pc, #128]	; (8001978 <gpioConfiguration+0x100>)
 80018f8:	f000 f850 	bl	800199c <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_2,  INPUT, &POT2_RDY);
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <gpioConfiguration+0x108>)
 80018fe:	2201      	movs	r2, #1
 8001900:	2104      	movs	r1, #4
 8001902:	481d      	ldr	r0, [pc, #116]	; (8001978 <gpioConfiguration+0x100>)
 8001904:	f000 f84a 	bl	800199c <digitalInit>
	digitalInit(GPIOC, GPIO_Pin_13,  INPUT, &POT3_RDY);
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <gpioConfiguration+0x10c>)
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001910:	481d      	ldr	r0, [pc, #116]	; (8001988 <gpioConfiguration+0x110>)
 8001912:	f000 f843 	bl	800199c <digitalInit>

	digitalInit(GPIOC, GPIO_Pin_14,  OUTPUT, &POT4_INDEP);
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <gpioConfiguration+0x114>)
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191e:	481a      	ldr	r0, [pc, #104]	; (8001988 <gpioConfiguration+0x110>)
 8001920:	f000 f83c 	bl	800199c <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_10,  OUTPUT, &POT5_INDEP);
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <gpioConfiguration+0x118>)
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	4812      	ldr	r0, [pc, #72]	; (8001978 <gpioConfiguration+0x100>)
 800192e:	f000 f835 	bl	800199c <digitalInit>
	digitalInit(GPIOB, GPIO_Pin_11,  OUTPUT, &POT6_INDEP);
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <gpioConfiguration+0x11c>)
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193a:	480f      	ldr	r0, [pc, #60]	; (8001978 <gpioConfiguration+0x100>)
 800193c:	f000 f82e 	bl	800199c <digitalInit>

	digitalInit(GPIOB, GPIO_Pin_12,  OUTPUT, &SPI2_RESET);
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <gpioConfiguration+0x120>)
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <gpioConfiguration+0x100>)
 800194a:	f000 f827 	bl	800199c <digitalInit>

	digitalLo(PWR_CTRL);
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <gpioConfiguration+0xe4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a02      	ldr	r2, [pc, #8]	; (800195c <gpioConfiguration+0xe4>)
 8001954:	8892      	ldrh	r2, [r2, #4]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000184 	.word	0x20000184
 8001960:	200001c8 	.word	0x200001c8
 8001964:	200001d8 	.word	0x200001d8
 8001968:	200001d0 	.word	0x200001d0
 800196c:	2000016c 	.word	0x2000016c
 8001970:	200001e0 	.word	0x200001e0
 8001974:	2000018c 	.word	0x2000018c
 8001978:	48000400 	.word	0x48000400
 800197c:	200001a4 	.word	0x200001a4
 8001980:	20000174 	.word	0x20000174
 8001984:	200001ac 	.word	0x200001ac
 8001988:	48000800 	.word	0x48000800
 800198c:	2000019c 	.word	0x2000019c
 8001990:	20000194 	.word	0x20000194
 8001994:	2000017c 	.word	0x2000017c
 8001998:	200001c0 	.word	0x200001c0

0800199c <digitalInit>:

void digitalInit(GPIO_TypeDef* port, const uint16_t pin, int IO, digitalPin *p)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = pin;
 80019ac:	897b      	ldrh	r3, [r7, #10]
 80019ae:	613b      	str	r3, [r7, #16]

	if(IO == OUTPUT)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d107      	bne.n	80019c6 <digitalInit+0x2a>
	{
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80019b6:	2301      	movs	r3, #1
 80019b8:	753b      	strb	r3, [r7, #20]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019ba:	2303      	movs	r3, #3
 80019bc:	757b      	strb	r3, [r7, #21]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019be:	2300      	movs	r3, #0
 80019c0:	75bb      	strb	r3, [r7, #22]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
	}

	if(IO == INPUT)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <digitalInit+0x40>
	{
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80019cc:	2300      	movs	r3, #0
 80019ce:	753b      	strb	r3, [r7, #20]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019d0:	2303      	movs	r3, #3
 80019d2:	757b      	strb	r3, [r7, #21]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75bb      	strb	r3, [r7, #22]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
	}

	if(IO == OPENDRAIN)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <digitalInit+0x56>
	{
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80019e2:	2301      	movs	r3, #1
 80019e4:	753b      	strb	r3, [r7, #20]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80019e6:	2303      	movs	r3, #3
 80019e8:	757b      	strb	r3, [r7, #21]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75bb      	strb	r3, [r7, #22]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
	}

	GPIO_Init(port, &GPIO_InitStructure); //port actually is gpioB.
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7fe fe39 	bl	8000670 <GPIO_Init>

	//p = (digitalPin *)calloc(1, sizeof(digitalPin)); //Allocate a block of memory of 1xsize of digital pin , intiliaze all its bits to zero.
	p->port = port; //just pass the address of the port to user defined port.
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	601a      	str	r2, [r3, #0]
	p->pin = pin;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	897a      	ldrh	r2, [r7, #10]
 8001a08:	809a      	strh	r2, [r3, #4]

	//return p;
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop

08001a14 <HMICommInit>:
#include "HMIComm.h"
#include <string.h>

void HMICommInit(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	USART2_Config();
 8001a18:	f000 fe36 	bl	8002688 <USART2_Config>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HMIReceived>:

void HMIReceived(HMICommObj *obj){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	obj->command = serialRead(&serialPort2);
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HMIReceived+0x20>)
 8001a2a:	f000 ff89 	bl	8002940 <serialRead>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	721a      	strb	r2, [r3, #8]
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000204 	.word	0x20000204

08001a44 <InitServerLifter>:
#include "ServerLifter.h"
#include <string.h>

void InitServerLifter(ServerLifter *server){
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	memset(server, 0, sizeof(server)/sizeof(ServerLifter));
	server->actuatorOutput = 512;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	81da      	strh	r2, [r3, #14]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <ReversePinInit>:

void ReversePinInit(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a66:	2301      	movs	r3, #1
 8001a68:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = REVERSE_PIN;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	603b      	str	r3, [r7, #0]
	GPIO_Init(REVERSE_PORT, &GPIO_InitStructure);
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <ReversePinInit+0x24>)
 8001a78:	f7fe fdfa 	bl	8000670 <GPIO_Init>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	48000400 	.word	0x48000400

08001a88 <Init>:

void Init(){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001a8c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001a90:	f7fe fed4 	bl	800083c <NVIC_PriorityGroupConfig>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001a94:	2101      	movs	r1, #1
 8001a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a9a:	f7ff f9e9 	bl	8000e70 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001aa4:	f7ff f9e4 	bl	8000e70 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001aae:	f7ff f9df 	bl	8000e70 <RCC_AHBPeriphClockCmd>

	ReversePinInit();
 8001ab2:	f7ff ffd5 	bl	8001a60 <ReversePinInit>

	SystemCoreClockUpdate();
 8001ab6:	f001 f943 	bl	8002d40 <SystemCoreClockUpdate>

	gpioConfiguration();
 8001aba:	f7ff fedd 	bl	8001878 <gpioConfiguration>

	SPI_Config();
 8001abe:	f000 ffe9 	bl	8002a94 <SPI_Config>

	timerInit();
 8001ac2:	f001 fa41 	bl	8002f48 <timerInit>

	digiPot_init();
 8001ac6:	f000 f8cb 	bl	8001c60 <digiPot_init>

	encoderInit();
 8001aca:	f000 fd7f 	bl	80025cc <encoderInit>

	controlInit();
 8001ace:	f000 fcdf 	bl	8002490 <controlInit>

	InitServerLifter(&serverLifter);
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <Init+0x58>)
 8001ad4:	f7ff ffb6 	bl	8001a44 <InitServerLifter>

	HMICommInit();
 8001ad8:	f7ff ff9c 	bl	8001a14 <HMICommInit>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000150 	.word	0x20000150

08001ae4 <ReceivingData>:

void ReceivingData(ServerLifter *server){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	HMIReceived(&server->hmi);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff96 	bl	8001a20 <HMIReceived>

	switch(server->hmi.command){
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7a1b      	ldrb	r3, [r3, #8]
 8001af8:	3b61      	subs	r3, #97	; 0x61
 8001afa:	2b14      	cmp	r3, #20
 8001afc:	d85a      	bhi.n	8001bb4 <ReceivingData+0xd0>
 8001afe:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <ReceivingData+0x20>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b59 	.word	0x08001b59
 8001b08:	08001bb5 	.word	0x08001bb5
 8001b0c:	08001bb5 	.word	0x08001bb5
 8001b10:	08001b89 	.word	0x08001b89
 8001b14:	08001bb5 	.word	0x08001bb5
 8001b18:	08001bb5 	.word	0x08001bb5
 8001b1c:	08001bb5 	.word	0x08001bb5
 8001b20:	08001bb5 	.word	0x08001bb5
 8001b24:	08001bab 	.word	0x08001bab
 8001b28:	08001bb5 	.word	0x08001bb5
 8001b2c:	08001bb5 	.word	0x08001bb5
 8001b30:	08001bb5 	.word	0x08001bb5
 8001b34:	08001bb5 	.word	0x08001bb5
 8001b38:	08001bb5 	.word	0x08001bb5
 8001b3c:	08001bb5 	.word	0x08001bb5
 8001b40:	08001b73 	.word	0x08001b73
 8001b44:	08001bb5 	.word	0x08001bb5
 8001b48:	08001bb5 	.word	0x08001bb5
 8001b4c:	08001bb5 	.word	0x08001bb5
 8001b50:	08001bb5 	.word	0x08001bb5
 8001b54:	08001ba3 	.word	0x08001ba3
	case 'a':
		server->actuatorOutput += 1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	89db      	ldrh	r3, [r3, #14]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	81da      	strh	r2, [r3, #14]
		memset(serialPort2.rxBuf, 0, sizeof(serialPort2.rxBuf)/sizeof(char));
 8001b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b68:	2100      	movs	r1, #0
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <ReceivingData+0xfc>)
 8001b6c:	f001 fb46 	bl	80031fc <memset>
		break;
 8001b70:	e021      	b.n	8001bb6 <ReceivingData+0xd2>
	case 'p':
		server->actuatorOutput = 512;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	81da      	strh	r2, [r3, #14]
		memset(serialPort2.rxBuf, 0, sizeof(serialPort2.rxBuf)/sizeof(char));
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4817      	ldr	r0, [pc, #92]	; (8001be0 <ReceivingData+0xfc>)
 8001b82:	f001 fb3b 	bl	80031fc <memset>
		break;
 8001b86:	e016      	b.n	8001bb6 <ReceivingData+0xd2>
	case 'd':
		server->actuatorOutput -= 1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	89db      	ldrh	r3, [r3, #14]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	81da      	strh	r2, [r3, #14]
		memset(serialPort2.rxBuf, 0, sizeof(serialPort2.rxBuf)/sizeof(char));
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4811      	ldr	r0, [pc, #68]	; (8001be0 <ReceivingData+0xfc>)
 8001b9c:	f001 fb2e 	bl	80031fc <memset>
		break;
 8001ba0:	e009      	b.n	8001bb6 <ReceivingData+0xd2>
	case 'u':
		server->actuatorOutput = 128;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	81da      	strh	r2, [r3, #14]
		break;
 8001ba8:	e005      	b.n	8001bb6 <ReceivingData+0xd2>
	case 'i':
		server->actuatorOutput = 768;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bb0:	81da      	strh	r2, [r3, #14]
		break;
 8001bb2:	e000      	b.n	8001bb6 <ReceivingData+0xd2>
	default:
		break;
 8001bb4:	bf00      	nop
	}

	if(server->actuatorOutput > MIN_SPEED){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	89db      	ldrh	r3, [r3, #14]
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d303      	bcc.n	8001bc8 <ReceivingData+0xe4>
		server->actuatorOutput = MIN_SPEED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001bc6:	81da      	strh	r2, [r3, #14]
	}

	if(server->actuatorOutput < MAX_SPEED){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	89db      	ldrh	r3, [r3, #14]
 8001bcc:	2b4d      	cmp	r3, #77	; 0x4d
 8001bce:	d802      	bhi.n	8001bd6 <ReceivingData+0xf2>
		server->actuatorOutput = MAX_SPEED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	224e      	movs	r2, #78	; 0x4e
 8001bd4:	81da      	strh	r2, [r3, #14]
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000410 	.word	0x20000410

08001be4 <MoveMotor>:

void MoveMotor(ServerLifter *server){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b09c      	sub	sp, #112	; 0x70
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	digiPot_write(STEERINGPOT_H, (server->actuatorOutput));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	89db      	ldrh	r3, [r3, #14]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f000 fafc 	bl	80021f0 <digiPot_write>
//	digiPot_write(4, (server->actuatorOutputRaw));
//	digiPot_write(5, (server->actuatorOutputRaw));
	//digiPot_write(STEERINGPOT_L, (server->actuatorOutputRaw));

	char toPrint[100];
	sprintf(toPrint, "%d\r\n", server->actuatorOutput);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	89db      	ldrh	r3, [r3, #14]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4907      	ldr	r1, [pc, #28]	; (8001c20 <MoveMotor+0x3c>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fabd 	bl	8003184 <siprintf>
	serialPrint(&serialPort2, toPrint);
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MoveMotor+0x40>)
 8001c12:	f000 febb 	bl	800298c <serialPrint>
}
 8001c16:	bf00      	nop
 8001c18:	3770      	adds	r7, #112	; 0x70
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	08003224 	.word	0x08003224
 8001c24:	20000204 	.word	0x20000204

08001c28 <UpdateMainRoutine>:

void UpdateMainRoutine(){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	unsigned long timeBefore = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
	while(1){
		ReceivingData(&serverLifter);
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <UpdateMainRoutine+0x30>)
 8001c34:	f7ff ff56 	bl	8001ae4 <ReceivingData>
		if(timerMicros() - timeBefore >= 100000){
 8001c38:	f001 f960 	bl	8002efc <timerMicros>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <UpdateMainRoutine+0x34>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d9f4      	bls.n	8001c32 <UpdateMainRoutine+0xa>
			MoveMotor(&serverLifter);
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <UpdateMainRoutine+0x30>)
 8001c4a:	f7ff ffcb 	bl	8001be4 <MoveMotor>
			timeBefore = timerMicros();
 8001c4e:	f001 f955 	bl	8002efc <timerMicros>
 8001c52:	6078      	str	r0, [r7, #4]
		}
	}
 8001c54:	e7ed      	b.n	8001c32 <UpdateMainRoutine+0xa>
 8001c56:	bf00      	nop
 8001c58:	20000150 	.word	0x20000150
 8001c5c:	0001869f 	.word	0x0001869f

08001c60 <digiPot_init>:
	digiPot_write(TILLERPOT, digipotCmd.potVal5);
	digiPot_write(DIGIPOT6, digipotCmd.potVal6);
}

void digiPot_init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	digipotCmd.potVal1=512;
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <digiPot_init+0x250>)
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	801a      	strh	r2, [r3, #0]
	digipotCmd.potVal2=512;
 8001c6e:	4b90      	ldr	r3, [pc, #576]	; (8001eb0 <digiPot_init+0x250>)
 8001c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c74:	805a      	strh	r2, [r3, #2]
	digipotCmd.potVal3=512;
 8001c76:	4b8e      	ldr	r3, [pc, #568]	; (8001eb0 <digiPot_init+0x250>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	809a      	strh	r2, [r3, #4]
	digipotCmd.potVal4=124;
 8001c7e:	4b8c      	ldr	r3, [pc, #560]	; (8001eb0 <digiPot_init+0x250>)
 8001c80:	227c      	movs	r2, #124	; 0x7c
 8001c82:	80da      	strh	r2, [r3, #6]
	digipotCmd.potVal5=42;
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <digiPot_init+0x250>)
 8001c86:	222a      	movs	r2, #42	; 0x2a
 8001c88:	811a      	strh	r2, [r3, #8]
	digipotCmd.potVal6=32;
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <digiPot_init+0x250>)
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	815a      	strh	r2, [r3, #10]

	//Un-select all the potentiometers
	digitalHi(POT1_SYNC);
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <digiPot_init+0x254>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a87      	ldr	r2, [pc, #540]	; (8001eb4 <digiPot_init+0x254>)
 8001c96:	8892      	ldrh	r2, [r2, #4]
 8001c98:	619a      	str	r2, [r3, #24]
	digitalHi(POT2_SYNC);
 8001c9a:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <digiPot_init+0x258>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a86      	ldr	r2, [pc, #536]	; (8001eb8 <digiPot_init+0x258>)
 8001ca0:	8892      	ldrh	r2, [r2, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
	digitalHi(POT3_SYNC);
 8001ca4:	4b85      	ldr	r3, [pc, #532]	; (8001ebc <digiPot_init+0x25c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a84      	ldr	r2, [pc, #528]	; (8001ebc <digiPot_init+0x25c>)
 8001caa:	8892      	ldrh	r2, [r2, #4]
 8001cac:	619a      	str	r2, [r3, #24]
	digitalHi(POT4_SYNC);
 8001cae:	4b84      	ldr	r3, [pc, #528]	; (8001ec0 <digiPot_init+0x260>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a83      	ldr	r2, [pc, #524]	; (8001ec0 <digiPot_init+0x260>)
 8001cb4:	8892      	ldrh	r2, [r2, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
	digitalHi(POT5_SYNC);
 8001cb8:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <digiPot_init+0x264>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a81      	ldr	r2, [pc, #516]	; (8001ec4 <digiPot_init+0x264>)
 8001cbe:	8892      	ldrh	r2, [r2, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
	digitalHi(POT6_SYNC);
 8001cc2:	4b81      	ldr	r3, [pc, #516]	; (8001ec8 <digiPot_init+0x268>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a80      	ldr	r2, [pc, #512]	; (8001ec8 <digiPot_init+0x268>)
 8001cc8:	8892      	ldrh	r2, [r2, #4]
 8001cca:	619a      	str	r2, [r3, #24]

	//Set the mode of the potentiometers 4-6 to potentiometer mode
	digitalLo(POT4_INDEP);
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <digiPot_init+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a7e      	ldr	r2, [pc, #504]	; (8001ecc <digiPot_init+0x26c>)
 8001cd2:	8892      	ldrh	r2, [r2, #4]
 8001cd4:	851a      	strh	r2, [r3, #40]	; 0x28
	digitalLo(POT5_INDEP);
 8001cd6:	4b7e      	ldr	r3, [pc, #504]	; (8001ed0 <digiPot_init+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7d      	ldr	r2, [pc, #500]	; (8001ed0 <digiPot_init+0x270>)
 8001cdc:	8892      	ldrh	r2, [r2, #4]
 8001cde:	851a      	strh	r2, [r3, #40]	; 0x28
	digitalLo(POT6_INDEP);
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <digiPot_init+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <digiPot_init+0x274>)
 8001ce6:	8892      	ldrh	r2, [r2, #4]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28

	//Switch on the logic power of the potentiometers
	digitalHi(PWR_CTRL);
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <digiPot_init+0x278>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <digiPot_init+0x278>)
 8001cf0:	8892      	ldrh	r2, [r2, #4]
 8001cf2:	619a      	str	r2, [r3, #24]

	int i=0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
	//Reset the potentiometers
	for(i=0; i<10000; i++);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	e002      	b.n	8001d04 <digiPot_init+0xa4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3301      	adds	r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	ddf7      	ble.n	8001cfe <digiPot_init+0x9e>
	digitalLo(SPI2_RESET);
 8001d0e:	4b73      	ldr	r3, [pc, #460]	; (8001edc <digiPot_init+0x27c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a72      	ldr	r2, [pc, #456]	; (8001edc <digiPot_init+0x27c>)
 8001d14:	8892      	ldrh	r2, [r2, #4]
 8001d16:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	e002      	b.n	8001d24 <digiPot_init+0xc4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3301      	adds	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	ddf7      	ble.n	8001d1e <digiPot_init+0xbe>
	digitalHi(SPI2_RESET);
 8001d2e:	4b6b      	ldr	r3, [pc, #428]	; (8001edc <digiPot_init+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <digiPot_init+0x27c>)
 8001d34:	8892      	ldrh	r2, [r2, #4]
 8001d36:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	e002      	b.n	8001d44 <digiPot_init+0xe4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	ddf7      	ble.n	8001d3e <digiPot_init+0xde>

	//Initialize potentiometer 1
	if(digitalGet(POT1_RDY)==0x01)
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <digiPot_init+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	8a1b      	ldrh	r3, [r3, #16]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <digiPot_init+0x280>)
 8001d58:	889b      	ldrh	r3, [r3, #4]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d054      	beq.n	8001e0c <digiPot_init+0x1ac>
	{
		digitalLo(POT1_SYNC);
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <digiPot_init+0x254>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a53      	ldr	r2, [pc, #332]	; (8001eb4 <digiPot_init+0x254>)
 8001d68:	8892      	ldrh	r2, [r2, #4]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	e002      	b.n	8001d78 <digiPot_init+0x118>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3301      	adds	r3, #1
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	ddf7      	ble.n	8001d72 <digiPot_init+0x112>
		spi_rw_16(SPI2, 0x2000);  //Normal mode of operation
 8001d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d86:	4857      	ldr	r0, [pc, #348]	; (8001ee4 <digiPot_init+0x284>)
 8001d88:	f000 ff42 	bl	8002c10 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	e002      	b.n	8001d98 <digiPot_init+0x138>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3301      	adds	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	ddf7      	ble.n	8001d92 <digiPot_init+0x132>
		digitalHi(POT1_SYNC);
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <digiPot_init+0x254>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a43      	ldr	r2, [pc, #268]	; (8001eb4 <digiPot_init+0x254>)
 8001da8:	8892      	ldrh	r2, [r2, #4]
 8001daa:	619a      	str	r2, [r3, #24]
		for(i=0; i<10000; i++);
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	e002      	b.n	8001db8 <digiPot_init+0x158>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3301      	adds	r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	ddf7      	ble.n	8001db2 <digiPot_init+0x152>
		digitalLo(POT1_SYNC);
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <digiPot_init+0x254>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <digiPot_init+0x254>)
 8001dc8:	8892      	ldrh	r2, [r2, #4]
 8001dca:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e002      	b.n	8001dd8 <digiPot_init+0x178>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dde:	4293      	cmp	r3, r2
 8001de0:	ddf7      	ble.n	8001dd2 <digiPot_init+0x172>
		spi_rw_16(SPI2, 0x1803); //Enable digital control
 8001de2:	f641 0103 	movw	r1, #6147	; 0x1803
 8001de6:	483f      	ldr	r0, [pc, #252]	; (8001ee4 <digiPot_init+0x284>)
 8001de8:	f000 ff12 	bl	8002c10 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	e002      	b.n	8001df8 <digiPot_init+0x198>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3301      	adds	r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	ddf7      	ble.n	8001df2 <digiPot_init+0x192>
		digitalHi(POT1_SYNC);
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <digiPot_init+0x254>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <digiPot_init+0x254>)
 8001e08:	8892      	ldrh	r2, [r2, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
	}
	//Initialize potentiometer 2
	if(digitalGet(POT2_RDY)==0x01)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <digiPot_init+0x288>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	8a1b      	ldrh	r3, [r3, #16]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <digiPot_init+0x288>)
 8001e16:	889b      	ldrh	r3, [r3, #4]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d072      	beq.n	8001f06 <digiPot_init+0x2a6>
	{
		digitalLo(POT2_SYNC);
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <digiPot_init+0x258>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <digiPot_init+0x258>)
 8001e26:	8892      	ldrh	r2, [r2, #4]
 8001e28:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	e002      	b.n	8001e36 <digiPot_init+0x1d6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	ddf7      	ble.n	8001e30 <digiPot_init+0x1d0>
		spi_rw_16(SPI2, 0x2000);  //Normal mode of operation
 8001e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e44:	4827      	ldr	r0, [pc, #156]	; (8001ee4 <digiPot_init+0x284>)
 8001e46:	f000 fee3 	bl	8002c10 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	e002      	b.n	8001e56 <digiPot_init+0x1f6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	ddf7      	ble.n	8001e50 <digiPot_init+0x1f0>
		digitalHi(POT2_SYNC);
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <digiPot_init+0x258>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <digiPot_init+0x258>)
 8001e66:	8892      	ldrh	r2, [r2, #4]
 8001e68:	619a      	str	r2, [r3, #24]
		for(i=0; i<10000; i++);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	e002      	b.n	8001e76 <digiPot_init+0x216>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	ddf7      	ble.n	8001e70 <digiPot_init+0x210>
		digitalLo(POT2_SYNC);
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <digiPot_init+0x258>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <digiPot_init+0x258>)
 8001e86:	8892      	ldrh	r2, [r2, #4]
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e002      	b.n	8001e96 <digiPot_init+0x236>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	ddf7      	ble.n	8001e90 <digiPot_init+0x230>
		spi_rw_16(SPI2, 0x1803); //Enable digital control
 8001ea0:	f641 0103 	movw	r1, #6147	; 0x1803
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <digiPot_init+0x284>)
 8001ea6:	f000 feb3 	bl	8002c10 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	e020      	b.n	8001ef2 <digiPot_init+0x292>
 8001eb0:	200001b4 	.word	0x200001b4
 8001eb4:	200001c8 	.word	0x200001c8
 8001eb8:	200001d8 	.word	0x200001d8
 8001ebc:	200001d0 	.word	0x200001d0
 8001ec0:	2000016c 	.word	0x2000016c
 8001ec4:	200001e0 	.word	0x200001e0
 8001ec8:	2000018c 	.word	0x2000018c
 8001ecc:	2000019c 	.word	0x2000019c
 8001ed0:	20000194 	.word	0x20000194
 8001ed4:	2000017c 	.word	0x2000017c
 8001ed8:	20000184 	.word	0x20000184
 8001edc:	200001c0 	.word	0x200001c0
 8001ee0:	200001a4 	.word	0x200001a4
 8001ee4:	40003800 	.word	0x40003800
 8001ee8:	20000174 	.word	0x20000174
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	ddf7      	ble.n	8001eec <digiPot_init+0x28c>
		digitalHi(POT2_SYNC);
 8001efc:	4b9a      	ldr	r3, [pc, #616]	; (8002168 <digiPot_init+0x508>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a99      	ldr	r2, [pc, #612]	; (8002168 <digiPot_init+0x508>)
 8001f02:	8892      	ldrh	r2, [r2, #4]
 8001f04:	619a      	str	r2, [r3, #24]
	}

	//Initialize potentiometer 3
	if(digitalGet(POT3_RDY)==0x01)
 8001f06:	4b99      	ldr	r3, [pc, #612]	; (800216c <digiPot_init+0x50c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	8a1b      	ldrh	r3, [r3, #16]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b97      	ldr	r3, [pc, #604]	; (800216c <digiPot_init+0x50c>)
 8001f10:	889b      	ldrh	r3, [r3, #4]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d054      	beq.n	8001fc4 <digiPot_init+0x364>
	{
		digitalLo(POT3_SYNC);
 8001f1a:	4b95      	ldr	r3, [pc, #596]	; (8002170 <digiPot_init+0x510>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a94      	ldr	r2, [pc, #592]	; (8002170 <digiPot_init+0x510>)
 8001f20:	8892      	ldrh	r2, [r2, #4]
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	e002      	b.n	8001f30 <digiPot_init+0x2d0>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f36:	4293      	cmp	r3, r2
 8001f38:	ddf7      	ble.n	8001f2a <digiPot_init+0x2ca>
		spi_rw_16(SPI2, 0x2000);  //Normal mode of operation
 8001f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3e:	488d      	ldr	r0, [pc, #564]	; (8002174 <digiPot_init+0x514>)
 8001f40:	f000 fe66 	bl	8002c10 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e002      	b.n	8001f50 <digiPot_init+0x2f0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f56:	4293      	cmp	r3, r2
 8001f58:	ddf7      	ble.n	8001f4a <digiPot_init+0x2ea>
		digitalHi(POT3_SYNC);
 8001f5a:	4b85      	ldr	r3, [pc, #532]	; (8002170 <digiPot_init+0x510>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a84      	ldr	r2, [pc, #528]	; (8002170 <digiPot_init+0x510>)
 8001f60:	8892      	ldrh	r2, [r2, #4]
 8001f62:	619a      	str	r2, [r3, #24]
		for(i=0; i<10000; i++);
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	e002      	b.n	8001f70 <digiPot_init+0x310>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f76:	4293      	cmp	r3, r2
 8001f78:	ddf7      	ble.n	8001f6a <digiPot_init+0x30a>
		digitalLo(POT3_SYNC);
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <digiPot_init+0x510>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7c      	ldr	r2, [pc, #496]	; (8002170 <digiPot_init+0x510>)
 8001f80:	8892      	ldrh	r2, [r2, #4]
 8001f82:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<10000; i++);
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e002      	b.n	8001f90 <digiPot_init+0x330>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f96:	4293      	cmp	r3, r2
 8001f98:	ddf7      	ble.n	8001f8a <digiPot_init+0x32a>
		spi_rw_16(SPI2, 0x1803); //Enable digital control
 8001f9a:	f641 0103 	movw	r1, #6147	; 0x1803
 8001f9e:	4875      	ldr	r0, [pc, #468]	; (8002174 <digiPot_init+0x514>)
 8001fa0:	f000 fe36 	bl	8002c10 <spi_rw_16>
		for(i=0; i<10000; i++);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	e002      	b.n	8001fb0 <digiPot_init+0x350>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3301      	adds	r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	ddf7      	ble.n	8001faa <digiPot_init+0x34a>
		digitalHi(POT3_SYNC);
 8001fba:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <digiPot_init+0x510>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <digiPot_init+0x510>)
 8001fc0:	8892      	ldrh	r2, [r2, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
	}

	//Initialize potentiometer 4
	digitalLo(POT4_SYNC);
 8001fc4:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <digiPot_init+0x518>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <digiPot_init+0x518>)
 8001fca:	8892      	ldrh	r2, [r2, #4]
 8001fcc:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	e002      	b.n	8001fda <digiPot_init+0x37a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	ddf7      	ble.n	8001fd4 <digiPot_init+0x374>
	spi_rw_16(SPI2, 0xC800);  //Normal mode of operation
 8001fe4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001fe8:	4862      	ldr	r0, [pc, #392]	; (8002174 <digiPot_init+0x514>)
 8001fea:	f000 fe11 	bl	8002c10 <spi_rw_16>
	for(i=0; i<10000; i++);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	e002      	b.n	8001ffa <digiPot_init+0x39a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002000:	4293      	cmp	r3, r2
 8002002:	ddf7      	ble.n	8001ff4 <digiPot_init+0x394>
	digitalHi(POT4_SYNC);
 8002004:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <digiPot_init+0x518>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <digiPot_init+0x518>)
 800200a:	8892      	ldrh	r2, [r2, #4]
 800200c:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	e002      	b.n	800201a <digiPot_init+0x3ba>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002020:	4293      	cmp	r3, r2
 8002022:	ddf7      	ble.n	8002014 <digiPot_init+0x3b4>
	digitalLo(POT4_SYNC);
 8002024:	4b54      	ldr	r3, [pc, #336]	; (8002178 <digiPot_init+0x518>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a53      	ldr	r2, [pc, #332]	; (8002178 <digiPot_init+0x518>)
 800202a:	8892      	ldrh	r2, [r2, #4]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	e002      	b.n	800203a <digiPot_init+0x3da>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002040:	4293      	cmp	r3, r2
 8002042:	ddf7      	ble.n	8002034 <digiPot_init+0x3d4>
	spi_rw_16(SPI2, 0xD003); //Enable digital control
 8002044:	f24d 0103 	movw	r1, #53251	; 0xd003
 8002048:	484a      	ldr	r0, [pc, #296]	; (8002174 <digiPot_init+0x514>)
 800204a:	f000 fde1 	bl	8002c10 <spi_rw_16>
	for(i=0; i<10000; i++);
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	e002      	b.n	800205a <digiPot_init+0x3fa>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002060:	4293      	cmp	r3, r2
 8002062:	ddf7      	ble.n	8002054 <digiPot_init+0x3f4>
	digitalHi(POT4_SYNC);
 8002064:	4b44      	ldr	r3, [pc, #272]	; (8002178 <digiPot_init+0x518>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a43      	ldr	r2, [pc, #268]	; (8002178 <digiPot_init+0x518>)
 800206a:	8892      	ldrh	r2, [r2, #4]
 800206c:	619a      	str	r2, [r3, #24]

	//Initialize potentiometer 5
	digitalLo(POT5_SYNC);
 800206e:	4b43      	ldr	r3, [pc, #268]	; (800217c <digiPot_init+0x51c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a42      	ldr	r2, [pc, #264]	; (800217c <digiPot_init+0x51c>)
 8002074:	8892      	ldrh	r2, [r2, #4]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	e002      	b.n	8002084 <digiPot_init+0x424>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3301      	adds	r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f242 720f 	movw	r2, #9999	; 0x270f
 800208a:	4293      	cmp	r3, r2
 800208c:	ddf7      	ble.n	800207e <digiPot_init+0x41e>
	spi_rw_16(SPI2, 0xC800);  //Normal mode of operation
 800208e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8002092:	4838      	ldr	r0, [pc, #224]	; (8002174 <digiPot_init+0x514>)
 8002094:	f000 fdbc 	bl	8002c10 <spi_rw_16>
	for(i=0; i<10000; i++);
 8002098:	2300      	movs	r3, #0
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	e002      	b.n	80020a4 <digiPot_init+0x444>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3301      	adds	r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80020aa:	4293      	cmp	r3, r2
 80020ac:	ddf7      	ble.n	800209e <digiPot_init+0x43e>
	digitalHi(POT5_SYNC);
 80020ae:	4b33      	ldr	r3, [pc, #204]	; (800217c <digiPot_init+0x51c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a32      	ldr	r2, [pc, #200]	; (800217c <digiPot_init+0x51c>)
 80020b4:	8892      	ldrh	r2, [r2, #4]
 80020b6:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	e002      	b.n	80020c4 <digiPot_init+0x464>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3301      	adds	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80020ca:	4293      	cmp	r3, r2
 80020cc:	ddf7      	ble.n	80020be <digiPot_init+0x45e>
	digitalLo(POT5_SYNC);
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <digiPot_init+0x51c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2a      	ldr	r2, [pc, #168]	; (800217c <digiPot_init+0x51c>)
 80020d4:	8892      	ldrh	r2, [r2, #4]
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	e002      	b.n	80020e4 <digiPot_init+0x484>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3301      	adds	r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80020ea:	4293      	cmp	r3, r2
 80020ec:	ddf7      	ble.n	80020de <digiPot_init+0x47e>
	spi_rw_16(SPI2, 0xD003); //Enable digital control
 80020ee:	f24d 0103 	movw	r1, #53251	; 0xd003
 80020f2:	4820      	ldr	r0, [pc, #128]	; (8002174 <digiPot_init+0x514>)
 80020f4:	f000 fd8c 	bl	8002c10 <spi_rw_16>
	for(i=0; i<10000; i++);
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e002      	b.n	8002104 <digiPot_init+0x4a4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3301      	adds	r3, #1
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f242 720f 	movw	r2, #9999	; 0x270f
 800210a:	4293      	cmp	r3, r2
 800210c:	ddf7      	ble.n	80020fe <digiPot_init+0x49e>
	digitalHi(POT5_SYNC);
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <digiPot_init+0x51c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1a      	ldr	r2, [pc, #104]	; (800217c <digiPot_init+0x51c>)
 8002114:	8892      	ldrh	r2, [r2, #4]
 8002116:	619a      	str	r2, [r3, #24]

	//Initialize potentiometer 6
	digitalLo(POT6_SYNC);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <digiPot_init+0x520>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	; (8002180 <digiPot_init+0x520>)
 800211e:	8892      	ldrh	r2, [r2, #4]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e002      	b.n	800212e <digiPot_init+0x4ce>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f242 720f 	movw	r2, #9999	; 0x270f
 8002134:	4293      	cmp	r3, r2
 8002136:	ddf7      	ble.n	8002128 <digiPot_init+0x4c8>
	spi_rw_16(SPI2, 0xC800);  //Normal mode of operation
 8002138:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <digiPot_init+0x514>)
 800213e:	f000 fd67 	bl	8002c10 <spi_rw_16>
	for(i=0; i<10000; i++);
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	e002      	b.n	800214e <digiPot_init+0x4ee>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f242 720f 	movw	r2, #9999	; 0x270f
 8002154:	4293      	cmp	r3, r2
 8002156:	ddf7      	ble.n	8002148 <digiPot_init+0x4e8>
	digitalHi(POT6_SYNC);
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <digiPot_init+0x520>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <digiPot_init+0x520>)
 800215e:	8892      	ldrh	r2, [r2, #4]
 8002160:	619a      	str	r2, [r3, #24]
	for(i=0; i<10000; i++);
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	e010      	b.n	800218a <digiPot_init+0x52a>
 8002168:	200001d8 	.word	0x200001d8
 800216c:	200001ac 	.word	0x200001ac
 8002170:	200001d0 	.word	0x200001d0
 8002174:	40003800 	.word	0x40003800
 8002178:	2000016c 	.word	0x2000016c
 800217c:	200001e0 	.word	0x200001e0
 8002180:	2000018c 	.word	0x2000018c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002190:	4293      	cmp	r3, r2
 8002192:	ddf7      	ble.n	8002184 <digiPot_init+0x524>
	digitalLo(POT6_SYNC);
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <digiPot_init+0x588>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <digiPot_init+0x588>)
 800219a:	8892      	ldrh	r2, [r2, #4]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; i<10000; i++);
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	e002      	b.n	80021aa <digiPot_init+0x54a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80021b0:	4293      	cmp	r3, r2
 80021b2:	ddf7      	ble.n	80021a4 <digiPot_init+0x544>
	spi_rw_16(SPI2, 0xD003); //Enable digital control
 80021b4:	f24d 0103 	movw	r1, #53251	; 0xd003
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <digiPot_init+0x58c>)
 80021ba:	f000 fd29 	bl	8002c10 <spi_rw_16>
	for(i=0; i<10000; i++);
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	e002      	b.n	80021ca <digiPot_init+0x56a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3301      	adds	r3, #1
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80021d0:	4293      	cmp	r3, r2
 80021d2:	ddf7      	ble.n	80021c4 <digiPot_init+0x564>
	digitalHi(POT6_SYNC);
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <digiPot_init+0x588>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <digiPot_init+0x588>)
 80021da:	8892      	ldrh	r2, [r2, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000018c 	.word	0x2000018c
 80021ec:	40003800 	.word	0x40003800

080021f0 <digiPot_write>:

void digiPot_write(uint8_t potID, uint16_t value)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	460a      	mov	r2, r1
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	4613      	mov	r3, r2
 80021fe:	80bb      	strh	r3, [r7, #4]
	int i=0;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
	switch(potID)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	3b01      	subs	r3, #1
 8002208:	2b05      	cmp	r3, #5
 800220a:	f200 8119 	bhi.w	8002440 <digiPot_write+0x250>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <digiPot_write+0x24>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	0800222d 	.word	0x0800222d
 8002218:	0800228f 	.word	0x0800228f
 800221c:	080022f1 	.word	0x080022f1
 8002220:	08002353 	.word	0x08002353
 8002224:	0800239f 	.word	0x0800239f
 8002228:	080023eb 	.word	0x080023eb
	{
	case 1:
	{
		value=value| 0b0000010000000000; //Append the control bits, See AD5292 data sheet
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	80bb      	strh	r3, [r7, #4]
		if(digitalGet(POT1_RDY)==0x01)
 8002234:	4b84      	ldr	r3, [pc, #528]	; (8002448 <digiPot_write+0x258>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	8a1b      	ldrh	r3, [r3, #16]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b82      	ldr	r3, [pc, #520]	; (8002448 <digiPot_write+0x258>)
 800223e:	889b      	ldrh	r3, [r3, #4]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80f6 	beq.w	8002436 <digiPot_write+0x246>
		{
			digitalLo(POT1_SYNC);
 800224a:	4b80      	ldr	r3, [pc, #512]	; (800244c <digiPot_write+0x25c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7f      	ldr	r2, [pc, #508]	; (800244c <digiPot_write+0x25c>)
 8002250:	8892      	ldrh	r2, [r2, #4]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
			for(i=0; i<100; i++);
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e002      	b.n	8002260 <digiPot_write+0x70>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b63      	cmp	r3, #99	; 0x63
 8002264:	ddf9      	ble.n	800225a <digiPot_write+0x6a>
			spi_rw_16(SPI2,value);
 8002266:	88bb      	ldrh	r3, [r7, #4]
 8002268:	4619      	mov	r1, r3
 800226a:	4879      	ldr	r0, [pc, #484]	; (8002450 <digiPot_write+0x260>)
 800226c:	f000 fcd0 	bl	8002c10 <spi_rw_16>
			for(i=0; i<100; i++);
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e002      	b.n	800227c <digiPot_write+0x8c>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b63      	cmp	r3, #99	; 0x63
 8002280:	ddf9      	ble.n	8002276 <digiPot_write+0x86>
			digitalHi(POT1_SYNC);
 8002282:	4b72      	ldr	r3, [pc, #456]	; (800244c <digiPot_write+0x25c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a71      	ldr	r2, [pc, #452]	; (800244c <digiPot_write+0x25c>)
 8002288:	8892      	ldrh	r2, [r2, #4]
 800228a:	619a      	str	r2, [r3, #24]
		}
		break;
 800228c:	e0d3      	b.n	8002436 <digiPot_write+0x246>
	}
	case 2:
	{
		value=value|0b0000010000000000; //Append the control bits, See AD5292 data sheet
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002294:	80bb      	strh	r3, [r7, #4]
		if(digitalGet(POT2_RDY)==0x01)
 8002296:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <digiPot_write+0x264>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	8a1b      	ldrh	r3, [r3, #16]
 800229c:	b29a      	uxth	r2, r3
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <digiPot_write+0x264>)
 80022a0:	889b      	ldrh	r3, [r3, #4]
 80022a2:	4013      	ands	r3, r2
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80c7 	beq.w	800243a <digiPot_write+0x24a>
		{
			digitalLo(POT2_SYNC);
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <digiPot_write+0x268>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a69      	ldr	r2, [pc, #420]	; (8002458 <digiPot_write+0x268>)
 80022b2:	8892      	ldrh	r2, [r2, #4]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
			for(i=0; i<100; i++);
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e002      	b.n	80022c2 <digiPot_write+0xd2>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b63      	cmp	r3, #99	; 0x63
 80022c6:	ddf9      	ble.n	80022bc <digiPot_write+0xcc>
			spi_rw_16(SPI2,value);
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4860      	ldr	r0, [pc, #384]	; (8002450 <digiPot_write+0x260>)
 80022ce:	f000 fc9f 	bl	8002c10 <spi_rw_16>
			for(i=0; i<100; i++);
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e002      	b.n	80022de <digiPot_write+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b63      	cmp	r3, #99	; 0x63
 80022e2:	ddf9      	ble.n	80022d8 <digiPot_write+0xe8>
			digitalHi(POT2_SYNC);
 80022e4:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <digiPot_write+0x268>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5b      	ldr	r2, [pc, #364]	; (8002458 <digiPot_write+0x268>)
 80022ea:	8892      	ldrh	r2, [r2, #4]
 80022ec:	619a      	str	r2, [r3, #24]
		}
		break;
 80022ee:	e0a4      	b.n	800243a <digiPot_write+0x24a>
	}
	case 3:
	{
		value=value|0b0000010000000000; //Append the control bits, See AD5292 data sheet
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f6:	80bb      	strh	r3, [r7, #4]
		if(digitalGet(POT3_RDY)==0x01)
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <digiPot_write+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	8a1b      	ldrh	r3, [r3, #16]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b56      	ldr	r3, [pc, #344]	; (800245c <digiPot_write+0x26c>)
 8002302:	889b      	ldrh	r3, [r3, #4]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8098 	beq.w	800243e <digiPot_write+0x24e>
		{
			digitalLo(POT3_SYNC);
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <digiPot_write+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a53      	ldr	r2, [pc, #332]	; (8002460 <digiPot_write+0x270>)
 8002314:	8892      	ldrh	r2, [r2, #4]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
			for(i=0; i<100; i++);
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e002      	b.n	8002324 <digiPot_write+0x134>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3301      	adds	r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b63      	cmp	r3, #99	; 0x63
 8002328:	ddf9      	ble.n	800231e <digiPot_write+0x12e>
			spi_rw_16(SPI2,value);
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	4619      	mov	r1, r3
 800232e:	4848      	ldr	r0, [pc, #288]	; (8002450 <digiPot_write+0x260>)
 8002330:	f000 fc6e 	bl	8002c10 <spi_rw_16>
			for(i=0; i<100; i++);
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e002      	b.n	8002340 <digiPot_write+0x150>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3301      	adds	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b63      	cmp	r3, #99	; 0x63
 8002344:	ddf9      	ble.n	800233a <digiPot_write+0x14a>
			digitalHi(POT3_SYNC);
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <digiPot_write+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a45      	ldr	r2, [pc, #276]	; (8002460 <digiPot_write+0x270>)
 800234c:	8892      	ldrh	r2, [r2, #4]
 800234e:	619a      	str	r2, [r3, #24]
		}
		break;
 8002350:	e075      	b.n	800243e <digiPot_write+0x24e>
	}
	case 4:
	{
		value=value|0b0001100000000000; //Append the control bits, See AD5412 data sheet
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8002358:	80bb      	strh	r3, [r7, #4]
		digitalLo(POT4_SYNC);
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <digiPot_write+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a41      	ldr	r2, [pc, #260]	; (8002464 <digiPot_write+0x274>)
 8002360:	8892      	ldrh	r2, [r2, #4]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<100; i++);
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e002      	b.n	8002370 <digiPot_write+0x180>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3301      	adds	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b63      	cmp	r3, #99	; 0x63
 8002374:	ddf9      	ble.n	800236a <digiPot_write+0x17a>
		spi_rw_16(SPI2,value);
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	4619      	mov	r1, r3
 800237a:	4835      	ldr	r0, [pc, #212]	; (8002450 <digiPot_write+0x260>)
 800237c:	f000 fc48 	bl	8002c10 <spi_rw_16>
		for(i=0; i<100; i++);
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e002      	b.n	800238c <digiPot_write+0x19c>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b63      	cmp	r3, #99	; 0x63
 8002390:	ddf9      	ble.n	8002386 <digiPot_write+0x196>
		digitalHi(POT4_SYNC);
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <digiPot_write+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a33      	ldr	r2, [pc, #204]	; (8002464 <digiPot_write+0x274>)
 8002398:	8892      	ldrh	r2, [r2, #4]
 800239a:	619a      	str	r2, [r3, #24]
		break;
 800239c:	e050      	b.n	8002440 <digiPot_write+0x250>
	}
	case 5:
	{
		value=value|0b0001100000000000; //Append the control bits, See AD5412 data sheet
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80023a4:	80bb      	strh	r3, [r7, #4]
		digitalLo(POT5_SYNC);
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <digiPot_write+0x278>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <digiPot_write+0x278>)
 80023ac:	8892      	ldrh	r2, [r2, #4]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<100; i++);
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e002      	b.n	80023bc <digiPot_write+0x1cc>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b63      	cmp	r3, #99	; 0x63
 80023c0:	ddf9      	ble.n	80023b6 <digiPot_write+0x1c6>
		spi_rw_16(SPI2,value);
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4822      	ldr	r0, [pc, #136]	; (8002450 <digiPot_write+0x260>)
 80023c8:	f000 fc22 	bl	8002c10 <spi_rw_16>
		for(i=0; i<100; i++);
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e002      	b.n	80023d8 <digiPot_write+0x1e8>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b63      	cmp	r3, #99	; 0x63
 80023dc:	ddf9      	ble.n	80023d2 <digiPot_write+0x1e2>
		digitalHi(POT5_SYNC);
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <digiPot_write+0x278>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <digiPot_write+0x278>)
 80023e4:	8892      	ldrh	r2, [r2, #4]
 80023e6:	619a      	str	r2, [r3, #24]
		break;
 80023e8:	e02a      	b.n	8002440 <digiPot_write+0x250>
	}
	case 6:
	{
		value=value|0b0001100000000000; //Append the control bits, See AD5412 data sheet
 80023ea:	88bb      	ldrh	r3, [r7, #4]
 80023ec:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80023f0:	80bb      	strh	r3, [r7, #4]
		digitalLo(POT6_SYNC);
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <digiPot_write+0x27c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <digiPot_write+0x27c>)
 80023f8:	8892      	ldrh	r2, [r2, #4]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
		for(i=0; i<100; i++);
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e002      	b.n	8002408 <digiPot_write+0x218>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b63      	cmp	r3, #99	; 0x63
 800240c:	ddf9      	ble.n	8002402 <digiPot_write+0x212>
		spi_rw_16(SPI2,value);
 800240e:	88bb      	ldrh	r3, [r7, #4]
 8002410:	4619      	mov	r1, r3
 8002412:	480f      	ldr	r0, [pc, #60]	; (8002450 <digiPot_write+0x260>)
 8002414:	f000 fbfc 	bl	8002c10 <spi_rw_16>
		for(i=0; i<100; i++);
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e002      	b.n	8002424 <digiPot_write+0x234>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b63      	cmp	r3, #99	; 0x63
 8002428:	ddf9      	ble.n	800241e <digiPot_write+0x22e>
		digitalHi(POT6_SYNC);
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <digiPot_write+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <digiPot_write+0x27c>)
 8002430:	8892      	ldrh	r2, [r2, #4]
 8002432:	619a      	str	r2, [r3, #24]
		break;
 8002434:	e004      	b.n	8002440 <digiPot_write+0x250>
			for(i=0; i<100; i++);
			spi_rw_16(SPI2,value);
			for(i=0; i<100; i++);
			digitalHi(POT1_SYNC);
		}
		break;
 8002436:	bf00      	nop
 8002438:	e002      	b.n	8002440 <digiPot_write+0x250>
			for(i=0; i<100; i++);
			spi_rw_16(SPI2,value);
			for(i=0; i<100; i++);
			digitalHi(POT2_SYNC);
		}
		break;
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <digiPot_write+0x250>
			for(i=0; i<100; i++);
			spi_rw_16(SPI2,value);
			for(i=0; i<100; i++);
			digitalHi(POT3_SYNC);
		}
		break;
 800243e:	bf00      	nop
		for(i=0; i<100; i++);
		digitalHi(POT6_SYNC);
		break;
	}
	}
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200001a4 	.word	0x200001a4
 800244c:	200001c8 	.word	0x200001c8
 8002450:	40003800 	.word	0x40003800
 8002454:	20000174 	.word	0x20000174
 8002458:	200001d8 	.word	0x200001d8
 800245c:	200001ac 	.word	0x200001ac
 8002460:	200001d0 	.word	0x200001d0
 8002464:	2000016c 	.word	0x2000016c
 8002468:	200001e0 	.word	0x200001e0
 800246c:	2000018c 	.word	0x2000018c

08002470 <TIM6_DAC_IRQHandler>:
motor_t driveMotor;
void motorEncoderProcess(motor_t *motor);


void TIM6_DAC_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8002474:	2101      	movs	r1, #1
 8002476:	4804      	ldr	r0, [pc, #16]	; (8002488 <TIM6_DAC_IRQHandler+0x18>)
 8002478:	f7ff f812 	bl	80014a0 <TIM_ClearITPendingBit>

	motorEncoderProcess(&driveMotor);
 800247c:	4803      	ldr	r0, [pc, #12]	; (800248c <TIM6_DAC_IRQHandler+0x1c>)
 800247e:	f000 f84b 	bl	8002518 <motorEncoderProcess>
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40001000 	.word	0x40001000
 800248c:	200001e8 	.word	0x200001e8

08002490 <controlInit>:

void controlInit(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	uint16_t prescalerValue;

	//1kHz timer for current integration

	TIM_DeInit(TIM6);
 8002496:	481d      	ldr	r0, [pc, #116]	; (800250c <controlInit+0x7c>)
 8002498:	f7fe fe70 	bl	800117c <TIM_DeInit>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800249c:	2101      	movs	r1, #1
 800249e:	2010      	movs	r0, #16
 80024a0:	f7fe fd26 	bl	8000ef0 <RCC_APB1PeriphClockCmd>

	prescalerValue = (SystemCoreClock/1000000) - 1;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <controlInit+0x80>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <controlInit+0x84>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9b      	lsrs	r3, r3, #18
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	82fb      	strh	r3, [r7, #22]

	TIM_TimeBaseStructure.TIM_Period = 20000; //50Hz
 80024b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024ba:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80024bc:	8afb      	ldrh	r3, [r7, #22]
 80024be:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80024c4:	2300      	movs	r3, #0
 80024c6:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	81fb      	strh	r3, [r7, #14]

	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	480e      	ldr	r0, [pc, #56]	; (800250c <controlInit+0x7c>)
 80024d2:	f7fe ff09 	bl	80012e8 <TIM_TimeBaseInit>

	NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 80024d6:	2336      	movs	r3, #54	; 0x36
 80024d8:	743b      	strb	r3, [r7, #16]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 7;
 80024da:	2307      	movs	r3, #7
 80024dc:	747b      	strb	r3, [r7, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	74bb      	strb	r3, [r7, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	74fb      	strb	r3, [r7, #19]
	NVIC_Init(&NVIC_InitStructure);
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f9ba 	bl	8000864 <NVIC_Init>

	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 80024f0:	2201      	movs	r2, #1
 80024f2:	2101      	movs	r1, #1
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <controlInit+0x7c>)
 80024f6:	f7fe ffb3 	bl	8001460 <TIM_ITConfig>

	TIM_Cmd(TIM6, ENABLE);
 80024fa:	2101      	movs	r1, #1
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <controlInit+0x7c>)
 80024fe:	f7fe ff8f 	bl	8001420 <TIM_Cmd>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40001000 	.word	0x40001000
 8002510:	20000030 	.word	0x20000030
 8002514:	431bde83 	.word	0x431bde83

08002518 <motorEncoderProcess>:

void motorEncoderProcess(motor_t *motor)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	motor->motorEncoder.currEncoderCount = motor->motorEncoder.encoderTimer -> CNT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	b21a      	sxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	815a      	strh	r2, [r3, #10]

	motor->motorEncoder.deltaEncoderCount = motor->motorEncoder.currEncoderCount - motor->motorEncoder.prevEncoderCount;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800253a:	b29b      	uxth	r3, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b29b      	uxth	r3, r3
 8002540:	b21a      	sxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	819a      	strh	r2, [r3, #12]

	motor->motorEncoder.prevEncoderCount = motor->motorEncoder.currEncoderCount;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	811a      	strh	r2, [r3, #8]

	motor->motorEncoder.accumEncoderCounts += motor->motorEncoder.deltaEncoderCount;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800255a:	441a      	add	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]

	motor->motorCurrentSpeed += 0.1f * ( ( ( (motor->motorEncoder.deltaEncoderCount / 2.0f) * CONTROL_LOOP_FREQ)  / motor->motorCountsPerRev * 60.0f) - motor->motorCurrentSpeed) ;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	ed93 7a00 	vldr	s14, [r3]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002574:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002578:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800257c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80025c0 <motorEncoderProcess+0xa8>
 8002580:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	edd3 6a01 	vldr	s13, [r3, #4]
 800258a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800258e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80025c4 <motorEncoderProcess+0xac>
 8002592:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025a0:	eddf 6a09 	vldr	s13, [pc, #36]	; 80025c8 <motorEncoderProcess+0xb0>
 80025a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	edc3 7a00 	vstr	s15, [r3]

}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	42480000 	.word	0x42480000
 80025c4:	42700000 	.word	0x42700000
 80025c8:	3dcccccd 	.word	0x3dcccccd

080025cc <encoderInit>:

void encoderInit(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	driveMotor.motorCurrentSpeed = 0;
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <encoderInit+0x88>)
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
	driveMotor.motorCountsPerRev = 1660; //Determined empherically
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <encoderInit+0x88>)
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <encoderInit+0x8c>)
 80025de:	605a      	str	r2, [r3, #4]
	driveMotor.motorEncoder.encoderTimer = TIM2;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <encoderInit+0x88>)
 80025e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e6:	615a      	str	r2, [r3, #20]

	TIM_DeInit(TIM2);
 80025e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025ec:	f7fe fdc6 	bl	800117c <TIM_DeInit>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7fe fc7c 	bl	8000ef0 <RCC_APB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 80025f8:	2303      	movs	r3, #3
 80025fa:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80025fc:	2302      	movs	r3, #2
 80025fe:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002600:	2301      	movs	r3, #1
 8002602:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002604:	463b      	mov	r3, r7
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f7fe f830 	bl	8000670 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0 , GPIO_AF_1);
 8002610:	2201      	movs	r2, #1
 8002612:	2100      	movs	r1, #0
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f7fe f8c6 	bl	80007a8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1 , GPIO_AF_1);
 800261c:	2201      	movs	r2, #1
 800261e:	2101      	movs	r1, #1
 8002620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002624:	f7fe f8c0 	bl	80007a8 <GPIO_PinAFConfig>

	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI1, TIM_ICPolarity_Rising,  TIM_ICPolarity_Rising);
 8002628:	2300      	movs	r3, #0
 800262a:	2200      	movs	r2, #0
 800262c:	2101      	movs	r1, #1
 800262e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002632:	f7fe ff47 	bl	80014c4 <TIM_EncoderInterfaceConfig>

	TIM_SetAutoreload(TIM2, 0xFFFF);
 8002636:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800263a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800263e:	f7fe fee1 	bl	8001404 <TIM_SetAutoreload>

	TIM_Cmd(TIM2, ENABLE);
 8002642:	2101      	movs	r1, #1
 8002644:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002648:	f7fe feea 	bl	8001420 <TIM_Cmd>

}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200001e8 	.word	0x200001e8
 8002658:	44cf8000 	.word	0x44cf8000

0800265c <main>:

/* Includes */
#include "ServerLifter.h"

int main(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	Init();
 8002660:	f7ff fa12 	bl	8001a88 <Init>
	UpdateMainRoutine();
 8002664:	f7ff fae0 	bl	8001c28 <UpdateMainRoutine>
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop

08002670 <HardFault_Handler>:



void HardFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
	for(;;);
 8002674:	e7fe      	b.n	8002674 <HardFault_Handler+0x4>
 8002676:	bf00      	nop

08002678 <WWDG_IRQHandler>:

}

void WWDG_IRQHandler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
	for(;;);
 800267c:	e7fe      	b.n	800267c <WWDG_IRQHandler+0x4>
 800267e:	bf00      	nop

08002680 <UsageFault_Handler>:

}

void UsageFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	for(;;);
 8002684:	e7fe      	b.n	8002684 <UsageFault_Handler+0x4>
 8002686:	bf00      	nop

08002688 <USART2_Config>:
serialPort_t serialPort2;

unsigned int cs32A, cs32B;

void USART2_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b096      	sub	sp, #88	; 0x58
 800268c:	af00      	add	r7, sp, #0
	DMA_InitTypeDef DMA_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	serialPort_t *s;

	s = &serialPort2;
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <USART2_Config+0x1d4>)
 8002690:	657b      	str	r3, [r7, #84]	; 0x54

	s->rxBufSize = s->txBufSize=512;
 8002692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800269c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	s->txHead = s->txTail = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026ac:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 80026b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026b2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	s->rxHead = s->rxTail= 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026ba:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
 80026be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026c0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
	s->txDmaRunning = 0;
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	/* Peripheral Clock Enable -------------------------------------------------*/
	/* Enable GPIO clock */
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	/* Enable USART clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80026cc:	2101      	movs	r1, #1
 80026ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026d2:	f7fe fc0d 	bl	8000ef0 <RCC_APB1PeriphClockCmd>

	/* Enable the DMA clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 80026d6:	2101      	movs	r1, #1
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe fbc9 	bl	8000e70 <RCC_AHBPeriphClockCmd>

	/* USARTx GPIO configuration -----------------------------------------------*/
	/* Connect USART pins to AF7 */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7); //TX
 80026de:	2207      	movs	r2, #7
 80026e0:	2102      	movs	r1, #2
 80026e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e6:	f7fe f85f 	bl	80007a8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_7); //RX
 80026ea:	2207      	movs	r2, #7
 80026ec:	210f      	movs	r1, #15
 80026ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f2:	f7fe f859 	bl	80007a8 <GPIO_PinAFConfig>

	/* Configure USART Tx and Rx as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80026f6:	2302      	movs	r3, #2
 80026f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800270e:	2304      	movs	r3, #4
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002712:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271c:	f7fd ffa8 	bl	8000670 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8002720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002730:	f7fd ff9e 	bl	8000670 <GPIO_Init>

	/* USARTx configuration ----------------------------------------------------*/
	USART_InitStructure.USART_BaudRate = 115200;
 8002734:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800273a:	2300      	movs	r3, #0
 800273c:	643b      	str	r3, [r7, #64]	; 0x40
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800273e:	2300      	movs	r3, #0
 8002740:	647b      	str	r3, [r7, #68]	; 0x44
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8002742:	2300      	movs	r3, #0
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002746:	2300      	movs	r3, #0
 8002748:	653b      	str	r3, [r7, #80]	; 0x50
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800274a:	230c      	movs	r3, #12
 800274c:	64fb      	str	r3, [r7, #76]	; 0x4c
	USART_Init(USART2, &USART_InitStructure);
 800274e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002752:	4619      	mov	r1, r3
 8002754:	4842      	ldr	r0, [pc, #264]	; (8002860 <USART2_Config+0x1d8>)
 8002756:	f7fe ff01 	bl	800155c <USART_Init>

	//	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);


	//	/* Configure DMA controller to manage USART TX request ----------*/
	DMA_DeInit(DMA1_Channel7);
 800275a:	4842      	ldr	r0, [pc, #264]	; (8002864 <USART2_Config+0x1dc>)
 800275c:	f7fd fdee 	bl	800033c <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART2 + 0x28;//0x04 ;
 8002760:	4b41      	ldr	r3, [pc, #260]	; (8002868 <USART2_Config+0x1e0>)
 8002762:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8002764:	2310      	movs	r3, #16
 8002766:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_BufferSize = 512;
 8002768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276c:	82bb      	strh	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8002782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_M2M = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA1_Channel7, &DMA_InitStructure);
 800278c:	f107 0308 	add.w	r3, r7, #8
 8002790:	4619      	mov	r1, r3
 8002792:	4834      	ldr	r0, [pc, #208]	; (8002864 <USART2_Config+0x1dc>)
 8002794:	f7fd fe8e 	bl	80004b4 <DMA_Init>
	DMA_SetCurrDataCounter(DMA1_Channel7, 0);
 8002798:	2100      	movs	r1, #0
 800279a:	4832      	ldr	r0, [pc, #200]	; (8002864 <USART2_Config+0x1dc>)
 800279c:	f7fd fee8 	bl	8000570 <DMA_SetCurrDataCounter>
	DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
 80027a0:	2201      	movs	r2, #1
 80027a2:	2102      	movs	r1, #2
 80027a4:	482f      	ldr	r0, [pc, #188]	; (8002864 <USART2_Config+0x1dc>)
 80027a6:	f7fd ff01 	bl	80005ac <DMA_ITConfig>
	DMA_ClearFlag(DMA1_FLAG_TC4|DMA1_FLAG_HT4|DMA1_FLAG_TE4);
 80027aa:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80027ae:	f7fd ff45 	bl	800063c <DMA_ClearFlag>
	DMA_Cmd(DMA1_Channel7, DISABLE);
 80027b2:	2100      	movs	r1, #0
 80027b4:	482b      	ldr	r0, [pc, #172]	; (8002864 <USART2_Config+0x1dc>)
 80027b6:	f7fd febd 	bl	8000534 <DMA_Cmd>
	USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);
 80027ba:	2201      	movs	r2, #1
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	4828      	ldr	r0, [pc, #160]	; (8002860 <USART2_Config+0x1d8>)
 80027c0:	f7fe ffb6 	bl	8001730 <USART_DMACmd>


	/* Configure DMA controller to manage USART RX request ----------*/
	DMA_DeInit(DMA1_Channel6);
 80027c4:	4829      	ldr	r0, [pc, #164]	; (800286c <USART2_Config+0x1e4>)
 80027c6:	f7fd fdb9 	bl	800033c <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART2 + 0x24; //0x04 ;
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <USART2_Config+0x1e8>)
 80027cc:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)s->rxBuf;
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80027d4:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_BufferSize = DMA_RX_BUFFER;
 80027da:	2301      	movs	r3, #1
 80027dc:	82bb      	strh	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80027ee:	2320      	movs	r3, #32
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80027f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_M2M = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA1_Channel6, &DMA_InitStructure);
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	4619      	mov	r1, r3
 8002802:	481a      	ldr	r0, [pc, #104]	; (800286c <USART2_Config+0x1e4>)
 8002804:	f7fd fe56 	bl	80004b4 <DMA_Init>
	DMA_ClearFlag(DMA1_FLAG_TC6|DMA1_FLAG_HT6|DMA1_FLAG_TE6);
 8002808:	f44f 0060 	mov.w	r0, #14680064	; 0xe00000
 800280c:	f7fd ff16 	bl	800063c <DMA_ClearFlag>
	DMA_Cmd(DMA1_Channel6, ENABLE);
 8002810:	2101      	movs	r1, #1
 8002812:	4816      	ldr	r0, [pc, #88]	; (800286c <USART2_Config+0x1e4>)
 8002814:	f7fd fe8e 	bl	8000534 <DMA_Cmd>
	USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);
 8002818:	2201      	movs	r2, #1
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	4810      	ldr	r0, [pc, #64]	; (8002860 <USART2_Config+0x1d8>)
 800281e:	f7fe ff87 	bl	8001730 <USART_DMACmd>
	s->rxPos = DMA_GetCurrDataCounter(DMA1_Channel6);
 8002822:	4812      	ldr	r0, [pc, #72]	; (800286c <USART2_Config+0x1e4>)
 8002824:	f7fd feb4 	bl	8000590 <DMA_GetCurrDataCounter>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 9;
	//	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	//	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	//	NVIC_Init(&NVIC_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 8002832:	2311      	movs	r3, #17
 8002834:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 9;
 8002836:	2309      	movs	r3, #9
 8002838:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800283e:	2301      	movs	r3, #1
 8002840:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe f80d 	bl	8000864 <NVIC_Init>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 800284a:	2101      	movs	r1, #1
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <USART2_Config+0x1d8>)
 800284e:	f7fe ff41 	bl	80016d4 <USART_Cmd>


}
 8002852:	bf00      	nop
 8002854:	3758      	adds	r7, #88	; 0x58
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000204 	.word	0x20000204
 8002860:	40004400 	.word	0x40004400
 8002864:	40020080 	.word	0x40020080
 8002868:	40004428 	.word	0x40004428
 800286c:	4002006c 	.word	0x4002006c
 8002870:	40004424 	.word	0x40004424

08002874 <serialStartTxDMA>:

void serialStartTxDMA(serialPort_t *s)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	if (!s->txDmaRunning) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d133      	bne.n	80028ee <serialStartTxDMA+0x7a>
		DMA1_Channel7->CMAR = (uint32_t)&s->txBuf[s->txTail];
 8002886:	491c      	ldr	r1, [pc, #112]	; (80028f8 <serialStartTxDMA+0x84>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
		if (s->txHead > s->txTail) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d90f      	bls.n	80028c4 <serialStartTxDMA+0x50>
			DMA1_Channel7->CNDTR = s->txHead - s->txTail;
 80028a4:	4914      	ldr	r1, [pc, #80]	; (80028f8 <serialStartTxDMA+0x84>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	604b      	str	r3, [r1, #4]
			s->txTail = s->txHead;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80028c2:	e00c      	b.n	80028de <serialStartTxDMA+0x6a>
		}
		else {
			DMA1_Channel7->CNDTR = s->txBufSize - s->txTail;
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <serialStartTxDMA+0x84>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	604b      	str	r3, [r1, #4]
			s->txTail = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		}

		s->txDmaRunning = 1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
		DMA_Cmd(DMA1_Channel7, ENABLE);
 80028e6:	2101      	movs	r1, #1
 80028e8:	4803      	ldr	r0, [pc, #12]	; (80028f8 <serialStartTxDMA+0x84>)
 80028ea:	f7fd fe23 	bl	8000534 <DMA_Cmd>
	}
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40020080 	.word	0x40020080

080028fc <serialWrite>:

void serialWrite(serialPort_t *s, unsigned char ch)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
	s->txBuf[s->txHead] = ch;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	78f9      	ldrb	r1, [r7, #3]
 8002912:	54d1      	strb	r1, [r2, r3]
	s->txHead = (s->txHead + 1) % s->txBufSize;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800291a:	3301      	adds	r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002922:	fbb3 f1f2 	udiv	r1, r3, r2
 8002926:	fb02 f201 	mul.w	r2, r2, r1
 800292a:	1a9a      	subs	r2, r3, r2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	serialStartTxDMA(s);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff9e 	bl	8002874 <serialStartTxDMA>
	//USART_ITConfig(USART2, USART_IT_TXE, ENABLE);

}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <serialRead>:


int serialRead(serialPort_t *s) {
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	int ch;

	ch = s->rxBuf[s->rxBufSize - s->rxPos];
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800295e:	60fb      	str	r3, [r7, #12]
	if (--s->rxPos == 0)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8002966:	3b01      	subs	r3, #1
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <serialRead+0x3e>
		s->rxPos = s->rxBufSize;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	//memset(s->rxBuf, 0, sizeof(s->rxBuf)/sizeof(char));
	return ch;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <serialPrint>:

void serialPrint(serialPort_t *s, const char *str) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
	while (*str)
 8002996:	e007      	b.n	80029a8 <serialPrint+0x1c>
		serialWrite(s, *(str++));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	603a      	str	r2, [r7, #0]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffaa 	bl	80028fc <serialWrite>
	//memset(s->rxBuf, 0, sizeof(s->rxBuf)/sizeof(char));
	return ch;
}

void serialPrint(serialPort_t *s, const char *str) {
	while (*str)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f3      	bne.n	8002998 <serialPrint+0xc>
		serialWrite(s, *(str++));
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <USART2_IRQHandler>:


}

void USART2_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
	serialPort_t *s = &serialPort2;
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <USART2_IRQHandler+0x70>)
 80029c0:	607b      	str	r3, [r7, #4]

	if (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == 1)
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	4819      	ldr	r0, [pc, #100]	; (8002a2c <USART2_IRQHandler+0x74>)
 80029c6:	f7fe ff13 	bl	80017f0 <USART_GetFlagStatus>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d126      	bne.n	8002a1e <USART2_IRQHandler+0x66>
	{
		if (s->txTail != s->txHead)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80029dc:	429a      	cmp	r2, r3
 80029de:	d019      	beq.n	8002a14 <USART2_IRQHandler+0x5c>
		{
			USART_SendData(USART2, s->txBuf[s->txTail]);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	480f      	ldr	r0, [pc, #60]	; (8002a2c <USART2_IRQHandler+0x74>)
 80029f0:	f7fe fe8c 	bl	800170c <USART_SendData>
			s->txTail = (s->txTail + 1) % s->txBufSize;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a06:	fb02 f201 	mul.w	r2, r2, r1
 8002a0a:	1a9a      	subs	r2, r3, r2
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		{
			USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
		}

	}
}
 8002a12:	e004      	b.n	8002a1e <USART2_IRQHandler+0x66>
			s->txTail = (s->txTail + 1) % s->txBufSize;
		}
		// EOT
		else
		{
			USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8002a14:	2200      	movs	r2, #0
 8002a16:	4906      	ldr	r1, [pc, #24]	; (8002a30 <USART2_IRQHandler+0x78>)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <USART2_IRQHandler+0x74>)
 8002a1a:	f7fe fea7 	bl	800176c <USART_ITConfig>
		}

	}
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000204 	.word	0x20000204
 8002a2c:	40004400 	.word	0x40004400
 8002a30:	00070107 	.word	0x00070107

08002a34 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
	serialPort_t *s = &serialPort2;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <DMA1_Channel7_IRQHandler+0x58>)
 8002a3c:	607b      	str	r3, [r7, #4]

	if(DMA_GetFlagStatus(DMA1_FLAG_TC7) == 1)
 8002a3e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002a42:	f7fd fdd1 	bl	80005e8 <DMA_GetFlagStatus>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10b      	bne.n	8002a64 <DMA1_Channel7_IRQHandler+0x30>
	{
		DMA_ClearFlag(DMA1_FLAG_TC7|DMA1_FLAG_HT7|DMA1_FLAG_TE7);
 8002a4c:	f04f 6060 	mov.w	r0, #234881024	; 0xe000000
 8002a50:	f7fd fdf4 	bl	800063c <DMA_ClearFlag>
		DMA_Cmd(DMA1_Channel7, DISABLE);
 8002a54:	2100      	movs	r1, #0
 8002a56:	480e      	ldr	r0, [pc, #56]	; (8002a90 <DMA1_Channel7_IRQHandler+0x5c>)
 8002a58:	f7fd fd6c 	bl	8000534 <DMA_Cmd>
		s->txDmaRunning = 0;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	}

	DMA_ClearFlag(DMA1_FLAG_GL7);
 8002a64:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002a68:	f7fd fde8 	bl	800063c <DMA_ClearFlag>

		if (s->txHead != s->txTail)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d002      	beq.n	8002a82 <DMA1_Channel7_IRQHandler+0x4e>
			serialStartTxDMA(s);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fef9 	bl	8002874 <serialStartTxDMA>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000204 	.word	0x20000204
 8002a90:	40020080 	.word	0x40020080

08002a94 <SPI_Config>:
#include "spi.h"
#include "stm32f30x.h"

void SPI_Config(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef   SPI_InitStructure;

    /* Configure SPI3 pins: SCK and MOSI */
	GPIO_InitStructure.GPIO_Pin = SPI3_SCK_PIN | SPI3_MOSI_PIN;
 8002a9a:	2328      	movs	r3, #40	; 0x28
 8002a9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI3_PORT, &GPIO_InitStructure);
 8002aae:	f107 0318 	add.w	r3, r7, #24
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4853      	ldr	r0, [pc, #332]	; (8002c04 <SPI_Config+0x170>)
 8002ab6:	f7fd fddb 	bl	8000670 <GPIO_Init>

	/* Configure MISO as Input Floating */
	GPIO_InitStructure.GPIO_Pin = SPI3_MISO_PIN;
 8002aba:	2310      	movs	r3, #16
 8002abc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI3_PORT, &GPIO_InitStructure);
 8002ace:	f107 0318 	add.w	r3, r7, #24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	484b      	ldr	r0, [pc, #300]	; (8002c04 <SPI_Config+0x170>)
 8002ad6:	f7fd fdcb 	bl	8000670 <GPIO_Init>

	/* Configure SPI3 pins: CS or NSS */
	GPIO_InitStructure.GPIO_Pin = SPI3_NSS_PIN;
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	773b      	strb	r3, [r7, #28]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]

    GPIO_PinAFConfig(SPI3_PORT, SPI_SPI3_SCK_SOURCE, GPIO_AF_6);
 8002af0:	2206      	movs	r2, #6
 8002af2:	2103      	movs	r1, #3
 8002af4:	4843      	ldr	r0, [pc, #268]	; (8002c04 <SPI_Config+0x170>)
 8002af6:	f7fd fe57 	bl	80007a8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI3_PORT, SPI_SPI3_MISO_SOURCE, GPIO_AF_6);
 8002afa:	2206      	movs	r2, #6
 8002afc:	2104      	movs	r1, #4
 8002afe:	4841      	ldr	r0, [pc, #260]	; (8002c04 <SPI_Config+0x170>)
 8002b00:	f7fd fe52 	bl	80007a8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI3_PORT, SPI_SPI3_MOSI_SOURCE, GPIO_AF_6);
 8002b04:	2206      	movs	r2, #6
 8002b06:	2105      	movs	r1, #5
 8002b08:	483e      	ldr	r0, [pc, #248]	; (8002c04 <SPI_Config+0x170>)
 8002b0a:	f7fd fe4d 	bl	80007a8 <GPIO_PinAFConfig>

    /* Enable SPI3 clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b14:	f7fe f9ec 	bl	8000ef0 <RCC_APB1PeriphClockCmd>

    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	80bb      	strh	r3, [r7, #4]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002b1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b20:	80fb      	strh	r3, [r7, #6]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8002b22:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b26:	813b      	strh	r3, [r7, #8]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	817b      	strh	r3, [r7, #10]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b34:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8002b36:	2310      	movs	r3, #16
 8002b38:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 8002b3e:	2307      	movs	r3, #7
 8002b40:	82bb      	strh	r3, [r7, #20]
    SPI_Init(SPI3, &SPI_InitStructure);
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4830      	ldr	r0, [pc, #192]	; (8002c08 <SPI_Config+0x174>)
 8002b48:	f7fe fa32 	bl	8000fb0 <SPI_Init>
    /* Enable SPI3 */
    SPI_Cmd(SPI3, ENABLE);
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	482e      	ldr	r0, [pc, #184]	; (8002c08 <SPI_Config+0x174>)
 8002b50:	f7fe faba 	bl	80010c8 <SPI_Cmd>




	/* Configure SPI2 pins: SCK and MOSI */
	GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN | SPI2_MOSI_PIN;
 8002b54:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b62:	2300      	movs	r3, #0
 8002b64:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8002b66:	2302      	movs	r3, #2
 8002b68:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI2_PORT, &GPIO_InitStructure);
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4824      	ldr	r0, [pc, #144]	; (8002c04 <SPI_Config+0x170>)
 8002b72:	f7fd fd7d 	bl	8000670 <GPIO_Init>

	/* Configure MISO as Input Floating */
	GPIO_InitStructure.GPIO_Pin = SPI2_MISO_PIN;
 8002b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002b80:	2302      	movs	r3, #2
 8002b82:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(SPI2_PORT, &GPIO_InitStructure);
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	4619      	mov	r1, r3
 8002b92:	481c      	ldr	r0, [pc, #112]	; (8002c04 <SPI_Config+0x170>)
 8002b94:	f7fd fd6c 	bl	8000670 <GPIO_Init>


    // Connect SPI pins to Alternate Function
    GPIO_PinAFConfig(SPI2_PORT, SPI_SPI2_SCK_SOURCE, GPIO_AF_5);
 8002b98:	2205      	movs	r2, #5
 8002b9a:	210d      	movs	r1, #13
 8002b9c:	4819      	ldr	r0, [pc, #100]	; (8002c04 <SPI_Config+0x170>)
 8002b9e:	f7fd fe03 	bl	80007a8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI2_PORT, SPI_SPI2_MISO_SOURCE, GPIO_AF_5);
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	210e      	movs	r1, #14
 8002ba6:	4817      	ldr	r0, [pc, #92]	; (8002c04 <SPI_Config+0x170>)
 8002ba8:	f7fd fdfe 	bl	80007a8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(SPI2_PORT, SPI_SPI2_MOSI_SOURCE, GPIO_AF_5);
 8002bac:	2205      	movs	r2, #5
 8002bae:	210f      	movs	r1, #15
 8002bb0:	4814      	ldr	r0, [pc, #80]	; (8002c04 <SPI_Config+0x170>)
 8002bb2:	f7fd fdf9 	bl	80007a8 <GPIO_PinAFConfig>

	/* Enable SPI3 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bbc:	f7fe f998 	bl	8000ef0 <RCC_APB1PeriphClockCmd>

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002bc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002bc8:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8002bca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002bce:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bdc:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8002bde:	2310      	movs	r3, #16
 8002be0:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002be2:	2300      	movs	r3, #0
 8002be4:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8002be6:	2307      	movs	r3, #7
 8002be8:	82bb      	strh	r3, [r7, #20]
	SPI_Init(SPI2, &SPI_InitStructure);
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4807      	ldr	r0, [pc, #28]	; (8002c0c <SPI_Config+0x178>)
 8002bf0:	f7fe f9de 	bl	8000fb0 <SPI_Init>

	/* Enable SPI2 */
	SPI_Cmd(SPI2, ENABLE);
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <SPI_Config+0x178>)
 8002bf8:	f7fe fa66 	bl	80010c8 <SPI_Cmd>
}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	48000400 	.word	0x48000400
 8002c08:	40003c00 	.word	0x40003c00
 8002c0c:	40003800 	.word	0x40003800

08002c10 <spi_rw_16>:
//	SPI_Cmd(SPI3, ENABLE);
//}


uint16_t spi_rw_16(SPI_TypeDef* SPIx, uint16_t out)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
   while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 8002c1c:	bf00      	nop
 8002c1e:	2102      	movs	r1, #2
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe fa8f 	bl	8001144 <SPI_I2S_GetFlagStatus>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f8      	beq.n	8002c1e <spi_rw_16+0xe>

    /* Send byte through the SPI peripheral */
    SPI_I2S_SendData16(SPIx , out);
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe fa69 	bl	8001108 <SPI_I2S_SendData16>

    /* Wait to receive a byte */
   while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
 8002c36:	bf00      	nop
 8002c38:	2101      	movs	r1, #1
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fa82 	bl	8001144 <SPI_I2S_GetFlagStatus>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f8      	beq.n	8002c38 <spi_rw_16+0x28>

    /* Return the byte read from the SPI bus */
    return SPI_I2S_ReceiveData16(SPIx);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fa6e 	bl	8001128 <SPI_I2S_ReceiveData16>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop

08002c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c5e:	e003      	b.n	8002c68 <LoopCopyDataInit>

08002c60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c66:	3104      	adds	r1, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c70:	d3f6      	bcc.n	8002c60 <CopyDataInit>
	ldr	r2, =_sbss
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c74:	e002      	b.n	8002c7c <LoopFillZerobss>

08002c76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c78:	f842 3b04 	str.w	r3, [r2], #4

08002c7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <LoopForever+0x16>)
	cmp	r2, r3
 8002c7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c80:	d3f9      	bcc.n	8002c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c82:	f000 f813 	bl	8002cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c86:	f000 fa93 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c8a:	f7ff fce7 	bl	800265c <main>

08002c8e <LoopForever>:

LoopForever:
    b LoopForever
 8002c8e:	e7fe      	b.n	8002c8e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c90:	20004000 	.word	0x20004000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002c94:	08003234 	.word	0x08003234
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c9c:	20000044 	.word	0x20000044
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002ca0:	20000044 	.word	0x20000044
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ca4:	20000630 	.word	0x20000630

08002ca8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC1_IRQHandler>
	...

08002cac <SystemInit>:
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <SystemInit+0x84>)
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <SystemInit+0x84>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <SystemInit+0x88>)
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <SystemInit+0x88>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR &= 0xF87FC00C;
 8002ccc:	4919      	ldr	r1, [pc, #100]	; (8002d34 <SystemInit+0x88>)
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <SystemInit+0x88>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <SystemInit+0x8c>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cd8:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <SystemInit+0x88>)
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <SystemInit+0x88>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <SystemInit+0x88>)
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <SystemInit+0x88>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
	RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <SystemInit+0x88>)
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <SystemInit+0x88>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002cfe:	6053      	str	r3, [r2, #4]

	/* Reset PREDIV1[3:0] bits */
	RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <SystemInit+0x88>)
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <SystemInit+0x88>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f023 030f 	bic.w	r3, r3, #15
 8002d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Reset USARTSW[1:0], I2CSW and TIMs bits */
	RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <SystemInit+0x88>)
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <SystemInit+0x88>)
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <SystemInit+0x90>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	630b      	str	r3, [r1, #48]	; 0x30

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <SystemInit+0x88>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]

	/* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
	SetSysClock();
 8002d1e:	f000 f87b 	bl	8002e18 <SetSysClock>

#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <SystemInit+0x84>)
 8002d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d28:	609a      	str	r2, [r3, #8]
#endif  
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	f87fc00c 	.word	0xf87fc00c
 8002d3c:	ff00fccc 	.word	0xff00fccc

08002d40 <SystemCoreClockUpdate>:
 *
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate (void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
	uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	603b      	str	r3, [r7, #0]

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <SystemCoreClockUpdate+0xc4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	60fb      	str	r3, [r7, #12]

	switch (tmp)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d007      	beq.n	8002d76 <SystemCoreClockUpdate+0x36>
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d009      	beq.n	8002d7e <SystemCoreClockUpdate+0x3e>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d12f      	bne.n	8002dce <SystemCoreClockUpdate+0x8e>
	{
	case 0x00:  /* HSI used as system clock */
		SystemCoreClock = HSI_VALUE;
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <SystemCoreClockUpdate+0xcc>)
 8002d72:	601a      	str	r2, [r3, #0]
		break;
 8002d74:	e02f      	b.n	8002dd6 <SystemCoreClockUpdate+0x96>
	case 0x04:  /* HSE used as system clock */
		SystemCoreClock = HSE_VALUE;
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <SystemCoreClockUpdate+0xcc>)
 8002d7a:	601a      	str	r2, [r3, #0]
		break;
 8002d7c:	e02b      	b.n	8002dd6 <SystemCoreClockUpdate+0x96>
	case 0x08:  /* PLL used as system clock */
		/* Get PLL clock source and multiplication factor ----------------------*/
		pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <SystemCoreClockUpdate+0xc4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d86:	60bb      	str	r3, [r7, #8]
		pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <SystemCoreClockUpdate+0xc4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	607b      	str	r3, [r7, #4]
		pllmull = ( pllmull >> 18) + 2;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0c9b      	lsrs	r3, r3, #18
 8002d96:	3302      	adds	r3, #2
 8002d98:	60bb      	str	r3, [r7, #8]

		if (pllsource == 0x00)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <SystemCoreClockUpdate+0x6e>
		{
			/* HSI oscillator clock divided by 2 selected as PLL clock entry */
			SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <SystemCoreClockUpdate+0xd0>)
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002daa:	6013      	str	r3, [r2, #0]
		{
			prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
			/* HSE oscillator clock selected as PREDIV1 clock entry */
			SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
		}
		break;
 8002dac:	e013      	b.n	8002dd6 <SystemCoreClockUpdate+0x96>
			/* HSI oscillator clock divided by 2 selected as PLL clock entry */
			SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
		}
		else
		{
			prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <SystemCoreClockUpdate+0xc4>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3301      	adds	r3, #1
 8002db8:	603b      	str	r3, [r7, #0]
			/* HSE oscillator clock selected as PREDIV1 clock entry */
			SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 8002dba:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <SystemCoreClockUpdate+0xcc>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002dca:	6013      	str	r3, [r2, #0]
		}
		break;
 8002dcc:	e003      	b.n	8002dd6 <SystemCoreClockUpdate+0x96>
	default: /* HSI used as system clock */
		SystemCoreClock = HSI_VALUE;
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <SystemCoreClockUpdate+0xcc>)
 8002dd2:	601a      	str	r2, [r3, #0]
		break;
 8002dd4:	bf00      	nop
	}
	/* Compute HCLK clock frequency ----------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <SystemCoreClockUpdate+0xc4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <SystemCoreClockUpdate+0xd4>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	60fb      	str	r3, [r7, #12]
	/* HCLK clock frequency */
	SystemCoreClock >>= tmp;
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <SystemCoreClockUpdate+0xc8>)
 8002df4:	6013      	str	r3, [r2, #0]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	20000030 	.word	0x20000030
 8002e0c:	007a1200 	.word	0x007a1200
 8002e10:	003d0900 	.word	0x003d0900
 8002e14:	20000034 	.word	0x20000034

08002e18 <SetSysClock>:
 *         is reset to the default reset state (done in SystemInit() function).
 * @param  None
 * @retval None
 */
static void SetSysClock(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	2300      	movs	r3, #0
 8002e24:	603b      	str	r3, [r7, #0]
	/*            PLL (clocked by HSE) used as System clock source                */
	/******************************************************************************/

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002e26:	4a33      	ldr	r2, [pc, #204]	; (8002ef4 <SetSysClock+0xdc>)
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <SetSysClock+0xdc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <SetSysClock+0xdc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	607b      	str	r3, [r7, #4]
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <SetSysClock+0x38>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e4e:	d1f0      	bne.n	8002e32 <SetSysClock+0x1a>

	if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <SetSysClock+0xdc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <SetSysClock+0x4a>
	{
		HSEStatus = (uint32_t)0x01;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	e001      	b.n	8002e66 <SetSysClock+0x4e>
	}
	else
	{
		HSEStatus = (uint32_t)0x00;
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t)0x01)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d13c      	bne.n	8002ee6 <SetSysClock+0xce>
	{
		/* Enable Prefetch Buffer and set Flash Latency */
		FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <SetSysClock+0xe0>)
 8002e6e:	2212      	movs	r2, #18
 8002e70:	601a      	str	r2, [r3, #0]

		/* HCLK = SYSCLK / 1 */
		RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002e72:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <SetSysClock+0xdc>)
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <SetSysClock+0xdc>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	6053      	str	r3, [r2, #4]

		/* PCLK2 = HCLK / 1 */
		RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <SetSysClock+0xdc>)
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <SetSysClock+0xdc>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6053      	str	r3, [r2, #4]

		/* PCLK1 = HCLK / 2 */
		RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <SetSysClock+0xdc>)
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <SetSysClock+0xdc>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8c:	6053      	str	r3, [r2, #4]

		/* PLL configuration */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002e8e:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <SetSysClock+0xdc>)
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <SetSysClock+0xdc>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e98:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL3);
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <SetSysClock+0xdc>)
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <SetSysClock+0xdc>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002ea4:	6053      	str	r3, [r2, #4]

		/* Enable PLL */
		RCC->CR |= RCC_CR_PLLON;
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <SetSysClock+0xdc>)
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <SetSysClock+0xdc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	6013      	str	r3, [r2, #0]

		/* Wait till PLL is ready */
		while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002eb2:	bf00      	nop
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <SetSysClock+0xdc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f9      	beq.n	8002eb4 <SetSysClock+0x9c>
		{
		}

		/* Select PLL as system clock source */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002ec0:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <SetSysClock+0xdc>)
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <SetSysClock+0xdc>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8002ecc:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <SetSysClock+0xdc>)
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <SetSysClock+0xdc>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	6053      	str	r3, [r2, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002ed8:	bf00      	nop
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <SetSysClock+0xdc>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d1f9      	bne.n	8002eda <SetSysClock+0xc2>
		}
	}
	else
	{
	}
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40022000 	.word	0x40022000

08002efc <timerMicros>:
#include "stm32f30x.h"

timerStruct_t timerData;

// must be called at least once every 65536 us in order for this strategy to work
unsigned long timerMicros(void) {
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
	unsigned int timerVal;
	unsigned int hiBits;

	// disable *all* interrupts
	__asm volatile ("cpsid f");
 8002f02:	b671      	cpsid	f

	timerVal = TIMER_TIM->CNT;
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <timerMicros+0x44>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	607b      	str	r3, [r7, #4]
	if (timerVal < timerData.lastTimerVal)
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <timerMicros+0x48>)
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d904      	bls.n	8002f1e <timerMicros+0x22>
		timerData.hiBits++;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <timerMicros+0x48>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <timerMicros+0x48>)
 8002f1c:	6013      	str	r3, [r2, #0]

	hiBits = timerData.hiBits;
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <timerMicros+0x48>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	603b      	str	r3, [r7, #0]
	timerData.lastTimerVal = timerVal;
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <timerMicros+0x48>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6053      	str	r3, [r2, #4]

	// enable interrupts
	__asm volatile ("cpsie f");
 8002f2a:	b661      	cpsie	f

	return (hiBits << 16) | timerVal;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	041a      	lsls	r2, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4313      	orrs	r3, r2
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40014400 	.word	0x40014400
 8002f44:	20000628 	.word	0x20000628

08002f48 <timerInit>:

// Use TIMER_TIM to create a us system clock
void timerInit(void) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	uint16_t prescalerValue;

	TIM_DeInit(TIMER_TIM);
 8002f4e:	4818      	ldr	r0, [pc, #96]	; (8002fb0 <timerInit+0x68>)
 8002f50:	f7fe f914 	bl	800117c <TIM_DeInit>

	TIMER_EN;
 8002f54:	2101      	movs	r1, #1
 8002f56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f5a:	f7fd ffa9 	bl	8000eb0 <RCC_APB2PeriphClockCmd>

	prescalerValue = (SystemCoreClock/1000000) - 1;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <timerInit+0x6c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <timerInit+0x70>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	0c9b      	lsrs	r3, r3, #18
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	/* (CoreClock /2 ) / prescalerValue = 1MHz (us) */
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8002f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f74:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8002f76:	89fb      	ldrh	r3, [r7, #14]
 8002f78:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseInit(TIMER_TIM, &TIM_TimeBaseStructure);
 8002f86:	463b      	mov	r3, r7
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <timerInit+0x68>)
 8002f8c:	f7fe f9ac 	bl	80012e8 <TIM_TimeBaseInit>

	// reset
	timerData.hiBits = 0;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <timerInit+0x74>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
	TIM_SetCounter(TIMER_TIM, 0);
 8002f96:	2100      	movs	r1, #0
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <timerInit+0x68>)
 8002f9a:	f7fe fa25 	bl	80013e8 <TIM_SetCounter>

	// go...
	TIM_Cmd(TIMER_TIM, ENABLE);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <timerInit+0x68>)
 8002fa2:	f7fe fa3d 	bl	8001420 <TIM_Cmd>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	20000030 	.word	0x20000030
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	20000628 	.word	0x20000628

08002fc0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002fd0:	e004      	b.n	8002fdc <ts_itoa+0x1c>
		div *= base;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d2f3      	bcs.n	8002fd2 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8002fea:	e029      	b.n	8003040 <ts_itoa+0x80>
	{
		int num = d/div;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	613b      	str	r3, [r7, #16]
		d = d%div;
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ffe:	fb02 f201 	mul.w	r2, r2, r1
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	fb92 f3f3 	sdiv	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b09      	cmp	r3, #9
 8003014:	dd0a      	ble.n	800302c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	6011      	str	r1, [r2, #0]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	3237      	adds	r2, #55	; 0x37
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e009      	b.n	8003040 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c59      	adds	r1, r3, #1
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	6011      	str	r1, [r2, #0]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	3230      	adds	r2, #48	; 0x30
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1d2      	bne.n	8002fec <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop

08003054 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003064:	e07d      	b.n	8003162 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b25      	cmp	r3, #37	; 0x25
 800306c:	d171      	bne.n	8003152 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b64      	cmp	r3, #100	; 0x64
 800307a:	d01e      	beq.n	80030ba <ts_formatstring+0x66>
 800307c:	2b64      	cmp	r3, #100	; 0x64
 800307e:	dc06      	bgt.n	800308e <ts_formatstring+0x3a>
 8003080:	2b58      	cmp	r3, #88	; 0x58
 8003082:	d050      	beq.n	8003126 <ts_formatstring+0xd2>
 8003084:	2b63      	cmp	r3, #99	; 0x63
 8003086:	d00e      	beq.n	80030a6 <ts_formatstring+0x52>
 8003088:	2b25      	cmp	r3, #37	; 0x25
 800308a:	d058      	beq.n	800313e <ts_formatstring+0xea>
 800308c:	e05d      	b.n	800314a <ts_formatstring+0xf6>
 800308e:	2b73      	cmp	r3, #115	; 0x73
 8003090:	d02b      	beq.n	80030ea <ts_formatstring+0x96>
 8003092:	2b73      	cmp	r3, #115	; 0x73
 8003094:	dc02      	bgt.n	800309c <ts_formatstring+0x48>
 8003096:	2b69      	cmp	r3, #105	; 0x69
 8003098:	d00f      	beq.n	80030ba <ts_formatstring+0x66>
 800309a:	e056      	b.n	800314a <ts_formatstring+0xf6>
 800309c:	2b75      	cmp	r3, #117	; 0x75
 800309e:	d037      	beq.n	8003110 <ts_formatstring+0xbc>
 80030a0:	2b78      	cmp	r3, #120	; 0x78
 80030a2:	d040      	beq.n	8003126 <ts_formatstring+0xd2>
 80030a4:	e051      	b.n	800314a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	60fa      	str	r2, [r7, #12]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	1d11      	adds	r1, r2, #4
 80030b0:	6079      	str	r1, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]
				break;
 80030b8:	e047      	b.n	800314a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	1d1a      	adds	r2, r3, #4
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da07      	bge.n	80030da <ts_formatstring+0x86>
					{
						val *= -1;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	425b      	negs	r3, r3
 80030ce:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60fa      	str	r2, [r7, #12]
 80030d6:	222d      	movs	r2, #45	; 0x2d
 80030d8:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80030da:	69f9      	ldr	r1, [r7, #28]
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	220a      	movs	r2, #10
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff6c 	bl	8002fc0 <ts_itoa>
				}
				break;
 80030e8:	e02f      	b.n	800314a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1d1a      	adds	r2, r3, #4
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80030f4:	e007      	b.n	8003106 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	60fa      	str	r2, [r7, #12]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	1c51      	adds	r1, r2, #1
 8003100:	61b9      	str	r1, [r7, #24]
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f3      	bne.n	80030f6 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 800310e:	e01c      	b.n	800314a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	220a      	movs	r2, #10
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff4e 	bl	8002fc0 <ts_itoa>
				break;
 8003124:	e011      	b.n	800314a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	1d1a      	adds	r2, r3, #4
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	2210      	movs	r2, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff42 	bl	8002fc0 <ts_itoa>
				break;
 800313c:	e005      	b.n	800314a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	60fa      	str	r2, [r7, #12]
 8003144:	2225      	movs	r2, #37	; 0x25
 8003146:	701a      	strb	r2, [r3, #0]
				  break;
 8003148:	bf00      	nop
			}
			fmt++;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	e007      	b.n	8003162 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60fa      	str	r2, [r7, #12]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	1c51      	adds	r1, r2, #1
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f47f af7d 	bne.w	8003066 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	461a      	mov	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	1ad3      	subs	r3, r2, r3
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop

08003184 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8003184:	b40e      	push	{r1, r2, r3}
 8003186:	b580      	push	{r7, lr}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800318e:	f107 0320 	add.w	r3, r7, #32
 8003192:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	69f9      	ldr	r1, [r7, #28]
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff5b 	bl	8003054 <ts_formatstring>
 800319e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031ac:	b003      	add	sp, #12
 80031ae:	4770      	bx	lr

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <__libc_init_array+0x3c>)
 80031b4:	4c0e      	ldr	r4, [pc, #56]	; (80031f0 <__libc_init_array+0x40>)
 80031b6:	1ae4      	subs	r4, r4, r3
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	2500      	movs	r5, #0
 80031bc:	461e      	mov	r6, r3
 80031be:	42a5      	cmp	r5, r4
 80031c0:	d004      	beq.n	80031cc <__libc_init_array+0x1c>
 80031c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c6:	4798      	blx	r3
 80031c8:	3501      	adds	r5, #1
 80031ca:	e7f8      	b.n	80031be <__libc_init_array+0xe>
 80031cc:	f000 f81e 	bl	800320c <_init>
 80031d0:	4c08      	ldr	r4, [pc, #32]	; (80031f4 <__libc_init_array+0x44>)
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <__libc_init_array+0x48>)
 80031d4:	1ae4      	subs	r4, r4, r3
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	2500      	movs	r5, #0
 80031da:	461e      	mov	r6, r3
 80031dc:	42a5      	cmp	r5, r4
 80031de:	d004      	beq.n	80031ea <__libc_init_array+0x3a>
 80031e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e4:	4798      	blx	r3
 80031e6:	3501      	adds	r5, #1
 80031e8:	e7f8      	b.n	80031dc <__libc_init_array+0x2c>
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	0800322c 	.word	0x0800322c
 80031f0:	0800322c 	.word	0x0800322c
 80031f4:	08003230 	.word	0x08003230
 80031f8:	0800322c 	.word	0x0800322c

080031fc <memset>:
 80031fc:	4402      	add	r2, r0
 80031fe:	4603      	mov	r3, r0
 8003200:	4293      	cmp	r3, r2
 8003202:	d002      	beq.n	800320a <memset+0xe>
 8003204:	f803 1b01 	strb.w	r1, [r3], #1
 8003208:	e7fa      	b.n	8003200 <memset+0x4>
 800320a:	4770      	bx	lr

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr
